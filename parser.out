Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMPLEX
    IMAGINARY

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> declaration
Rule 5     external_declaration -> macro
Rule 6     macro -> MACRO IDENTIFIER IDENTIFIER constant_expression
Rule 7     macro -> MACRO IDENTIFIER < headfile >
Rule 8     macro -> MACRO IDENTIFIER " headfile "
Rule 9     headfile -> IDENTIFIER . IDENTIFIER
Rule 10    headfile -> IDENTIFIER
Rule 11    declaration -> declaration_specifiers ;
Rule 12    declaration -> declaration_specifiers init_declarator_list ;
Rule 13    init_declarator_list -> init_declarator
Rule 14    init_declarator_list -> init_declarator_list , init_declarator
Rule 15    init_declarator -> declarator
Rule 16    init_declarator -> declarator = initializer
Rule 17    declaration_specifiers -> storage_class_specifier
Rule 18    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 19    declaration_specifiers -> type_specifier
Rule 20    declaration_specifiers -> type_specifier declaration_specifiers
Rule 21    declaration_specifiers -> type_qualifier
Rule 22    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 23    declaration_specifiers -> function_specifier
Rule 24    declaration_specifiers -> function_specifier declaration_specifiers
Rule 25    storage_class_specifier -> TYPEDEF
Rule 26    storage_class_specifier -> EXTERN
Rule 27    storage_class_specifier -> STATIC
Rule 28    storage_class_specifier -> AUTO
Rule 29    storage_class_specifier -> REGISTER
Rule 30    function_specifier -> INLINE
Rule 31    type_specifier -> VOID
Rule 32    type_specifier -> CHAR
Rule 33    type_specifier -> SHORT
Rule 34    type_specifier -> INT
Rule 35    type_specifier -> LONG
Rule 36    type_specifier -> FLOAT
Rule 37    type_specifier -> DOUBLE
Rule 38    type_specifier -> SIGNED
Rule 39    type_specifier -> UNSIGNED
Rule 40    type_specifier -> BOOL
Rule 41    type_specifier -> struct_or_union_specifier
Rule 42    type_specifier -> enum_specifier
Rule 43    type_qualifier -> CONST
Rule 44    type_qualifier -> RESTRICT
Rule 45    type_qualifier -> VOLATILE
Rule 46    enum_specifier -> ENUM { enumerator_list }
Rule 47    enum_specifier -> ENUM IDENTIFIER { enumerator_list }
Rule 48    enum_specifier -> ENUM { enumerator_list , }
Rule 49    enum_specifier -> ENUM IDENTIFIER { enumerator_list , }
Rule 50    enum_specifier -> ENUM IDENTIFIER
Rule 51    enumerator_list -> enumerator
Rule 52    enumerator_list -> enumerator_list , enumerator
Rule 53    enumerator -> IDENTIFIER
Rule 54    enumerator -> IDENTIFIER = constant_expression
Rule 55    struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list }
Rule 56    struct_or_union_specifier -> struct_or_union { struct_declaration_list }
Rule 57    struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 58    struct_or_union -> STRUCT
Rule 59    struct_or_union -> UNION
Rule 60    struct_declaration_list -> struct_declaration
Rule 61    struct_declaration_list -> struct_declaration_list struct_declaration
Rule 62    struct_declaration -> specifier_qualifier_list struct_declarator_list ;
Rule 63    specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 64    specifier_qualifier_list -> type_specifier
Rule 65    specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 66    specifier_qualifier_list -> type_qualifier
Rule 67    struct_declarator_list -> struct_declarator
Rule 68    struct_declarator_list -> struct_declarator_list , struct_declarator
Rule 69    struct_declarator -> declarator
Rule 70    struct_declarator -> : constant_expression
Rule 71    struct_declarator -> declarator : constant_expression
Rule 72    declarator -> pointer direct_declarator
Rule 73    declarator -> direct_declarator
Rule 74    pointer -> *
Rule 75    pointer -> * type_qualifier_list
Rule 76    pointer -> * pointer
Rule 77    pointer -> * type_qualifier_list pointer
Rule 78    type_qualifier_list -> type_qualifier
Rule 79    type_qualifier_list -> type_qualifier_list type_qualifier
Rule 80    direct_declarator -> IDENTIFIER
Rule 81    direct_declarator -> ( declarator )
Rule 82    direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ]
Rule 83    direct_declarator -> direct_declarator [ type_qualifier_list ]
Rule 84    direct_declarator -> direct_declarator [ assignment_expression ]
Rule 85    direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ]
Rule 86    direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ]
Rule 87    direct_declarator -> direct_declarator [ type_qualifier_list * ]
Rule 88    direct_declarator -> direct_declarator [ * ]
Rule 89    direct_declarator -> direct_declarator [ ]
Rule 90    direct_declarator -> direct_declarator ( parameter_type_list )
Rule 91    direct_declarator -> direct_declarator ( identifier_list )
Rule 92    direct_declarator -> direct_declarator ( )
Rule 93    identifier_list -> IDENTIFIER
Rule 94    identifier_list -> identifier_list , IDENTIFIER
Rule 95    assignment_expression -> conditional_expression
Rule 96    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 97    assignment_operator -> =
Rule 98    assignment_operator -> MUL_ASSIGN
Rule 99    assignment_operator -> DIV_ASSIGN
Rule 100   assignment_operator -> MOD_ASSIGN
Rule 101   assignment_operator -> ADD_ASSIGN
Rule 102   assignment_operator -> SUB_ASSIGN
Rule 103   assignment_operator -> LEFT_ASSIGN
Rule 104   assignment_operator -> RIGHT_ASSIGN
Rule 105   assignment_operator -> AND_ASSIGN
Rule 106   assignment_operator -> XOR_ASSIGN
Rule 107   assignment_operator -> OR_ASSIGN
Rule 108   constant_expression -> conditional_expression
Rule 109   conditional_expression -> logical_or_expression
Rule 110   conditional_expression -> logical_or_expression ? expression : conditional_expression
Rule 111   logical_or_expression -> logical_and_expression
Rule 112   logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 113   logical_and_expression -> inclusive_or_expression
Rule 114   logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 115   inclusive_or_expression -> exclusive_or_expression
Rule 116   inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression
Rule 117   exclusive_or_expression -> and_expression
Rule 118   exclusive_or_expression -> exclusive_or_expression ^ and_expression
Rule 119   and_expression -> equality_expression
Rule 120   and_expression -> and_expression & equality_expression
Rule 121   equality_expression -> relational_expression
Rule 122   equality_expression -> equality_expression EQ_OP relational_expression
Rule 123   equality_expression -> equality_expression NE_OP relational_expression
Rule 124   relational_expression -> shift_expression
Rule 125   relational_expression -> relational_expression < shift_expression
Rule 126   relational_expression -> relational_expression > shift_expression
Rule 127   relational_expression -> relational_expression LE_OP shift_expression
Rule 128   relational_expression -> relational_expression GE_OP shift_expression
Rule 129   shift_expression -> additive_expression
Rule 130   shift_expression -> shift_expression LEFT_OP additive_expression
Rule 131   shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 132   additive_expression -> multiplicative_expression
Rule 133   additive_expression -> additive_expression + multiplicative_expression
Rule 134   additive_expression -> additive_expression - multiplicative_expression
Rule 135   multiplicative_expression -> cast_expression
Rule 136   multiplicative_expression -> multiplicative_expression * cast_expression
Rule 137   multiplicative_expression -> multiplicative_expression / cast_expression
Rule 138   multiplicative_expression -> multiplicative_expression % cast_expression
Rule 139   cast_expression -> unary_expression
Rule 140   cast_expression -> ( type_name ) cast_expression
Rule 141   unary_expression -> postfix_expression
Rule 142   unary_expression -> INC_OP unary_expression
Rule 143   unary_expression -> DEC_OP unary_expression
Rule 144   unary_expression -> unary_operator cast_expression
Rule 145   unary_expression -> SIZEOF unary_expression
Rule 146   unary_expression -> SIZEOF ( type_name )
Rule 147   unary_operator -> &
Rule 148   unary_operator -> *
Rule 149   unary_operator -> +
Rule 150   unary_operator -> -
Rule 151   unary_operator -> ~
Rule 152   unary_operator -> !
Rule 153   postfix_expression -> primary_expression
Rule 154   postfix_expression -> postfix_expression [ expression ]
Rule 155   postfix_expression -> postfix_expression ( )
Rule 156   postfix_expression -> postfix_expression ( argument_expression_list )
Rule 157   postfix_expression -> postfix_expression . IDENTIFIER
Rule 158   postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 159   postfix_expression -> postfix_expression INC_OP
Rule 160   postfix_expression -> postfix_expression DEC_OP
Rule 161   postfix_expression -> ( type_name ) { initializer_list }
Rule 162   postfix_expression -> ( type_name ) { initializer_list , }
Rule 163   primary_expression -> IDENTIFIER
Rule 164   primary_expression -> CONSTANT
Rule 165   primary_expression -> STRING_LITERAL
Rule 166   primary_expression -> ( expression )
Rule 167   expression -> assignment_expression
Rule 168   expression -> expression , assignment_expression
Rule 169   type_name -> specifier_qualifier_list
Rule 170   type_name -> specifier_qualifier_list abstract_declarator
Rule 171   abstract_declarator -> pointer
Rule 172   abstract_declarator -> direct_abstract_declarator
Rule 173   abstract_declarator -> pointer direct_abstract_declarator
Rule 174   direct_abstract_declarator -> ( abstract_declarator )
Rule 175   direct_abstract_declarator -> [ ]
Rule 176   direct_abstract_declarator -> [ assignment_expression ]
Rule 177   direct_abstract_declarator -> direct_abstract_declarator [ ]
Rule 178   direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ]
Rule 179   direct_abstract_declarator -> [ * ]
Rule 180   direct_abstract_declarator -> direct_abstract_declarator [ * ]
Rule 181   direct_abstract_declarator -> ( )
Rule 182   direct_abstract_declarator -> ( parameter_type_list )
Rule 183   direct_abstract_declarator -> direct_abstract_declarator ( )
Rule 184   direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list )
Rule 185   parameter_type_list -> parameter_list
Rule 186   parameter_type_list -> parameter_list , ELLIPSIS
Rule 187   parameter_list -> parameter_declaration
Rule 188   parameter_list -> parameter_list , parameter_declaration
Rule 189   parameter_declaration -> declaration_specifiers declarator
Rule 190   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 191   parameter_declaration -> declaration_specifiers
Rule 192   argument_expression_list -> assignment_expression
Rule 193   argument_expression_list -> argument_expression_list , assignment_expression
Rule 194   initializer_list -> initializer
Rule 195   initializer_list -> designation initializer
Rule 196   initializer_list -> initializer_list , initializer
Rule 197   initializer_list -> initializer_list , designation initializer
Rule 198   initializer -> assignment_expression
Rule 199   initializer -> { initializer_list }
Rule 200   initializer -> { initializer_list , }
Rule 201   designation -> designator_list =
Rule 202   designator_list -> designator
Rule 203   designator_list -> designator_list designator
Rule 204   designator -> [ constant_expression ]
Rule 205   designator -> . IDENTIFIER
Rule 206   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 207   function_definition -> declaration_specifiers declarator compound_statement
Rule 208   declaration_list -> declaration
Rule 209   declaration_list -> declaration_list declaration
Rule 210   compound_statement -> { }
Rule 211   compound_statement -> { block_item_list }
Rule 212   block_item_list -> block_item
Rule 213   block_item_list -> block_item_list block_item
Rule 214   block_item -> declaration
Rule 215   block_item -> statement
Rule 216   statement -> labeled_statement
Rule 217   statement -> compound_statement
Rule 218   statement -> expression_statement
Rule 219   statement -> selection_statement
Rule 220   statement -> iteration_statement
Rule 221   statement -> jump_statement
Rule 222   labeled_statement -> IDENTIFIER : statement
Rule 223   labeled_statement -> CASE constant_expression : statement
Rule 224   labeled_statement -> DEFAULT : statement
Rule 225   expression_statement -> ;
Rule 226   expression_statement -> expression ;
Rule 227   selection_statement -> IF ( expression ) statement
Rule 228   selection_statement -> IF ( expression ) statement ELSE statement
Rule 229   selection_statement -> SWITCH ( expression ) statement
Rule 230   iteration_statement -> WHILE ( expression ) statement
Rule 231   iteration_statement -> DO statement WHILE ( expression ) ;
Rule 232   iteration_statement -> FOR ( expression_statement expression_statement ) statement
Rule 233   iteration_statement -> FOR ( expression_statement expression_statement expression ) statement
Rule 234   iteration_statement -> FOR ( declaration expression_statement ) statement
Rule 235   iteration_statement -> FOR ( declaration expression_statement expression ) statement
Rule 236   jump_statement -> GOTO IDENTIFIER ;
Rule 237   jump_statement -> CONTINUE ;
Rule 238   jump_statement -> BREAK ;
Rule 239   jump_statement -> RETURN ;
Rule 240   jump_statement -> RETURN expression ;

Terminals, with rules where they appear

!                    : 152
"                    : 8 8
%                    : 138
&                    : 120 147
(                    : 81 90 91 92 140 146 155 156 161 162 166 174 181 182 183 184 227 228 229 230 231 232 233 234 235
)                    : 81 90 91 92 140 146 155 156 161 162 166 174 181 182 183 184 227 228 229 230 231 232 233 234 235
*                    : 74 75 76 77 87 88 136 148 179 180
+                    : 133 149
,                    : 14 48 49 52 68 94 162 168 186 188 193 196 197 200
-                    : 134 150
.                    : 9 157 205
/                    : 137
:                    : 70 71 110 222 223 224
;                    : 11 12 62 225 226 231 236 237 238 239 240
<                    : 7 125
=                    : 16 54 97 201
>                    : 7 126
?                    : 110
ADD_ASSIGN           : 101
AND_ASSIGN           : 105
AND_OP               : 114
AUTO                 : 28
BOOL                 : 40
BREAK                : 238
CASE                 : 223
CHAR                 : 32
COMPLEX              : 
CONST                : 43
CONSTANT             : 164
CONTINUE             : 237
DEC_OP               : 143 160
DEFAULT              : 224
DIV_ASSIGN           : 99
DO                   : 231
DOUBLE               : 37
ELLIPSIS             : 186
ELSE                 : 228
ENUM                 : 46 47 48 49 50
EQ_OP                : 122
EXTERN               : 26
FLOAT                : 36
FOR                  : 232 233 234 235
GE_OP                : 128
GOTO                 : 236
IDENTIFIER           : 6 6 7 8 9 9 10 47 49 50 53 54 55 57 80 93 94 157 158 163 205 222 236
IF                   : 227 228
IMAGINARY            : 
INC_OP               : 142 159
INLINE               : 30
INT                  : 34
LEFT_ASSIGN          : 103
LEFT_OP              : 130
LE_OP                : 127
LONG                 : 35
MACRO                : 6 7 8
MOD_ASSIGN           : 100
MUL_ASSIGN           : 98
NE_OP                : 123
OR_ASSIGN            : 107
OR_OP                : 112
PTR_OP               : 158
REGISTER             : 29
RESTRICT             : 44
RETURN               : 239 240
RIGHT_ASSIGN         : 104
RIGHT_OP             : 131
SHORT                : 33
SIGNED               : 38
SIZEOF               : 145 146
STATIC               : 27 85 86
STRING_LITERAL       : 165
STRUCT               : 58
SUB_ASSIGN           : 102
SWITCH               : 229
TYPEDEF              : 25
UNION                : 59
UNSIGNED             : 39
VOID                 : 31
VOLATILE             : 45
WHILE                : 230 231
XOR_ASSIGN           : 106
[                    : 82 83 84 85 86 87 88 89 154 175 176 177 178 179 180 204
]                    : 82 83 84 85 86 87 88 89 154 175 176 177 178 179 180 204
^                    : 118
error                : 
{                    : 46 47 48 49 55 56 161 162 199 200 210 211
|                    : 116
}                    : 46 47 48 49 55 56 161 162 199 200 210 211
~                    : 151

Nonterminals, with rules where they appear

abstract_declarator  : 170 174 190
additive_expression  : 129 130 131 133 134
and_expression       : 117 118 120
argument_expression_list : 156 193
assignment_expression : 82 84 85 86 96 167 168 176 178 192 193 198
assignment_operator  : 96
block_item           : 212 213
block_item_list      : 211 213
cast_expression      : 135 136 137 138 140 144
compound_statement   : 206 207 217
conditional_expression : 95 108 110
constant_expression  : 6 54 70 71 204 223
declaration          : 4 208 209 214 234 235
declaration_list     : 206 209
declaration_specifiers : 11 12 18 20 22 24 189 190 191 206 207
declarator           : 15 16 69 71 81 189 206 207
designation          : 195 197
designator           : 202 203
designator_list      : 201 203
direct_abstract_declarator : 172 173 177 178 180 183 184
direct_declarator    : 72 73 82 83 84 85 86 87 88 89 90 91 92
enum_specifier       : 42
enumerator           : 51 52
enumerator_list      : 46 47 48 49 52
equality_expression  : 119 120 122 123
exclusive_or_expression : 115 116 118
expression           : 110 154 166 168 226 227 228 229 230 231 233 235 240
expression_statement : 218 232 232 233 233 234 235
external_declaration : 1 2
function_definition  : 3
function_specifier   : 23 24
headfile             : 7 8
identifier_list      : 91 94
inclusive_or_expression : 113 114 116
init_declarator      : 13 14
init_declarator_list : 12 14
initializer          : 16 194 195 196 197
initializer_list     : 161 162 196 197 199 200
iteration_statement  : 220
jump_statement       : 221
labeled_statement    : 216
logical_and_expression : 111 112 114
logical_or_expression : 109 110 112
macro                : 5
multiplicative_expression : 132 133 134 136 137 138
parameter_declaration : 187 188
parameter_list       : 185 186 188
parameter_type_list  : 90 182 184
pointer              : 72 76 77 171 173
postfix_expression   : 141 154 155 156 157 158 159 160
primary_expression   : 153
relational_expression : 121 122 123 125 126 127 128
selection_statement  : 219
shift_expression     : 124 125 126 127 128 130 131
specifier_qualifier_list : 62 63 65 169 170
statement            : 215 222 223 224 227 228 228 229 230 231 232 233 234 235
storage_class_specifier : 17 18
struct_declaration   : 60 61
struct_declaration_list : 55 56 61
struct_declarator    : 67 68
struct_declarator_list : 62 68
struct_or_union      : 55 56 57
struct_or_union_specifier : 41
translation_unit     : 2 0
type_name            : 140 146 161 162
type_qualifier       : 21 22 65 66 78 79
type_qualifier_list  : 75 77 79 82 83 85 86 87
type_specifier       : 19 20 63 64
unary_expression     : 96 139 142 143 145
unary_operator       : 144

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) external_declaration -> . macro
    (206) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (207) function_definition -> . declaration_specifiers declarator compound_statement
    (11) declaration -> . declaration_specifiers ;
    (12) declaration -> . declaration_specifiers init_declarator_list ;
    (6) macro -> . MACRO IDENTIFIER IDENTIFIER constant_expression
    (7) macro -> . MACRO IDENTIFIER < headfile >
    (8) macro -> . MACRO IDENTIFIER " headfile "
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    MACRO           shift and go to state 7
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    macro                          shift and go to state 5
    declaration_specifiers         shift and go to state 6
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 1

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) external_declaration -> . macro
    (206) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (207) function_definition -> . declaration_specifiers declarator compound_statement
    (11) declaration -> . declaration_specifiers ;
    (12) declaration -> . declaration_specifiers init_declarator_list ;
    (6) macro -> . MACRO IDENTIFIER IDENTIFIER constant_expression
    (7) macro -> . MACRO IDENTIFIER < headfile >
    (8) macro -> . MACRO IDENTIFIER " headfile "
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    MACRO           shift and go to state 7
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    external_declaration           shift and go to state 37
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    macro                          shift and go to state 5
    declaration_specifiers         shift and go to state 6
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 2

    (1) translation_unit -> external_declaration .

    MACRO           reduce using rule 1 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 1 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 1 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 1 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 1 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    LONG            reduce using rule 1 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 1 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 1 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 1 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 1 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 1 (translation_unit -> external_declaration .)
    CONST           reduce using rule 1 (translation_unit -> external_declaration .)
    RESTRICT        reduce using rule 1 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 1 (translation_unit -> external_declaration .)
    INLINE          reduce using rule 1 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 1 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 1 (translation_unit -> external_declaration .)
    UNION           reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 3

    (3) external_declaration -> function_definition .

    MACRO           reduce using rule 3 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 3 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 3 (external_declaration -> function_definition .)
    STATIC          reduce using rule 3 (external_declaration -> function_definition .)
    AUTO            reduce using rule 3 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 3 (external_declaration -> function_definition .)
    VOID            reduce using rule 3 (external_declaration -> function_definition .)
    CHAR            reduce using rule 3 (external_declaration -> function_definition .)
    SHORT           reduce using rule 3 (external_declaration -> function_definition .)
    INT             reduce using rule 3 (external_declaration -> function_definition .)
    LONG            reduce using rule 3 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 3 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 3 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 3 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 3 (external_declaration -> function_definition .)
    BOOL            reduce using rule 3 (external_declaration -> function_definition .)
    CONST           reduce using rule 3 (external_declaration -> function_definition .)
    RESTRICT        reduce using rule 3 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 3 (external_declaration -> function_definition .)
    INLINE          reduce using rule 3 (external_declaration -> function_definition .)
    ENUM            reduce using rule 3 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 3 (external_declaration -> function_definition .)
    UNION           reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)


state 4

    (4) external_declaration -> declaration .

    MACRO           reduce using rule 4 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 4 (external_declaration -> declaration .)
    EXTERN          reduce using rule 4 (external_declaration -> declaration .)
    STATIC          reduce using rule 4 (external_declaration -> declaration .)
    AUTO            reduce using rule 4 (external_declaration -> declaration .)
    REGISTER        reduce using rule 4 (external_declaration -> declaration .)
    VOID            reduce using rule 4 (external_declaration -> declaration .)
    CHAR            reduce using rule 4 (external_declaration -> declaration .)
    SHORT           reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    LONG            reduce using rule 4 (external_declaration -> declaration .)
    FLOAT           reduce using rule 4 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 4 (external_declaration -> declaration .)
    SIGNED          reduce using rule 4 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 4 (external_declaration -> declaration .)
    BOOL            reduce using rule 4 (external_declaration -> declaration .)
    CONST           reduce using rule 4 (external_declaration -> declaration .)
    RESTRICT        reduce using rule 4 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 4 (external_declaration -> declaration .)
    INLINE          reduce using rule 4 (external_declaration -> declaration .)
    ENUM            reduce using rule 4 (external_declaration -> declaration .)
    STRUCT          reduce using rule 4 (external_declaration -> declaration .)
    UNION           reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 5

    (5) external_declaration -> macro .

    MACRO           reduce using rule 5 (external_declaration -> macro .)
    TYPEDEF         reduce using rule 5 (external_declaration -> macro .)
    EXTERN          reduce using rule 5 (external_declaration -> macro .)
    STATIC          reduce using rule 5 (external_declaration -> macro .)
    AUTO            reduce using rule 5 (external_declaration -> macro .)
    REGISTER        reduce using rule 5 (external_declaration -> macro .)
    VOID            reduce using rule 5 (external_declaration -> macro .)
    CHAR            reduce using rule 5 (external_declaration -> macro .)
    SHORT           reduce using rule 5 (external_declaration -> macro .)
    INT             reduce using rule 5 (external_declaration -> macro .)
    LONG            reduce using rule 5 (external_declaration -> macro .)
    FLOAT           reduce using rule 5 (external_declaration -> macro .)
    DOUBLE          reduce using rule 5 (external_declaration -> macro .)
    SIGNED          reduce using rule 5 (external_declaration -> macro .)
    UNSIGNED        reduce using rule 5 (external_declaration -> macro .)
    BOOL            reduce using rule 5 (external_declaration -> macro .)
    CONST           reduce using rule 5 (external_declaration -> macro .)
    RESTRICT        reduce using rule 5 (external_declaration -> macro .)
    VOLATILE        reduce using rule 5 (external_declaration -> macro .)
    INLINE          reduce using rule 5 (external_declaration -> macro .)
    ENUM            reduce using rule 5 (external_declaration -> macro .)
    STRUCT          reduce using rule 5 (external_declaration -> macro .)
    UNION           reduce using rule 5 (external_declaration -> macro .)
    $end            reduce using rule 5 (external_declaration -> macro .)


state 6

    (206) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (207) function_definition -> declaration_specifiers . declarator compound_statement
    (11) declaration -> declaration_specifiers . ;
    (12) declaration -> declaration_specifiers . init_declarator_list ;
    (72) declarator -> . pointer direct_declarator
    (73) declarator -> . direct_declarator
    (13) init_declarator_list -> . init_declarator
    (14) init_declarator_list -> . init_declarator_list , init_declarator
    (74) pointer -> . *
    (75) pointer -> . * type_qualifier_list
    (76) pointer -> . * pointer
    (77) pointer -> . * type_qualifier_list pointer
    (80) direct_declarator -> . IDENTIFIER
    (81) direct_declarator -> . ( declarator )
    (82) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (83) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (84) direct_declarator -> . direct_declarator [ assignment_expression ]
    (85) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (86) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (87) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (88) direct_declarator -> . direct_declarator [ * ]
    (89) direct_declarator -> . direct_declarator [ ]
    (90) direct_declarator -> . direct_declarator ( parameter_type_list )
    (91) direct_declarator -> . direct_declarator ( identifier_list )
    (92) direct_declarator -> . direct_declarator ( )
    (15) init_declarator -> . declarator
    (16) init_declarator -> . declarator = initializer

    ;               shift and go to state 39
    *               shift and go to state 44
    IDENTIFIER      shift and go to state 45
    (               shift and go to state 46

    declarator                     shift and go to state 38
    init_declarator_list           shift and go to state 40
    pointer                        shift and go to state 41
    direct_declarator              shift and go to state 42
    init_declarator                shift and go to state 43

state 7

    (6) macro -> MACRO . IDENTIFIER IDENTIFIER constant_expression
    (7) macro -> MACRO . IDENTIFIER < headfile >
    (8) macro -> MACRO . IDENTIFIER " headfile "

    IDENTIFIER      shift and go to state 47


state 8

    (17) declaration_specifiers -> storage_class_specifier .
    (18) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    ;               reduce using rule 17 (declaration_specifiers -> storage_class_specifier .)
    *               reduce using rule 17 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 17 (declaration_specifiers -> storage_class_specifier .)
    (               reduce using rule 17 (declaration_specifiers -> storage_class_specifier .)
    [               reduce using rule 17 (declaration_specifiers -> storage_class_specifier .)
    ,               reduce using rule 17 (declaration_specifiers -> storage_class_specifier .)
    )               reduce using rule 17 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    storage_class_specifier        shift and go to state 8
    declaration_specifiers         shift and go to state 48
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 9

    (19) declaration_specifiers -> type_specifier .
    (20) declaration_specifiers -> type_specifier . declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    ;               reduce using rule 19 (declaration_specifiers -> type_specifier .)
    *               reduce using rule 19 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 19 (declaration_specifiers -> type_specifier .)
    (               reduce using rule 19 (declaration_specifiers -> type_specifier .)
    [               reduce using rule 19 (declaration_specifiers -> type_specifier .)
    ,               reduce using rule 19 (declaration_specifiers -> type_specifier .)
    )               reduce using rule 19 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    type_specifier                 shift and go to state 9
    declaration_specifiers         shift and go to state 49
    storage_class_specifier        shift and go to state 8
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 10

    (21) declaration_specifiers -> type_qualifier .
    (22) declaration_specifiers -> type_qualifier . declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    ;               reduce using rule 21 (declaration_specifiers -> type_qualifier .)
    *               reduce using rule 21 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 21 (declaration_specifiers -> type_qualifier .)
    (               reduce using rule 21 (declaration_specifiers -> type_qualifier .)
    [               reduce using rule 21 (declaration_specifiers -> type_qualifier .)
    ,               reduce using rule 21 (declaration_specifiers -> type_qualifier .)
    )               reduce using rule 21 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    type_qualifier                 shift and go to state 10
    declaration_specifiers         shift and go to state 50
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    function_specifier             shift and go to state 11
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 11

    (23) declaration_specifiers -> function_specifier .
    (24) declaration_specifiers -> function_specifier . declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    ;               reduce using rule 23 (declaration_specifiers -> function_specifier .)
    *               reduce using rule 23 (declaration_specifiers -> function_specifier .)
    IDENTIFIER      reduce using rule 23 (declaration_specifiers -> function_specifier .)
    (               reduce using rule 23 (declaration_specifiers -> function_specifier .)
    [               reduce using rule 23 (declaration_specifiers -> function_specifier .)
    ,               reduce using rule 23 (declaration_specifiers -> function_specifier .)
    )               reduce using rule 23 (declaration_specifiers -> function_specifier .)
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    function_specifier             shift and go to state 11
    declaration_specifiers         shift and go to state 51
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 12

    (25) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    BOOL            reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    INLINE          reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    ;               reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    *               reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    (               reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    [               reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    ,               reduce using rule 25 (storage_class_specifier -> TYPEDEF .)
    )               reduce using rule 25 (storage_class_specifier -> TYPEDEF .)


state 13

    (26) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 26 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 26 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 26 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 26 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 26 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 26 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 26 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 26 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 26 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 26 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 26 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 26 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 26 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 26 (storage_class_specifier -> EXTERN .)
    BOOL            reduce using rule 26 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 26 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 26 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 26 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 26 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 26 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 26 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 26 (storage_class_specifier -> EXTERN .)
    ;               reduce using rule 26 (storage_class_specifier -> EXTERN .)
    *               reduce using rule 26 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 26 (storage_class_specifier -> EXTERN .)
    (               reduce using rule 26 (storage_class_specifier -> EXTERN .)
    [               reduce using rule 26 (storage_class_specifier -> EXTERN .)
    ,               reduce using rule 26 (storage_class_specifier -> EXTERN .)
    )               reduce using rule 26 (storage_class_specifier -> EXTERN .)


state 14

    (27) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 27 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 27 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 27 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 27 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 27 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 27 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 27 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 27 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 27 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 27 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 27 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 27 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 27 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 27 (storage_class_specifier -> STATIC .)
    BOOL            reduce using rule 27 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 27 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 27 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 27 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 27 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 27 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 27 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 27 (storage_class_specifier -> STATIC .)
    ;               reduce using rule 27 (storage_class_specifier -> STATIC .)
    *               reduce using rule 27 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 27 (storage_class_specifier -> STATIC .)
    (               reduce using rule 27 (storage_class_specifier -> STATIC .)
    [               reduce using rule 27 (storage_class_specifier -> STATIC .)
    ,               reduce using rule 27 (storage_class_specifier -> STATIC .)
    )               reduce using rule 27 (storage_class_specifier -> STATIC .)


state 15

    (28) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 28 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 28 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 28 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 28 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 28 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 28 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 28 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 28 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 28 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 28 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 28 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 28 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 28 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 28 (storage_class_specifier -> AUTO .)
    BOOL            reduce using rule 28 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 28 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 28 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 28 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 28 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 28 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 28 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 28 (storage_class_specifier -> AUTO .)
    ;               reduce using rule 28 (storage_class_specifier -> AUTO .)
    *               reduce using rule 28 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 28 (storage_class_specifier -> AUTO .)
    (               reduce using rule 28 (storage_class_specifier -> AUTO .)
    [               reduce using rule 28 (storage_class_specifier -> AUTO .)
    ,               reduce using rule 28 (storage_class_specifier -> AUTO .)
    )               reduce using rule 28 (storage_class_specifier -> AUTO .)


state 16

    (29) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 29 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 29 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 29 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 29 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 29 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 29 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 29 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 29 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 29 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 29 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 29 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 29 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 29 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 29 (storage_class_specifier -> REGISTER .)
    BOOL            reduce using rule 29 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 29 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 29 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 29 (storage_class_specifier -> REGISTER .)
    INLINE          reduce using rule 29 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 29 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 29 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 29 (storage_class_specifier -> REGISTER .)
    ;               reduce using rule 29 (storage_class_specifier -> REGISTER .)
    *               reduce using rule 29 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 29 (storage_class_specifier -> REGISTER .)
    (               reduce using rule 29 (storage_class_specifier -> REGISTER .)
    [               reduce using rule 29 (storage_class_specifier -> REGISTER .)
    ,               reduce using rule 29 (storage_class_specifier -> REGISTER .)
    )               reduce using rule 29 (storage_class_specifier -> REGISTER .)


state 17

    (31) type_specifier -> VOID .

    TYPEDEF         reduce using rule 31 (type_specifier -> VOID .)
    EXTERN          reduce using rule 31 (type_specifier -> VOID .)
    STATIC          reduce using rule 31 (type_specifier -> VOID .)
    AUTO            reduce using rule 31 (type_specifier -> VOID .)
    REGISTER        reduce using rule 31 (type_specifier -> VOID .)
    VOID            reduce using rule 31 (type_specifier -> VOID .)
    CHAR            reduce using rule 31 (type_specifier -> VOID .)
    SHORT           reduce using rule 31 (type_specifier -> VOID .)
    INT             reduce using rule 31 (type_specifier -> VOID .)
    LONG            reduce using rule 31 (type_specifier -> VOID .)
    FLOAT           reduce using rule 31 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 31 (type_specifier -> VOID .)
    SIGNED          reduce using rule 31 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 31 (type_specifier -> VOID .)
    BOOL            reduce using rule 31 (type_specifier -> VOID .)
    CONST           reduce using rule 31 (type_specifier -> VOID .)
    RESTRICT        reduce using rule 31 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 31 (type_specifier -> VOID .)
    INLINE          reduce using rule 31 (type_specifier -> VOID .)
    ENUM            reduce using rule 31 (type_specifier -> VOID .)
    STRUCT          reduce using rule 31 (type_specifier -> VOID .)
    UNION           reduce using rule 31 (type_specifier -> VOID .)
    ;               reduce using rule 31 (type_specifier -> VOID .)
    *               reduce using rule 31 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 31 (type_specifier -> VOID .)
    (               reduce using rule 31 (type_specifier -> VOID .)
    [               reduce using rule 31 (type_specifier -> VOID .)
    ,               reduce using rule 31 (type_specifier -> VOID .)
    )               reduce using rule 31 (type_specifier -> VOID .)
    :               reduce using rule 31 (type_specifier -> VOID .)


state 18

    (32) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 32 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 32 (type_specifier -> CHAR .)
    STATIC          reduce using rule 32 (type_specifier -> CHAR .)
    AUTO            reduce using rule 32 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 32 (type_specifier -> CHAR .)
    VOID            reduce using rule 32 (type_specifier -> CHAR .)
    CHAR            reduce using rule 32 (type_specifier -> CHAR .)
    SHORT           reduce using rule 32 (type_specifier -> CHAR .)
    INT             reduce using rule 32 (type_specifier -> CHAR .)
    LONG            reduce using rule 32 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 32 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 32 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 32 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 32 (type_specifier -> CHAR .)
    BOOL            reduce using rule 32 (type_specifier -> CHAR .)
    CONST           reduce using rule 32 (type_specifier -> CHAR .)
    RESTRICT        reduce using rule 32 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 32 (type_specifier -> CHAR .)
    INLINE          reduce using rule 32 (type_specifier -> CHAR .)
    ENUM            reduce using rule 32 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 32 (type_specifier -> CHAR .)
    UNION           reduce using rule 32 (type_specifier -> CHAR .)
    ;               reduce using rule 32 (type_specifier -> CHAR .)
    *               reduce using rule 32 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 32 (type_specifier -> CHAR .)
    (               reduce using rule 32 (type_specifier -> CHAR .)
    [               reduce using rule 32 (type_specifier -> CHAR .)
    ,               reduce using rule 32 (type_specifier -> CHAR .)
    )               reduce using rule 32 (type_specifier -> CHAR .)
    :               reduce using rule 32 (type_specifier -> CHAR .)


state 19

    (33) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 33 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 33 (type_specifier -> SHORT .)
    STATIC          reduce using rule 33 (type_specifier -> SHORT .)
    AUTO            reduce using rule 33 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 33 (type_specifier -> SHORT .)
    VOID            reduce using rule 33 (type_specifier -> SHORT .)
    CHAR            reduce using rule 33 (type_specifier -> SHORT .)
    SHORT           reduce using rule 33 (type_specifier -> SHORT .)
    INT             reduce using rule 33 (type_specifier -> SHORT .)
    LONG            reduce using rule 33 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 33 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 33 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 33 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 33 (type_specifier -> SHORT .)
    BOOL            reduce using rule 33 (type_specifier -> SHORT .)
    CONST           reduce using rule 33 (type_specifier -> SHORT .)
    RESTRICT        reduce using rule 33 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 33 (type_specifier -> SHORT .)
    INLINE          reduce using rule 33 (type_specifier -> SHORT .)
    ENUM            reduce using rule 33 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 33 (type_specifier -> SHORT .)
    UNION           reduce using rule 33 (type_specifier -> SHORT .)
    ;               reduce using rule 33 (type_specifier -> SHORT .)
    *               reduce using rule 33 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 33 (type_specifier -> SHORT .)
    (               reduce using rule 33 (type_specifier -> SHORT .)
    [               reduce using rule 33 (type_specifier -> SHORT .)
    ,               reduce using rule 33 (type_specifier -> SHORT .)
    )               reduce using rule 33 (type_specifier -> SHORT .)
    :               reduce using rule 33 (type_specifier -> SHORT .)


state 20

    (34) type_specifier -> INT .

    TYPEDEF         reduce using rule 34 (type_specifier -> INT .)
    EXTERN          reduce using rule 34 (type_specifier -> INT .)
    STATIC          reduce using rule 34 (type_specifier -> INT .)
    AUTO            reduce using rule 34 (type_specifier -> INT .)
    REGISTER        reduce using rule 34 (type_specifier -> INT .)
    VOID            reduce using rule 34 (type_specifier -> INT .)
    CHAR            reduce using rule 34 (type_specifier -> INT .)
    SHORT           reduce using rule 34 (type_specifier -> INT .)
    INT             reduce using rule 34 (type_specifier -> INT .)
    LONG            reduce using rule 34 (type_specifier -> INT .)
    FLOAT           reduce using rule 34 (type_specifier -> INT .)
    DOUBLE          reduce using rule 34 (type_specifier -> INT .)
    SIGNED          reduce using rule 34 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 34 (type_specifier -> INT .)
    BOOL            reduce using rule 34 (type_specifier -> INT .)
    CONST           reduce using rule 34 (type_specifier -> INT .)
    RESTRICT        reduce using rule 34 (type_specifier -> INT .)
    VOLATILE        reduce using rule 34 (type_specifier -> INT .)
    INLINE          reduce using rule 34 (type_specifier -> INT .)
    ENUM            reduce using rule 34 (type_specifier -> INT .)
    STRUCT          reduce using rule 34 (type_specifier -> INT .)
    UNION           reduce using rule 34 (type_specifier -> INT .)
    ;               reduce using rule 34 (type_specifier -> INT .)
    *               reduce using rule 34 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 34 (type_specifier -> INT .)
    (               reduce using rule 34 (type_specifier -> INT .)
    [               reduce using rule 34 (type_specifier -> INT .)
    ,               reduce using rule 34 (type_specifier -> INT .)
    )               reduce using rule 34 (type_specifier -> INT .)
    :               reduce using rule 34 (type_specifier -> INT .)


state 21

    (35) type_specifier -> LONG .

    TYPEDEF         reduce using rule 35 (type_specifier -> LONG .)
    EXTERN          reduce using rule 35 (type_specifier -> LONG .)
    STATIC          reduce using rule 35 (type_specifier -> LONG .)
    AUTO            reduce using rule 35 (type_specifier -> LONG .)
    REGISTER        reduce using rule 35 (type_specifier -> LONG .)
    VOID            reduce using rule 35 (type_specifier -> LONG .)
    CHAR            reduce using rule 35 (type_specifier -> LONG .)
    SHORT           reduce using rule 35 (type_specifier -> LONG .)
    INT             reduce using rule 35 (type_specifier -> LONG .)
    LONG            reduce using rule 35 (type_specifier -> LONG .)
    FLOAT           reduce using rule 35 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 35 (type_specifier -> LONG .)
    SIGNED          reduce using rule 35 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 35 (type_specifier -> LONG .)
    BOOL            reduce using rule 35 (type_specifier -> LONG .)
    CONST           reduce using rule 35 (type_specifier -> LONG .)
    RESTRICT        reduce using rule 35 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 35 (type_specifier -> LONG .)
    INLINE          reduce using rule 35 (type_specifier -> LONG .)
    ENUM            reduce using rule 35 (type_specifier -> LONG .)
    STRUCT          reduce using rule 35 (type_specifier -> LONG .)
    UNION           reduce using rule 35 (type_specifier -> LONG .)
    ;               reduce using rule 35 (type_specifier -> LONG .)
    *               reduce using rule 35 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 35 (type_specifier -> LONG .)
    (               reduce using rule 35 (type_specifier -> LONG .)
    [               reduce using rule 35 (type_specifier -> LONG .)
    ,               reduce using rule 35 (type_specifier -> LONG .)
    )               reduce using rule 35 (type_specifier -> LONG .)
    :               reduce using rule 35 (type_specifier -> LONG .)


state 22

    (36) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 36 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 36 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 36 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 36 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 36 (type_specifier -> FLOAT .)
    VOID            reduce using rule 36 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 36 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 36 (type_specifier -> FLOAT .)
    INT             reduce using rule 36 (type_specifier -> FLOAT .)
    LONG            reduce using rule 36 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 36 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 36 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 36 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 36 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 36 (type_specifier -> FLOAT .)
    CONST           reduce using rule 36 (type_specifier -> FLOAT .)
    RESTRICT        reduce using rule 36 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 36 (type_specifier -> FLOAT .)
    INLINE          reduce using rule 36 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 36 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 36 (type_specifier -> FLOAT .)
    UNION           reduce using rule 36 (type_specifier -> FLOAT .)
    ;               reduce using rule 36 (type_specifier -> FLOAT .)
    *               reduce using rule 36 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 36 (type_specifier -> FLOAT .)
    (               reduce using rule 36 (type_specifier -> FLOAT .)
    [               reduce using rule 36 (type_specifier -> FLOAT .)
    ,               reduce using rule 36 (type_specifier -> FLOAT .)
    )               reduce using rule 36 (type_specifier -> FLOAT .)
    :               reduce using rule 36 (type_specifier -> FLOAT .)


state 23

    (37) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 37 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 37 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 37 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 37 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 37 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 37 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 37 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 37 (type_specifier -> DOUBLE .)
    INT             reduce using rule 37 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 37 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 37 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 37 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 37 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 37 (type_specifier -> DOUBLE .)
    BOOL            reduce using rule 37 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 37 (type_specifier -> DOUBLE .)
    RESTRICT        reduce using rule 37 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 37 (type_specifier -> DOUBLE .)
    INLINE          reduce using rule 37 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 37 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 37 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 37 (type_specifier -> DOUBLE .)
    ;               reduce using rule 37 (type_specifier -> DOUBLE .)
    *               reduce using rule 37 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 37 (type_specifier -> DOUBLE .)
    (               reduce using rule 37 (type_specifier -> DOUBLE .)
    [               reduce using rule 37 (type_specifier -> DOUBLE .)
    ,               reduce using rule 37 (type_specifier -> DOUBLE .)
    )               reduce using rule 37 (type_specifier -> DOUBLE .)
    :               reduce using rule 37 (type_specifier -> DOUBLE .)


state 24

    (38) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 38 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 38 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 38 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 38 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 38 (type_specifier -> SIGNED .)
    VOID            reduce using rule 38 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 38 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 38 (type_specifier -> SIGNED .)
    INT             reduce using rule 38 (type_specifier -> SIGNED .)
    LONG            reduce using rule 38 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 38 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 38 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 38 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 38 (type_specifier -> SIGNED .)
    BOOL            reduce using rule 38 (type_specifier -> SIGNED .)
    CONST           reduce using rule 38 (type_specifier -> SIGNED .)
    RESTRICT        reduce using rule 38 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 38 (type_specifier -> SIGNED .)
    INLINE          reduce using rule 38 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 38 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 38 (type_specifier -> SIGNED .)
    UNION           reduce using rule 38 (type_specifier -> SIGNED .)
    ;               reduce using rule 38 (type_specifier -> SIGNED .)
    *               reduce using rule 38 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 38 (type_specifier -> SIGNED .)
    (               reduce using rule 38 (type_specifier -> SIGNED .)
    [               reduce using rule 38 (type_specifier -> SIGNED .)
    ,               reduce using rule 38 (type_specifier -> SIGNED .)
    )               reduce using rule 38 (type_specifier -> SIGNED .)
    :               reduce using rule 38 (type_specifier -> SIGNED .)


state 25

    (39) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 39 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 39 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 39 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 39 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 39 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 39 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 39 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 39 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 39 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 39 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 39 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 39 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 39 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 39 (type_specifier -> UNSIGNED .)
    BOOL            reduce using rule 39 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 39 (type_specifier -> UNSIGNED .)
    RESTRICT        reduce using rule 39 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 39 (type_specifier -> UNSIGNED .)
    INLINE          reduce using rule 39 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 39 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 39 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 39 (type_specifier -> UNSIGNED .)
    ;               reduce using rule 39 (type_specifier -> UNSIGNED .)
    *               reduce using rule 39 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 39 (type_specifier -> UNSIGNED .)
    (               reduce using rule 39 (type_specifier -> UNSIGNED .)
    [               reduce using rule 39 (type_specifier -> UNSIGNED .)
    ,               reduce using rule 39 (type_specifier -> UNSIGNED .)
    )               reduce using rule 39 (type_specifier -> UNSIGNED .)
    :               reduce using rule 39 (type_specifier -> UNSIGNED .)


state 26

    (40) type_specifier -> BOOL .

    TYPEDEF         reduce using rule 40 (type_specifier -> BOOL .)
    EXTERN          reduce using rule 40 (type_specifier -> BOOL .)
    STATIC          reduce using rule 40 (type_specifier -> BOOL .)
    AUTO            reduce using rule 40 (type_specifier -> BOOL .)
    REGISTER        reduce using rule 40 (type_specifier -> BOOL .)
    VOID            reduce using rule 40 (type_specifier -> BOOL .)
    CHAR            reduce using rule 40 (type_specifier -> BOOL .)
    SHORT           reduce using rule 40 (type_specifier -> BOOL .)
    INT             reduce using rule 40 (type_specifier -> BOOL .)
    LONG            reduce using rule 40 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 40 (type_specifier -> BOOL .)
    DOUBLE          reduce using rule 40 (type_specifier -> BOOL .)
    SIGNED          reduce using rule 40 (type_specifier -> BOOL .)
    UNSIGNED        reduce using rule 40 (type_specifier -> BOOL .)
    BOOL            reduce using rule 40 (type_specifier -> BOOL .)
    CONST           reduce using rule 40 (type_specifier -> BOOL .)
    RESTRICT        reduce using rule 40 (type_specifier -> BOOL .)
    VOLATILE        reduce using rule 40 (type_specifier -> BOOL .)
    INLINE          reduce using rule 40 (type_specifier -> BOOL .)
    ENUM            reduce using rule 40 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 40 (type_specifier -> BOOL .)
    UNION           reduce using rule 40 (type_specifier -> BOOL .)
    ;               reduce using rule 40 (type_specifier -> BOOL .)
    *               reduce using rule 40 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 40 (type_specifier -> BOOL .)
    (               reduce using rule 40 (type_specifier -> BOOL .)
    [               reduce using rule 40 (type_specifier -> BOOL .)
    ,               reduce using rule 40 (type_specifier -> BOOL .)
    )               reduce using rule 40 (type_specifier -> BOOL .)
    :               reduce using rule 40 (type_specifier -> BOOL .)


state 27

    (41) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    BOOL            reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    INLINE          reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    ;               reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    *               reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    (               reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    [               reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    ,               reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    )               reduce using rule 41 (type_specifier -> struct_or_union_specifier .)
    :               reduce using rule 41 (type_specifier -> struct_or_union_specifier .)


state 28

    (42) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 42 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 42 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 42 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 42 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 42 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 42 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 42 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 42 (type_specifier -> enum_specifier .)
    INT             reduce using rule 42 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 42 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 42 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 42 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 42 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 42 (type_specifier -> enum_specifier .)
    BOOL            reduce using rule 42 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 42 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 42 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 42 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 42 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 42 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 42 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 42 (type_specifier -> enum_specifier .)
    ;               reduce using rule 42 (type_specifier -> enum_specifier .)
    *               reduce using rule 42 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 42 (type_specifier -> enum_specifier .)
    (               reduce using rule 42 (type_specifier -> enum_specifier .)
    [               reduce using rule 42 (type_specifier -> enum_specifier .)
    ,               reduce using rule 42 (type_specifier -> enum_specifier .)
    )               reduce using rule 42 (type_specifier -> enum_specifier .)
    :               reduce using rule 42 (type_specifier -> enum_specifier .)


state 29

    (43) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 43 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 43 (type_qualifier -> CONST .)
    STATIC          reduce using rule 43 (type_qualifier -> CONST .)
    AUTO            reduce using rule 43 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 43 (type_qualifier -> CONST .)
    VOID            reduce using rule 43 (type_qualifier -> CONST .)
    CHAR            reduce using rule 43 (type_qualifier -> CONST .)
    SHORT           reduce using rule 43 (type_qualifier -> CONST .)
    INT             reduce using rule 43 (type_qualifier -> CONST .)
    LONG            reduce using rule 43 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 43 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 43 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 43 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 43 (type_qualifier -> CONST .)
    BOOL            reduce using rule 43 (type_qualifier -> CONST .)
    CONST           reduce using rule 43 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 43 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 43 (type_qualifier -> CONST .)
    INLINE          reduce using rule 43 (type_qualifier -> CONST .)
    ENUM            reduce using rule 43 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 43 (type_qualifier -> CONST .)
    UNION           reduce using rule 43 (type_qualifier -> CONST .)
    ;               reduce using rule 43 (type_qualifier -> CONST .)
    *               reduce using rule 43 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 43 (type_qualifier -> CONST .)
    (               reduce using rule 43 (type_qualifier -> CONST .)
    [               reduce using rule 43 (type_qualifier -> CONST .)
    ,               reduce using rule 43 (type_qualifier -> CONST .)
    )               reduce using rule 43 (type_qualifier -> CONST .)
    :               reduce using rule 43 (type_qualifier -> CONST .)
    ]               reduce using rule 43 (type_qualifier -> CONST .)
    INC_OP          reduce using rule 43 (type_qualifier -> CONST .)
    DEC_OP          reduce using rule 43 (type_qualifier -> CONST .)
    SIZEOF          reduce using rule 43 (type_qualifier -> CONST .)
    &               reduce using rule 43 (type_qualifier -> CONST .)
    +               reduce using rule 43 (type_qualifier -> CONST .)
    -               reduce using rule 43 (type_qualifier -> CONST .)
    ~               reduce using rule 43 (type_qualifier -> CONST .)
    !               reduce using rule 43 (type_qualifier -> CONST .)
    CONSTANT        reduce using rule 43 (type_qualifier -> CONST .)
    STRING_LITERAL  reduce using rule 43 (type_qualifier -> CONST .)


state 30

    (44) type_qualifier -> RESTRICT .

    TYPEDEF         reduce using rule 44 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 44 (type_qualifier -> RESTRICT .)
    STATIC          reduce using rule 44 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 44 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 44 (type_qualifier -> RESTRICT .)
    VOID            reduce using rule 44 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 44 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 44 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 44 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 44 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 44 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 44 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 44 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 44 (type_qualifier -> RESTRICT .)
    BOOL            reduce using rule 44 (type_qualifier -> RESTRICT .)
    CONST           reduce using rule 44 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 44 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 44 (type_qualifier -> RESTRICT .)
    INLINE          reduce using rule 44 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 44 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 44 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 44 (type_qualifier -> RESTRICT .)
    ;               reduce using rule 44 (type_qualifier -> RESTRICT .)
    *               reduce using rule 44 (type_qualifier -> RESTRICT .)
    IDENTIFIER      reduce using rule 44 (type_qualifier -> RESTRICT .)
    (               reduce using rule 44 (type_qualifier -> RESTRICT .)
    [               reduce using rule 44 (type_qualifier -> RESTRICT .)
    ,               reduce using rule 44 (type_qualifier -> RESTRICT .)
    )               reduce using rule 44 (type_qualifier -> RESTRICT .)
    :               reduce using rule 44 (type_qualifier -> RESTRICT .)
    ]               reduce using rule 44 (type_qualifier -> RESTRICT .)
    INC_OP          reduce using rule 44 (type_qualifier -> RESTRICT .)
    DEC_OP          reduce using rule 44 (type_qualifier -> RESTRICT .)
    SIZEOF          reduce using rule 44 (type_qualifier -> RESTRICT .)
    &               reduce using rule 44 (type_qualifier -> RESTRICT .)
    +               reduce using rule 44 (type_qualifier -> RESTRICT .)
    -               reduce using rule 44 (type_qualifier -> RESTRICT .)
    ~               reduce using rule 44 (type_qualifier -> RESTRICT .)
    !               reduce using rule 44 (type_qualifier -> RESTRICT .)
    CONSTANT        reduce using rule 44 (type_qualifier -> RESTRICT .)
    STRING_LITERAL  reduce using rule 44 (type_qualifier -> RESTRICT .)


state 31

    (45) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 45 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 45 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 45 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 45 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 45 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 45 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 45 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 45 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 45 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 45 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 45 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 45 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 45 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 45 (type_qualifier -> VOLATILE .)
    BOOL            reduce using rule 45 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 45 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 45 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 45 (type_qualifier -> VOLATILE .)
    INLINE          reduce using rule 45 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 45 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 45 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 45 (type_qualifier -> VOLATILE .)
    ;               reduce using rule 45 (type_qualifier -> VOLATILE .)
    *               reduce using rule 45 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 45 (type_qualifier -> VOLATILE .)
    (               reduce using rule 45 (type_qualifier -> VOLATILE .)
    [               reduce using rule 45 (type_qualifier -> VOLATILE .)
    ,               reduce using rule 45 (type_qualifier -> VOLATILE .)
    )               reduce using rule 45 (type_qualifier -> VOLATILE .)
    :               reduce using rule 45 (type_qualifier -> VOLATILE .)
    ]               reduce using rule 45 (type_qualifier -> VOLATILE .)
    INC_OP          reduce using rule 45 (type_qualifier -> VOLATILE .)
    DEC_OP          reduce using rule 45 (type_qualifier -> VOLATILE .)
    SIZEOF          reduce using rule 45 (type_qualifier -> VOLATILE .)
    &               reduce using rule 45 (type_qualifier -> VOLATILE .)
    +               reduce using rule 45 (type_qualifier -> VOLATILE .)
    -               reduce using rule 45 (type_qualifier -> VOLATILE .)
    ~               reduce using rule 45 (type_qualifier -> VOLATILE .)
    !               reduce using rule 45 (type_qualifier -> VOLATILE .)
    CONSTANT        reduce using rule 45 (type_qualifier -> VOLATILE .)
    STRING_LITERAL  reduce using rule 45 (type_qualifier -> VOLATILE .)


state 32

    (30) function_specifier -> INLINE .

    TYPEDEF         reduce using rule 30 (function_specifier -> INLINE .)
    EXTERN          reduce using rule 30 (function_specifier -> INLINE .)
    STATIC          reduce using rule 30 (function_specifier -> INLINE .)
    AUTO            reduce using rule 30 (function_specifier -> INLINE .)
    REGISTER        reduce using rule 30 (function_specifier -> INLINE .)
    VOID            reduce using rule 30 (function_specifier -> INLINE .)
    CHAR            reduce using rule 30 (function_specifier -> INLINE .)
    SHORT           reduce using rule 30 (function_specifier -> INLINE .)
    INT             reduce using rule 30 (function_specifier -> INLINE .)
    LONG            reduce using rule 30 (function_specifier -> INLINE .)
    FLOAT           reduce using rule 30 (function_specifier -> INLINE .)
    DOUBLE          reduce using rule 30 (function_specifier -> INLINE .)
    SIGNED          reduce using rule 30 (function_specifier -> INLINE .)
    UNSIGNED        reduce using rule 30 (function_specifier -> INLINE .)
    BOOL            reduce using rule 30 (function_specifier -> INLINE .)
    CONST           reduce using rule 30 (function_specifier -> INLINE .)
    RESTRICT        reduce using rule 30 (function_specifier -> INLINE .)
    VOLATILE        reduce using rule 30 (function_specifier -> INLINE .)
    INLINE          reduce using rule 30 (function_specifier -> INLINE .)
    ENUM            reduce using rule 30 (function_specifier -> INLINE .)
    STRUCT          reduce using rule 30 (function_specifier -> INLINE .)
    UNION           reduce using rule 30 (function_specifier -> INLINE .)
    ;               reduce using rule 30 (function_specifier -> INLINE .)
    *               reduce using rule 30 (function_specifier -> INLINE .)
    IDENTIFIER      reduce using rule 30 (function_specifier -> INLINE .)
    (               reduce using rule 30 (function_specifier -> INLINE .)
    [               reduce using rule 30 (function_specifier -> INLINE .)
    ,               reduce using rule 30 (function_specifier -> INLINE .)
    )               reduce using rule 30 (function_specifier -> INLINE .)


state 33

    (55) struct_or_union_specifier -> struct_or_union . IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> struct_or_union . { struct_declaration_list }
    (57) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    IDENTIFIER      shift and go to state 52
    {               shift and go to state 53


state 34

    (46) enum_specifier -> ENUM . { enumerator_list }
    (47) enum_specifier -> ENUM . IDENTIFIER { enumerator_list }
    (48) enum_specifier -> ENUM . { enumerator_list , }
    (49) enum_specifier -> ENUM . IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> ENUM . IDENTIFIER

    {               shift and go to state 54
    IDENTIFIER      shift and go to state 55


state 35

    (58) struct_or_union -> STRUCT .

    IDENTIFIER      reduce using rule 58 (struct_or_union -> STRUCT .)
    {               reduce using rule 58 (struct_or_union -> STRUCT .)


state 36

    (59) struct_or_union -> UNION .

    IDENTIFIER      reduce using rule 59 (struct_or_union -> UNION .)
    {               reduce using rule 59 (struct_or_union -> UNION .)


state 37

    (2) translation_unit -> translation_unit external_declaration .

    MACRO           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    RESTRICT        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INLINE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 38

    (206) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (207) function_definition -> declaration_specifiers declarator . compound_statement
    (15) init_declarator -> declarator .
    (16) init_declarator -> declarator . = initializer
    (208) declaration_list -> . declaration
    (209) declaration_list -> . declaration_list declaration
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (11) declaration -> . declaration_specifiers ;
    (12) declaration -> . declaration_specifiers init_declarator_list ;
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    ;               reduce using rule 15 (init_declarator -> declarator .)
    ,               reduce using rule 15 (init_declarator -> declarator .)
    =               shift and go to state 59
    {               shift and go to state 61
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    declaration_specifiers         shift and go to state 56
    declaration_list               shift and go to state 57
    compound_statement             shift and go to state 58
    declaration                    shift and go to state 60
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 39

    (11) declaration -> declaration_specifiers ; .

    MACRO           reduce using rule 11 (declaration -> declaration_specifiers ; .)
    TYPEDEF         reduce using rule 11 (declaration -> declaration_specifiers ; .)
    EXTERN          reduce using rule 11 (declaration -> declaration_specifiers ; .)
    STATIC          reduce using rule 11 (declaration -> declaration_specifiers ; .)
    AUTO            reduce using rule 11 (declaration -> declaration_specifiers ; .)
    REGISTER        reduce using rule 11 (declaration -> declaration_specifiers ; .)
    VOID            reduce using rule 11 (declaration -> declaration_specifiers ; .)
    CHAR            reduce using rule 11 (declaration -> declaration_specifiers ; .)
    SHORT           reduce using rule 11 (declaration -> declaration_specifiers ; .)
    INT             reduce using rule 11 (declaration -> declaration_specifiers ; .)
    LONG            reduce using rule 11 (declaration -> declaration_specifiers ; .)
    FLOAT           reduce using rule 11 (declaration -> declaration_specifiers ; .)
    DOUBLE          reduce using rule 11 (declaration -> declaration_specifiers ; .)
    SIGNED          reduce using rule 11 (declaration -> declaration_specifiers ; .)
    UNSIGNED        reduce using rule 11 (declaration -> declaration_specifiers ; .)
    BOOL            reduce using rule 11 (declaration -> declaration_specifiers ; .)
    CONST           reduce using rule 11 (declaration -> declaration_specifiers ; .)
    RESTRICT        reduce using rule 11 (declaration -> declaration_specifiers ; .)
    VOLATILE        reduce using rule 11 (declaration -> declaration_specifiers ; .)
    INLINE          reduce using rule 11 (declaration -> declaration_specifiers ; .)
    ENUM            reduce using rule 11 (declaration -> declaration_specifiers ; .)
    STRUCT          reduce using rule 11 (declaration -> declaration_specifiers ; .)
    UNION           reduce using rule 11 (declaration -> declaration_specifiers ; .)
    $end            reduce using rule 11 (declaration -> declaration_specifiers ; .)
    {               reduce using rule 11 (declaration -> declaration_specifiers ; .)
    }               reduce using rule 11 (declaration -> declaration_specifiers ; .)
    IDENTIFIER      reduce using rule 11 (declaration -> declaration_specifiers ; .)
    CASE            reduce using rule 11 (declaration -> declaration_specifiers ; .)
    DEFAULT         reduce using rule 11 (declaration -> declaration_specifiers ; .)
    ;               reduce using rule 11 (declaration -> declaration_specifiers ; .)
    IF              reduce using rule 11 (declaration -> declaration_specifiers ; .)
    SWITCH          reduce using rule 11 (declaration -> declaration_specifiers ; .)
    WHILE           reduce using rule 11 (declaration -> declaration_specifiers ; .)
    DO              reduce using rule 11 (declaration -> declaration_specifiers ; .)
    FOR             reduce using rule 11 (declaration -> declaration_specifiers ; .)
    GOTO            reduce using rule 11 (declaration -> declaration_specifiers ; .)
    CONTINUE        reduce using rule 11 (declaration -> declaration_specifiers ; .)
    BREAK           reduce using rule 11 (declaration -> declaration_specifiers ; .)
    RETURN          reduce using rule 11 (declaration -> declaration_specifiers ; .)
    INC_OP          reduce using rule 11 (declaration -> declaration_specifiers ; .)
    DEC_OP          reduce using rule 11 (declaration -> declaration_specifiers ; .)
    SIZEOF          reduce using rule 11 (declaration -> declaration_specifiers ; .)
    (               reduce using rule 11 (declaration -> declaration_specifiers ; .)
    &               reduce using rule 11 (declaration -> declaration_specifiers ; .)
    *               reduce using rule 11 (declaration -> declaration_specifiers ; .)
    +               reduce using rule 11 (declaration -> declaration_specifiers ; .)
    -               reduce using rule 11 (declaration -> declaration_specifiers ; .)
    ~               reduce using rule 11 (declaration -> declaration_specifiers ; .)
    !               reduce using rule 11 (declaration -> declaration_specifiers ; .)
    CONSTANT        reduce using rule 11 (declaration -> declaration_specifiers ; .)
    STRING_LITERAL  reduce using rule 11 (declaration -> declaration_specifiers ; .)


state 40

    (12) declaration -> declaration_specifiers init_declarator_list . ;
    (14) init_declarator_list -> init_declarator_list . , init_declarator

    ;               shift and go to state 62
    ,               shift and go to state 63


state 41

    (72) declarator -> pointer . direct_declarator
    (80) direct_declarator -> . IDENTIFIER
    (81) direct_declarator -> . ( declarator )
    (82) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (83) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (84) direct_declarator -> . direct_declarator [ assignment_expression ]
    (85) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (86) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (87) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (88) direct_declarator -> . direct_declarator [ * ]
    (89) direct_declarator -> . direct_declarator [ ]
    (90) direct_declarator -> . direct_declarator ( parameter_type_list )
    (91) direct_declarator -> . direct_declarator ( identifier_list )
    (92) direct_declarator -> . direct_declarator ( )

    IDENTIFIER      shift and go to state 45
    (               shift and go to state 46

    direct_declarator              shift and go to state 64

state 42

    (73) declarator -> direct_declarator .
    (82) direct_declarator -> direct_declarator . [ type_qualifier_list assignment_expression ]
    (83) direct_declarator -> direct_declarator . [ type_qualifier_list ]
    (84) direct_declarator -> direct_declarator . [ assignment_expression ]
    (85) direct_declarator -> direct_declarator . [ STATIC type_qualifier_list assignment_expression ]
    (86) direct_declarator -> direct_declarator . [ type_qualifier_list STATIC assignment_expression ]
    (87) direct_declarator -> direct_declarator . [ type_qualifier_list * ]
    (88) direct_declarator -> direct_declarator . [ * ]
    (89) direct_declarator -> direct_declarator . [ ]
    (90) direct_declarator -> direct_declarator . ( parameter_type_list )
    (91) direct_declarator -> direct_declarator . ( identifier_list )
    (92) direct_declarator -> direct_declarator . ( )

    =               reduce using rule 73 (declarator -> direct_declarator .)
    {               reduce using rule 73 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 73 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 73 (declarator -> direct_declarator .)
    STATIC          reduce using rule 73 (declarator -> direct_declarator .)
    AUTO            reduce using rule 73 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 73 (declarator -> direct_declarator .)
    VOID            reduce using rule 73 (declarator -> direct_declarator .)
    CHAR            reduce using rule 73 (declarator -> direct_declarator .)
    SHORT           reduce using rule 73 (declarator -> direct_declarator .)
    INT             reduce using rule 73 (declarator -> direct_declarator .)
    LONG            reduce using rule 73 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 73 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 73 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 73 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 73 (declarator -> direct_declarator .)
    BOOL            reduce using rule 73 (declarator -> direct_declarator .)
    CONST           reduce using rule 73 (declarator -> direct_declarator .)
    RESTRICT        reduce using rule 73 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 73 (declarator -> direct_declarator .)
    INLINE          reduce using rule 73 (declarator -> direct_declarator .)
    ENUM            reduce using rule 73 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 73 (declarator -> direct_declarator .)
    UNION           reduce using rule 73 (declarator -> direct_declarator .)
    ;               reduce using rule 73 (declarator -> direct_declarator .)
    ,               reduce using rule 73 (declarator -> direct_declarator .)
    )               reduce using rule 73 (declarator -> direct_declarator .)
    :               reduce using rule 73 (declarator -> direct_declarator .)
    [               shift and go to state 65
    (               shift and go to state 66


state 43

    (13) init_declarator_list -> init_declarator .

    ;               reduce using rule 13 (init_declarator_list -> init_declarator .)
    ,               reduce using rule 13 (init_declarator_list -> init_declarator .)


state 44

    (74) pointer -> * .
    (75) pointer -> * . type_qualifier_list
    (76) pointer -> * . pointer
    (77) pointer -> * . type_qualifier_list pointer
    (78) type_qualifier_list -> . type_qualifier
    (79) type_qualifier_list -> . type_qualifier_list type_qualifier
    (74) pointer -> . *
    (75) pointer -> . * type_qualifier_list
    (76) pointer -> . * pointer
    (77) pointer -> . * type_qualifier_list pointer
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 74 (pointer -> * .)
    (               reduce using rule 74 (pointer -> * .)
    [               reduce using rule 74 (pointer -> * .)
    ,               reduce using rule 74 (pointer -> * .)
    )               reduce using rule 74 (pointer -> * .)
    *               shift and go to state 44
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31

    type_qualifier_list            shift and go to state 67
    pointer                        shift and go to state 68
    type_qualifier                 shift and go to state 69

state 45

    (80) direct_declarator -> IDENTIFIER .

    [               reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    (               reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    =               reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    {               reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    TYPEDEF         reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    EXTERN          reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    STATIC          reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    AUTO            reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    REGISTER        reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    SHORT           reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    LONG            reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    SIGNED          reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    UNSIGNED        reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    BOOL            reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    CONST           reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    RESTRICT        reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    VOLATILE        reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    INLINE          reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    ENUM            reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    UNION           reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    ;               reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    ,               reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    )               reduce using rule 80 (direct_declarator -> IDENTIFIER .)
    :               reduce using rule 80 (direct_declarator -> IDENTIFIER .)


state 46

    (81) direct_declarator -> ( . declarator )
    (72) declarator -> . pointer direct_declarator
    (73) declarator -> . direct_declarator
    (74) pointer -> . *
    (75) pointer -> . * type_qualifier_list
    (76) pointer -> . * pointer
    (77) pointer -> . * type_qualifier_list pointer
    (80) direct_declarator -> . IDENTIFIER
    (81) direct_declarator -> . ( declarator )
    (82) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (83) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (84) direct_declarator -> . direct_declarator [ assignment_expression ]
    (85) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (86) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (87) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (88) direct_declarator -> . direct_declarator [ * ]
    (89) direct_declarator -> . direct_declarator [ ]
    (90) direct_declarator -> . direct_declarator ( parameter_type_list )
    (91) direct_declarator -> . direct_declarator ( identifier_list )
    (92) direct_declarator -> . direct_declarator ( )

    *               shift and go to state 44
    IDENTIFIER      shift and go to state 45
    (               shift and go to state 46

    declarator                     shift and go to state 70
    pointer                        shift and go to state 41
    direct_declarator              shift and go to state 42

state 47

    (6) macro -> MACRO IDENTIFIER . IDENTIFIER constant_expression
    (7) macro -> MACRO IDENTIFIER . < headfile >
    (8) macro -> MACRO IDENTIFIER . " headfile "

    IDENTIFIER      shift and go to state 71
    <               shift and go to state 72
    "               shift and go to state 73


state 48

    (18) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    ;               reduce using rule 18 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    *               reduce using rule 18 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 18 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    (               reduce using rule 18 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    [               reduce using rule 18 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    ,               reduce using rule 18 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    )               reduce using rule 18 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 49

    (20) declaration_specifiers -> type_specifier declaration_specifiers .

    ;               reduce using rule 20 (declaration_specifiers -> type_specifier declaration_specifiers .)
    *               reduce using rule 20 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 20 (declaration_specifiers -> type_specifier declaration_specifiers .)
    (               reduce using rule 20 (declaration_specifiers -> type_specifier declaration_specifiers .)
    [               reduce using rule 20 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ,               reduce using rule 20 (declaration_specifiers -> type_specifier declaration_specifiers .)
    )               reduce using rule 20 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 50

    (22) declaration_specifiers -> type_qualifier declaration_specifiers .

    ;               reduce using rule 22 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    *               reduce using rule 22 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 22 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    (               reduce using rule 22 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    [               reduce using rule 22 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ,               reduce using rule 22 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    )               reduce using rule 22 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 51

    (24) declaration_specifiers -> function_specifier declaration_specifiers .

    ;               reduce using rule 24 (declaration_specifiers -> function_specifier declaration_specifiers .)
    *               reduce using rule 24 (declaration_specifiers -> function_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 24 (declaration_specifiers -> function_specifier declaration_specifiers .)
    (               reduce using rule 24 (declaration_specifiers -> function_specifier declaration_specifiers .)
    [               reduce using rule 24 (declaration_specifiers -> function_specifier declaration_specifiers .)
    ,               reduce using rule 24 (declaration_specifiers -> function_specifier declaration_specifiers .)
    )               reduce using rule 24 (declaration_specifiers -> function_specifier declaration_specifiers .)


state 52

    (55) struct_or_union_specifier -> struct_or_union IDENTIFIER . { struct_declaration_list }
    (57) struct_or_union_specifier -> struct_or_union IDENTIFIER .

    {               shift and go to state 74
    TYPEDEF         reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOID            reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    BOOL            reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RESTRICT        reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INLINE          reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ;               reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    *               reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    (               reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    [               reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ,               reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    )               reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    :               reduce using rule 57 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)


state 53

    (56) struct_or_union_specifier -> struct_or_union { . struct_declaration_list }
    (60) struct_declaration_list -> . struct_declaration
    (61) struct_declaration_list -> . struct_declaration_list struct_declaration
    (62) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (63) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (64) specifier_qualifier_list -> . type_specifier
    (65) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (66) specifier_qualifier_list -> . type_qualifier
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    struct_or_union                shift and go to state 33
    struct_declaration_list        shift and go to state 75
    struct_declaration             shift and go to state 76
    specifier_qualifier_list       shift and go to state 77
    type_specifier                 shift and go to state 78
    type_qualifier                 shift and go to state 79
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28

state 54

    (46) enum_specifier -> ENUM { . enumerator_list }
    (48) enum_specifier -> ENUM { . enumerator_list , }
    (51) enumerator_list -> . enumerator
    (52) enumerator_list -> . enumerator_list , enumerator
    (53) enumerator -> . IDENTIFIER
    (54) enumerator -> . IDENTIFIER = constant_expression

    IDENTIFIER      shift and go to state 82

    enumerator_list                shift and go to state 80
    enumerator                     shift and go to state 81

state 55

    (47) enum_specifier -> ENUM IDENTIFIER . { enumerator_list }
    (49) enum_specifier -> ENUM IDENTIFIER . { enumerator_list , }
    (50) enum_specifier -> ENUM IDENTIFIER .

    {               shift and go to state 83
    TYPEDEF         reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    VOID            reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    BOOL            reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    RESTRICT        reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    INLINE          reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    ;               reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    *               reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    (               reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    [               reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    ,               reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    )               reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)
    :               reduce using rule 50 (enum_specifier -> ENUM IDENTIFIER .)


state 56

    (11) declaration -> declaration_specifiers . ;
    (12) declaration -> declaration_specifiers . init_declarator_list ;
    (13) init_declarator_list -> . init_declarator
    (14) init_declarator_list -> . init_declarator_list , init_declarator
    (15) init_declarator -> . declarator
    (16) init_declarator -> . declarator = initializer
    (72) declarator -> . pointer direct_declarator
    (73) declarator -> . direct_declarator
    (74) pointer -> . *
    (75) pointer -> . * type_qualifier_list
    (76) pointer -> . * pointer
    (77) pointer -> . * type_qualifier_list pointer
    (80) direct_declarator -> . IDENTIFIER
    (81) direct_declarator -> . ( declarator )
    (82) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (83) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (84) direct_declarator -> . direct_declarator [ assignment_expression ]
    (85) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (86) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (87) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (88) direct_declarator -> . direct_declarator [ * ]
    (89) direct_declarator -> . direct_declarator [ ]
    (90) direct_declarator -> . direct_declarator ( parameter_type_list )
    (91) direct_declarator -> . direct_declarator ( identifier_list )
    (92) direct_declarator -> . direct_declarator ( )

    ;               shift and go to state 39
    *               shift and go to state 44
    IDENTIFIER      shift and go to state 45
    (               shift and go to state 46

    init_declarator_list           shift and go to state 40
    init_declarator                shift and go to state 43
    declarator                     shift and go to state 84
    pointer                        shift and go to state 41
    direct_declarator              shift and go to state 42

state 57

    (206) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (209) declaration_list -> declaration_list . declaration
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (11) declaration -> . declaration_specifiers ;
    (12) declaration -> . declaration_specifiers init_declarator_list ;
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    {               shift and go to state 61
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    declaration_specifiers         shift and go to state 56
    compound_statement             shift and go to state 85
    declaration                    shift and go to state 86
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 58

    (207) function_definition -> declaration_specifiers declarator compound_statement .

    MACRO           reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEDEF         reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    BOOL            reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    RESTRICT        reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    INLINE          reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)


state 59

    (16) init_declarator -> declarator = . initializer
    (198) initializer -> . assignment_expression
    (199) initializer -> . { initializer_list }
    (200) initializer -> . { initializer_list , }
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 89
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    initializer                    shift and go to state 87
    assignment_expression          shift and go to state 88
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 60

    (208) declaration_list -> declaration .

    {               reduce using rule 208 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 208 (declaration_list -> declaration .)
    EXTERN          reduce using rule 208 (declaration_list -> declaration .)
    STATIC          reduce using rule 208 (declaration_list -> declaration .)
    AUTO            reduce using rule 208 (declaration_list -> declaration .)
    REGISTER        reduce using rule 208 (declaration_list -> declaration .)
    VOID            reduce using rule 208 (declaration_list -> declaration .)
    CHAR            reduce using rule 208 (declaration_list -> declaration .)
    SHORT           reduce using rule 208 (declaration_list -> declaration .)
    INT             reduce using rule 208 (declaration_list -> declaration .)
    LONG            reduce using rule 208 (declaration_list -> declaration .)
    FLOAT           reduce using rule 208 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 208 (declaration_list -> declaration .)
    SIGNED          reduce using rule 208 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 208 (declaration_list -> declaration .)
    BOOL            reduce using rule 208 (declaration_list -> declaration .)
    CONST           reduce using rule 208 (declaration_list -> declaration .)
    RESTRICT        reduce using rule 208 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 208 (declaration_list -> declaration .)
    INLINE          reduce using rule 208 (declaration_list -> declaration .)
    ENUM            reduce using rule 208 (declaration_list -> declaration .)
    STRUCT          reduce using rule 208 (declaration_list -> declaration .)
    UNION           reduce using rule 208 (declaration_list -> declaration .)


state 61

    (210) compound_statement -> { . }
    (211) compound_statement -> { . block_item_list }
    (212) block_item_list -> . block_item
    (213) block_item_list -> . block_item_list block_item
    (214) block_item -> . declaration
    (215) block_item -> . statement
    (11) declaration -> . declaration_specifiers ;
    (12) declaration -> . declaration_specifiers init_declarator_list ;
    (216) statement -> . labeled_statement
    (217) statement -> . compound_statement
    (218) statement -> . expression_statement
    (219) statement -> . selection_statement
    (220) statement -> . iteration_statement
    (221) statement -> . jump_statement
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (222) labeled_statement -> . IDENTIFIER : statement
    (223) labeled_statement -> . CASE constant_expression : statement
    (224) labeled_statement -> . DEFAULT : statement
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (227) selection_statement -> . IF ( expression ) statement
    (228) selection_statement -> . IF ( expression ) statement ELSE statement
    (229) selection_statement -> . SWITCH ( expression ) statement
    (230) iteration_statement -> . WHILE ( expression ) statement
    (231) iteration_statement -> . DO statement WHILE ( expression ) ;
    (232) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (233) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (235) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (236) jump_statement -> . GOTO IDENTIFIER ;
    (237) jump_statement -> . CONTINUE ;
    (238) jump_statement -> . BREAK ;
    (239) jump_statement -> . RETURN ;
    (240) jump_statement -> . RETURN expression ;
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 119
    IDENTIFIER      shift and go to state 131
    CASE            shift and go to state 132
    DEFAULT         shift and go to state 133
    {               shift and go to state 61
    ;               shift and go to state 124
    IF              shift and go to state 135
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 137
    DO              shift and go to state 138
    FOR             shift and go to state 139
    GOTO            shift and go to state 140
    CONTINUE        shift and go to state 141
    BREAK           shift and go to state 142
    RETURN          shift and go to state 143
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    block_item_list                shift and go to state 120
    block_item                     shift and go to state 121
    declaration                    shift and go to state 122
    statement                      shift and go to state 123
    declaration_specifiers         shift and go to state 56
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    expression                     shift and go to state 134
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    assignment_expression          shift and go to state 144
    struct_or_union                shift and go to state 33
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 62

    (12) declaration -> declaration_specifiers init_declarator_list ; .

    MACRO           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    TYPEDEF         reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    EXTERN          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    STATIC          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    AUTO            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    REGISTER        reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    VOID            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    CHAR            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    SHORT           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    INT             reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    LONG            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    FLOAT           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    DOUBLE          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIGNED          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    UNSIGNED        reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    BOOL            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONST           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    RESTRICT        reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    VOLATILE        reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    INLINE          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    ENUM            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRUCT          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    UNION           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    $end            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    {               reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    }               reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    IDENTIFIER      reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    CASE            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEFAULT         reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    ;               reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    IF              reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    SWITCH          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    WHILE           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    DO              reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    FOR             reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    GOTO            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONTINUE        reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    BREAK           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    RETURN          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    INC_OP          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEC_OP          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIZEOF          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    (               reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    &               reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    *               reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    +               reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    -               reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    ~               reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    !               reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONSTANT        reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRING_LITERAL  reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list ; .)


state 63

    (14) init_declarator_list -> init_declarator_list , . init_declarator
    (15) init_declarator -> . declarator
    (16) init_declarator -> . declarator = initializer
    (72) declarator -> . pointer direct_declarator
    (73) declarator -> . direct_declarator
    (74) pointer -> . *
    (75) pointer -> . * type_qualifier_list
    (76) pointer -> . * pointer
    (77) pointer -> . * type_qualifier_list pointer
    (80) direct_declarator -> . IDENTIFIER
    (81) direct_declarator -> . ( declarator )
    (82) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (83) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (84) direct_declarator -> . direct_declarator [ assignment_expression ]
    (85) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (86) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (87) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (88) direct_declarator -> . direct_declarator [ * ]
    (89) direct_declarator -> . direct_declarator [ ]
    (90) direct_declarator -> . direct_declarator ( parameter_type_list )
    (91) direct_declarator -> . direct_declarator ( identifier_list )
    (92) direct_declarator -> . direct_declarator ( )

    *               shift and go to state 44
    IDENTIFIER      shift and go to state 45
    (               shift and go to state 46

    init_declarator                shift and go to state 145
    declarator                     shift and go to state 84
    pointer                        shift and go to state 41
    direct_declarator              shift and go to state 42

state 64

    (72) declarator -> pointer direct_declarator .
    (82) direct_declarator -> direct_declarator . [ type_qualifier_list assignment_expression ]
    (83) direct_declarator -> direct_declarator . [ type_qualifier_list ]
    (84) direct_declarator -> direct_declarator . [ assignment_expression ]
    (85) direct_declarator -> direct_declarator . [ STATIC type_qualifier_list assignment_expression ]
    (86) direct_declarator -> direct_declarator . [ type_qualifier_list STATIC assignment_expression ]
    (87) direct_declarator -> direct_declarator . [ type_qualifier_list * ]
    (88) direct_declarator -> direct_declarator . [ * ]
    (89) direct_declarator -> direct_declarator . [ ]
    (90) direct_declarator -> direct_declarator . ( parameter_type_list )
    (91) direct_declarator -> direct_declarator . ( identifier_list )
    (92) direct_declarator -> direct_declarator . ( )

    =               reduce using rule 72 (declarator -> pointer direct_declarator .)
    {               reduce using rule 72 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 72 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 72 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 72 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 72 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 72 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 72 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 72 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 72 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 72 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 72 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 72 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 72 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 72 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 72 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 72 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 72 (declarator -> pointer direct_declarator .)
    RESTRICT        reduce using rule 72 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 72 (declarator -> pointer direct_declarator .)
    INLINE          reduce using rule 72 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 72 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 72 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 72 (declarator -> pointer direct_declarator .)
    ;               reduce using rule 72 (declarator -> pointer direct_declarator .)
    ,               reduce using rule 72 (declarator -> pointer direct_declarator .)
    )               reduce using rule 72 (declarator -> pointer direct_declarator .)
    :               reduce using rule 72 (declarator -> pointer direct_declarator .)
    [               shift and go to state 65
    (               shift and go to state 66


state 65

    (82) direct_declarator -> direct_declarator [ . type_qualifier_list assignment_expression ]
    (83) direct_declarator -> direct_declarator [ . type_qualifier_list ]
    (84) direct_declarator -> direct_declarator [ . assignment_expression ]
    (85) direct_declarator -> direct_declarator [ . STATIC type_qualifier_list assignment_expression ]
    (86) direct_declarator -> direct_declarator [ . type_qualifier_list STATIC assignment_expression ]
    (87) direct_declarator -> direct_declarator [ . type_qualifier_list * ]
    (88) direct_declarator -> direct_declarator [ . * ]
    (89) direct_declarator -> direct_declarator [ . ]
    (78) type_qualifier_list -> . type_qualifier
    (79) type_qualifier_list -> . type_qualifier_list type_qualifier
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    STATIC          shift and go to state 149
    *               shift and go to state 150
    ]               shift and go to state 148
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    type_qualifier_list            shift and go to state 146
    assignment_expression          shift and go to state 147
    type_qualifier                 shift and go to state 69
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 66

    (90) direct_declarator -> direct_declarator ( . parameter_type_list )
    (91) direct_declarator -> direct_declarator ( . identifier_list )
    (92) direct_declarator -> direct_declarator ( . )
    (185) parameter_type_list -> . parameter_list
    (186) parameter_type_list -> . parameter_list , ELLIPSIS
    (93) identifier_list -> . IDENTIFIER
    (94) identifier_list -> . identifier_list , IDENTIFIER
    (187) parameter_list -> . parameter_declaration
    (188) parameter_list -> . parameter_list , parameter_declaration
    (189) parameter_declaration -> . declaration_specifiers declarator
    (190) parameter_declaration -> . declaration_specifiers abstract_declarator
    (191) parameter_declaration -> . declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    )               shift and go to state 152
    IDENTIFIER      shift and go to state 155
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    parameter_type_list            shift and go to state 151
    identifier_list                shift and go to state 153
    parameter_list                 shift and go to state 154
    parameter_declaration          shift and go to state 156
    declaration_specifiers         shift and go to state 157
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 67

    (75) pointer -> * type_qualifier_list .
    (77) pointer -> * type_qualifier_list . pointer
    (79) type_qualifier_list -> type_qualifier_list . type_qualifier
    (74) pointer -> . *
    (75) pointer -> . * type_qualifier_list
    (76) pointer -> . * pointer
    (77) pointer -> . * type_qualifier_list pointer
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 75 (pointer -> * type_qualifier_list .)
    (               reduce using rule 75 (pointer -> * type_qualifier_list .)
    [               reduce using rule 75 (pointer -> * type_qualifier_list .)
    ,               reduce using rule 75 (pointer -> * type_qualifier_list .)
    )               reduce using rule 75 (pointer -> * type_qualifier_list .)
    *               shift and go to state 44
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31

    pointer                        shift and go to state 158
    type_qualifier                 shift and go to state 159

state 68

    (76) pointer -> * pointer .

    IDENTIFIER      reduce using rule 76 (pointer -> * pointer .)
    (               reduce using rule 76 (pointer -> * pointer .)
    [               reduce using rule 76 (pointer -> * pointer .)
    ,               reduce using rule 76 (pointer -> * pointer .)
    )               reduce using rule 76 (pointer -> * pointer .)


state 69

    (78) type_qualifier_list -> type_qualifier .

    *               reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    RESTRICT        reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    (               reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    [               reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    ,               reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    )               reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    ]               reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    STATIC          reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    INC_OP          reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    DEC_OP          reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    SIZEOF          reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    &               reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    +               reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    -               reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    ~               reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    !               reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    CONSTANT        reduce using rule 78 (type_qualifier_list -> type_qualifier .)
    STRING_LITERAL  reduce using rule 78 (type_qualifier_list -> type_qualifier .)


state 70

    (81) direct_declarator -> ( declarator . )

    )               shift and go to state 160


state 71

    (6) macro -> MACRO IDENTIFIER IDENTIFIER . constant_expression
    (108) constant_expression -> . conditional_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    constant_expression            shift and go to state 161
    conditional_expression         shift and go to state 162
    logical_or_expression          shift and go to state 92
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 72

    (7) macro -> MACRO IDENTIFIER < . headfile >
    (9) headfile -> . IDENTIFIER . IDENTIFIER
    (10) headfile -> . IDENTIFIER

    IDENTIFIER      shift and go to state 165

    headfile                       shift and go to state 166

state 73

    (8) macro -> MACRO IDENTIFIER " . headfile "
    (9) headfile -> . IDENTIFIER . IDENTIFIER
    (10) headfile -> . IDENTIFIER

    IDENTIFIER      shift and go to state 165

    headfile                       shift and go to state 167

state 74

    (55) struct_or_union_specifier -> struct_or_union IDENTIFIER { . struct_declaration_list }
    (60) struct_declaration_list -> . struct_declaration
    (61) struct_declaration_list -> . struct_declaration_list struct_declaration
    (62) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (63) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (64) specifier_qualifier_list -> . type_specifier
    (65) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (66) specifier_qualifier_list -> . type_qualifier
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    struct_or_union                shift and go to state 33
    struct_declaration_list        shift and go to state 168
    struct_declaration             shift and go to state 76
    specifier_qualifier_list       shift and go to state 77
    type_specifier                 shift and go to state 78
    type_qualifier                 shift and go to state 79
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28

state 75

    (56) struct_or_union_specifier -> struct_or_union { struct_declaration_list . }
    (61) struct_declaration_list -> struct_declaration_list . struct_declaration
    (62) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (63) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (64) specifier_qualifier_list -> . type_specifier
    (65) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (66) specifier_qualifier_list -> . type_qualifier
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    }               shift and go to state 169
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    struct_or_union                shift and go to state 33
    struct_declaration             shift and go to state 170
    specifier_qualifier_list       shift and go to state 77
    type_specifier                 shift and go to state 78
    type_qualifier                 shift and go to state 79
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28

state 76

    (60) struct_declaration_list -> struct_declaration .

    }               reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    RESTRICT        reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 60 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 60 (struct_declaration_list -> struct_declaration .)


state 77

    (62) struct_declaration -> specifier_qualifier_list . struct_declarator_list ;
    (67) struct_declarator_list -> . struct_declarator
    (68) struct_declarator_list -> . struct_declarator_list , struct_declarator
    (69) struct_declarator -> . declarator
    (70) struct_declarator -> . : constant_expression
    (71) struct_declarator -> . declarator : constant_expression
    (72) declarator -> . pointer direct_declarator
    (73) declarator -> . direct_declarator
    (74) pointer -> . *
    (75) pointer -> . * type_qualifier_list
    (76) pointer -> . * pointer
    (77) pointer -> . * type_qualifier_list pointer
    (80) direct_declarator -> . IDENTIFIER
    (81) direct_declarator -> . ( declarator )
    (82) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (83) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (84) direct_declarator -> . direct_declarator [ assignment_expression ]
    (85) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (86) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (87) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (88) direct_declarator -> . direct_declarator [ * ]
    (89) direct_declarator -> . direct_declarator [ ]
    (90) direct_declarator -> . direct_declarator ( parameter_type_list )
    (91) direct_declarator -> . direct_declarator ( identifier_list )
    (92) direct_declarator -> . direct_declarator ( )

    :               shift and go to state 174
    *               shift and go to state 44
    IDENTIFIER      shift and go to state 45
    (               shift and go to state 46

    struct_declarator_list         shift and go to state 171
    struct_declarator              shift and go to state 172
    declarator                     shift and go to state 173
    pointer                        shift and go to state 41
    direct_declarator              shift and go to state 42

state 78

    (63) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (64) specifier_qualifier_list -> type_specifier .
    (63) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (64) specifier_qualifier_list -> . type_specifier
    (65) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (66) specifier_qualifier_list -> . type_qualifier
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    :               reduce using rule 64 (specifier_qualifier_list -> type_specifier .)
    *               reduce using rule 64 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 64 (specifier_qualifier_list -> type_specifier .)
    (               reduce using rule 64 (specifier_qualifier_list -> type_specifier .)
    [               reduce using rule 64 (specifier_qualifier_list -> type_specifier .)
    )               reduce using rule 64 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    type_specifier                 shift and go to state 78
    specifier_qualifier_list       shift and go to state 175
    type_qualifier                 shift and go to state 79
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 79

    (65) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (66) specifier_qualifier_list -> type_qualifier .
    (63) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (64) specifier_qualifier_list -> . type_specifier
    (65) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (66) specifier_qualifier_list -> . type_qualifier
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    :               reduce using rule 66 (specifier_qualifier_list -> type_qualifier .)
    *               reduce using rule 66 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 66 (specifier_qualifier_list -> type_qualifier .)
    (               reduce using rule 66 (specifier_qualifier_list -> type_qualifier .)
    [               reduce using rule 66 (specifier_qualifier_list -> type_qualifier .)
    )               reduce using rule 66 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    type_qualifier                 shift and go to state 79
    specifier_qualifier_list       shift and go to state 176
    type_specifier                 shift and go to state 78
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 80

    (46) enum_specifier -> ENUM { enumerator_list . }
    (48) enum_specifier -> ENUM { enumerator_list . , }
    (52) enumerator_list -> enumerator_list . , enumerator

    }               shift and go to state 177
    ,               shift and go to state 178


state 81

    (51) enumerator_list -> enumerator .

    }               reduce using rule 51 (enumerator_list -> enumerator .)
    ,               reduce using rule 51 (enumerator_list -> enumerator .)


state 82

    (53) enumerator -> IDENTIFIER .
    (54) enumerator -> IDENTIFIER . = constant_expression

    }               reduce using rule 53 (enumerator -> IDENTIFIER .)
    ,               reduce using rule 53 (enumerator -> IDENTIFIER .)
    =               shift and go to state 179


state 83

    (47) enum_specifier -> ENUM IDENTIFIER { . enumerator_list }
    (49) enum_specifier -> ENUM IDENTIFIER { . enumerator_list , }
    (51) enumerator_list -> . enumerator
    (52) enumerator_list -> . enumerator_list , enumerator
    (53) enumerator -> . IDENTIFIER
    (54) enumerator -> . IDENTIFIER = constant_expression

    IDENTIFIER      shift and go to state 82

    enumerator_list                shift and go to state 180
    enumerator                     shift and go to state 81

state 84

    (15) init_declarator -> declarator .
    (16) init_declarator -> declarator . = initializer

    ;               reduce using rule 15 (init_declarator -> declarator .)
    ,               reduce using rule 15 (init_declarator -> declarator .)
    =               shift and go to state 59


state 85

    (206) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    MACRO           reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPEDEF         reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    BOOL            reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    RESTRICT        reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INLINE          reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 86

    (209) declaration_list -> declaration_list declaration .

    {               reduce using rule 209 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 209 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 209 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 209 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 209 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 209 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 209 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 209 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 209 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 209 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 209 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 209 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 209 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 209 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 209 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 209 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 209 (declaration_list -> declaration_list declaration .)
    RESTRICT        reduce using rule 209 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 209 (declaration_list -> declaration_list declaration .)
    INLINE          reduce using rule 209 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 209 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 209 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 209 (declaration_list -> declaration_list declaration .)


state 87

    (16) init_declarator -> declarator = initializer .

    ;               reduce using rule 16 (init_declarator -> declarator = initializer .)
    ,               reduce using rule 16 (init_declarator -> declarator = initializer .)


state 88

    (198) initializer -> assignment_expression .

    ;               reduce using rule 198 (initializer -> assignment_expression .)
    ,               reduce using rule 198 (initializer -> assignment_expression .)
    }               reduce using rule 198 (initializer -> assignment_expression .)


state 89

    (199) initializer -> { . initializer_list }
    (200) initializer -> { . initializer_list , }
    (194) initializer_list -> . initializer
    (195) initializer_list -> . designation initializer
    (196) initializer_list -> . initializer_list , initializer
    (197) initializer_list -> . initializer_list , designation initializer
    (198) initializer -> . assignment_expression
    (199) initializer -> . { initializer_list }
    (200) initializer -> . { initializer_list , }
    (201) designation -> . designator_list =
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (202) designator_list -> . designator
    (203) designator_list -> . designator_list designator
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (204) designator -> . [ constant_expression ]
    (205) designator -> . . IDENTIFIER
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 89
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    [               shift and go to state 186
    .               shift and go to state 187
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    initializer_list               shift and go to state 181
    initializer                    shift and go to state 182
    designation                    shift and go to state 183
    assignment_expression          shift and go to state 88
    designator_list                shift and go to state 184
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    designator                     shift and go to state 185
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 90

    (95) assignment_expression -> conditional_expression .

    ;               reduce using rule 95 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 95 (assignment_expression -> conditional_expression .)
    ]               reduce using rule 95 (assignment_expression -> conditional_expression .)
    }               reduce using rule 95 (assignment_expression -> conditional_expression .)
    )               reduce using rule 95 (assignment_expression -> conditional_expression .)
    :               reduce using rule 95 (assignment_expression -> conditional_expression .)


state 91

    (96) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (139) cast_expression -> unary_expression .
    (97) assignment_operator -> . =
    (98) assignment_operator -> . MUL_ASSIGN
    (99) assignment_operator -> . DIV_ASSIGN
    (100) assignment_operator -> . MOD_ASSIGN
    (101) assignment_operator -> . ADD_ASSIGN
    (102) assignment_operator -> . SUB_ASSIGN
    (103) assignment_operator -> . LEFT_ASSIGN
    (104) assignment_operator -> . RIGHT_ASSIGN
    (105) assignment_operator -> . AND_ASSIGN
    (106) assignment_operator -> . XOR_ASSIGN
    (107) assignment_operator -> . OR_ASSIGN

    *               reduce using rule 139 (cast_expression -> unary_expression .)
    /               reduce using rule 139 (cast_expression -> unary_expression .)
    %               reduce using rule 139 (cast_expression -> unary_expression .)
    +               reduce using rule 139 (cast_expression -> unary_expression .)
    -               reduce using rule 139 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 139 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 139 (cast_expression -> unary_expression .)
    <               reduce using rule 139 (cast_expression -> unary_expression .)
    >               reduce using rule 139 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 139 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 139 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 139 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 139 (cast_expression -> unary_expression .)
    &               reduce using rule 139 (cast_expression -> unary_expression .)
    ^               reduce using rule 139 (cast_expression -> unary_expression .)
    |               reduce using rule 139 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 139 (cast_expression -> unary_expression .)
    ?               reduce using rule 139 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 139 (cast_expression -> unary_expression .)
    ;               reduce using rule 139 (cast_expression -> unary_expression .)
    ,               reduce using rule 139 (cast_expression -> unary_expression .)
    ]               reduce using rule 139 (cast_expression -> unary_expression .)
    }               reduce using rule 139 (cast_expression -> unary_expression .)
    )               reduce using rule 139 (cast_expression -> unary_expression .)
    :               reduce using rule 139 (cast_expression -> unary_expression .)
    =               shift and go to state 189
    MUL_ASSIGN      shift and go to state 190
    DIV_ASSIGN      shift and go to state 191
    MOD_ASSIGN      shift and go to state 192
    ADD_ASSIGN      shift and go to state 193
    SUB_ASSIGN      shift and go to state 194
    LEFT_ASSIGN     shift and go to state 195
    RIGHT_ASSIGN    shift and go to state 196
    AND_ASSIGN      shift and go to state 197
    XOR_ASSIGN      shift and go to state 198
    OR_ASSIGN       shift and go to state 199

    assignment_operator            shift and go to state 188

state 92

    (109) conditional_expression -> logical_or_expression .
    (110) conditional_expression -> logical_or_expression . ? expression : conditional_expression
    (112) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    ;               reduce using rule 109 (conditional_expression -> logical_or_expression .)
    ,               reduce using rule 109 (conditional_expression -> logical_or_expression .)
    ]               reduce using rule 109 (conditional_expression -> logical_or_expression .)
    MACRO           reduce using rule 109 (conditional_expression -> logical_or_expression .)
    TYPEDEF         reduce using rule 109 (conditional_expression -> logical_or_expression .)
    EXTERN          reduce using rule 109 (conditional_expression -> logical_or_expression .)
    STATIC          reduce using rule 109 (conditional_expression -> logical_or_expression .)
    AUTO            reduce using rule 109 (conditional_expression -> logical_or_expression .)
    REGISTER        reduce using rule 109 (conditional_expression -> logical_or_expression .)
    VOID            reduce using rule 109 (conditional_expression -> logical_or_expression .)
    CHAR            reduce using rule 109 (conditional_expression -> logical_or_expression .)
    SHORT           reduce using rule 109 (conditional_expression -> logical_or_expression .)
    INT             reduce using rule 109 (conditional_expression -> logical_or_expression .)
    LONG            reduce using rule 109 (conditional_expression -> logical_or_expression .)
    FLOAT           reduce using rule 109 (conditional_expression -> logical_or_expression .)
    DOUBLE          reduce using rule 109 (conditional_expression -> logical_or_expression .)
    SIGNED          reduce using rule 109 (conditional_expression -> logical_or_expression .)
    UNSIGNED        reduce using rule 109 (conditional_expression -> logical_or_expression .)
    BOOL            reduce using rule 109 (conditional_expression -> logical_or_expression .)
    CONST           reduce using rule 109 (conditional_expression -> logical_or_expression .)
    RESTRICT        reduce using rule 109 (conditional_expression -> logical_or_expression .)
    VOLATILE        reduce using rule 109 (conditional_expression -> logical_or_expression .)
    INLINE          reduce using rule 109 (conditional_expression -> logical_or_expression .)
    ENUM            reduce using rule 109 (conditional_expression -> logical_or_expression .)
    STRUCT          reduce using rule 109 (conditional_expression -> logical_or_expression .)
    UNION           reduce using rule 109 (conditional_expression -> logical_or_expression .)
    $end            reduce using rule 109 (conditional_expression -> logical_or_expression .)
    }               reduce using rule 109 (conditional_expression -> logical_or_expression .)
    )               reduce using rule 109 (conditional_expression -> logical_or_expression .)
    :               reduce using rule 109 (conditional_expression -> logical_or_expression .)
    ?               shift and go to state 200
    OR_OP           shift and go to state 201


state 93

    (141) unary_expression -> postfix_expression .
    (154) postfix_expression -> postfix_expression . [ expression ]
    (155) postfix_expression -> postfix_expression . ( )
    (156) postfix_expression -> postfix_expression . ( argument_expression_list )
    (157) postfix_expression -> postfix_expression . . IDENTIFIER
    (158) postfix_expression -> postfix_expression . PTR_OP IDENTIFIER
    (159) postfix_expression -> postfix_expression . INC_OP
    (160) postfix_expression -> postfix_expression . DEC_OP

    =               reduce using rule 141 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 141 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 141 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 141 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 141 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 141 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 141 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 141 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 141 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 141 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 141 (unary_expression -> postfix_expression .)
    *               reduce using rule 141 (unary_expression -> postfix_expression .)
    /               reduce using rule 141 (unary_expression -> postfix_expression .)
    %               reduce using rule 141 (unary_expression -> postfix_expression .)
    +               reduce using rule 141 (unary_expression -> postfix_expression .)
    -               reduce using rule 141 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 141 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 141 (unary_expression -> postfix_expression .)
    <               reduce using rule 141 (unary_expression -> postfix_expression .)
    >               reduce using rule 141 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 141 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 141 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 141 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 141 (unary_expression -> postfix_expression .)
    &               reduce using rule 141 (unary_expression -> postfix_expression .)
    ^               reduce using rule 141 (unary_expression -> postfix_expression .)
    |               reduce using rule 141 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 141 (unary_expression -> postfix_expression .)
    ?               reduce using rule 141 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 141 (unary_expression -> postfix_expression .)
    ;               reduce using rule 141 (unary_expression -> postfix_expression .)
    ,               reduce using rule 141 (unary_expression -> postfix_expression .)
    ]               reduce using rule 141 (unary_expression -> postfix_expression .)
    MACRO           reduce using rule 141 (unary_expression -> postfix_expression .)
    TYPEDEF         reduce using rule 141 (unary_expression -> postfix_expression .)
    EXTERN          reduce using rule 141 (unary_expression -> postfix_expression .)
    STATIC          reduce using rule 141 (unary_expression -> postfix_expression .)
    AUTO            reduce using rule 141 (unary_expression -> postfix_expression .)
    REGISTER        reduce using rule 141 (unary_expression -> postfix_expression .)
    VOID            reduce using rule 141 (unary_expression -> postfix_expression .)
    CHAR            reduce using rule 141 (unary_expression -> postfix_expression .)
    SHORT           reduce using rule 141 (unary_expression -> postfix_expression .)
    INT             reduce using rule 141 (unary_expression -> postfix_expression .)
    LONG            reduce using rule 141 (unary_expression -> postfix_expression .)
    FLOAT           reduce using rule 141 (unary_expression -> postfix_expression .)
    DOUBLE          reduce using rule 141 (unary_expression -> postfix_expression .)
    SIGNED          reduce using rule 141 (unary_expression -> postfix_expression .)
    UNSIGNED        reduce using rule 141 (unary_expression -> postfix_expression .)
    BOOL            reduce using rule 141 (unary_expression -> postfix_expression .)
    CONST           reduce using rule 141 (unary_expression -> postfix_expression .)
    RESTRICT        reduce using rule 141 (unary_expression -> postfix_expression .)
    VOLATILE        reduce using rule 141 (unary_expression -> postfix_expression .)
    INLINE          reduce using rule 141 (unary_expression -> postfix_expression .)
    ENUM            reduce using rule 141 (unary_expression -> postfix_expression .)
    STRUCT          reduce using rule 141 (unary_expression -> postfix_expression .)
    UNION           reduce using rule 141 (unary_expression -> postfix_expression .)
    $end            reduce using rule 141 (unary_expression -> postfix_expression .)
    }               reduce using rule 141 (unary_expression -> postfix_expression .)
    )               reduce using rule 141 (unary_expression -> postfix_expression .)
    :               reduce using rule 141 (unary_expression -> postfix_expression .)
    [               shift and go to state 202
    (               shift and go to state 203
    .               shift and go to state 204
    PTR_OP          shift and go to state 205
    INC_OP          shift and go to state 206
    DEC_OP          shift and go to state 207


state 94

    (142) unary_expression -> INC_OP . unary_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 209
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    unary_expression               shift and go to state 208
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 95

    (143) unary_expression -> DEC_OP . unary_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 209
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    unary_expression               shift and go to state 210
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 96

    (144) unary_expression -> unary_operator . cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 211
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    primary_expression             shift and go to state 101

state 97

    (135) multiplicative_expression -> cast_expression .

    *               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    %               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 135 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 135 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 135 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 135 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 135 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 135 (multiplicative_expression -> cast_expression .)
    &               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    ^               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    |               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 135 (multiplicative_expression -> cast_expression .)
    ?               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 135 (multiplicative_expression -> cast_expression .)
    ;               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    ]               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    MACRO           reduce using rule 135 (multiplicative_expression -> cast_expression .)
    TYPEDEF         reduce using rule 135 (multiplicative_expression -> cast_expression .)
    EXTERN          reduce using rule 135 (multiplicative_expression -> cast_expression .)
    STATIC          reduce using rule 135 (multiplicative_expression -> cast_expression .)
    AUTO            reduce using rule 135 (multiplicative_expression -> cast_expression .)
    REGISTER        reduce using rule 135 (multiplicative_expression -> cast_expression .)
    VOID            reduce using rule 135 (multiplicative_expression -> cast_expression .)
    CHAR            reduce using rule 135 (multiplicative_expression -> cast_expression .)
    SHORT           reduce using rule 135 (multiplicative_expression -> cast_expression .)
    INT             reduce using rule 135 (multiplicative_expression -> cast_expression .)
    LONG            reduce using rule 135 (multiplicative_expression -> cast_expression .)
    FLOAT           reduce using rule 135 (multiplicative_expression -> cast_expression .)
    DOUBLE          reduce using rule 135 (multiplicative_expression -> cast_expression .)
    SIGNED          reduce using rule 135 (multiplicative_expression -> cast_expression .)
    UNSIGNED        reduce using rule 135 (multiplicative_expression -> cast_expression .)
    BOOL            reduce using rule 135 (multiplicative_expression -> cast_expression .)
    CONST           reduce using rule 135 (multiplicative_expression -> cast_expression .)
    RESTRICT        reduce using rule 135 (multiplicative_expression -> cast_expression .)
    VOLATILE        reduce using rule 135 (multiplicative_expression -> cast_expression .)
    INLINE          reduce using rule 135 (multiplicative_expression -> cast_expression .)
    ENUM            reduce using rule 135 (multiplicative_expression -> cast_expression .)
    STRUCT          reduce using rule 135 (multiplicative_expression -> cast_expression .)
    UNION           reduce using rule 135 (multiplicative_expression -> cast_expression .)
    $end            reduce using rule 135 (multiplicative_expression -> cast_expression .)
    }               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 135 (multiplicative_expression -> cast_expression .)
    :               reduce using rule 135 (multiplicative_expression -> cast_expression .)


state 98

    (145) unary_expression -> SIZEOF . unary_expression
    (146) unary_expression -> SIZEOF . ( type_name )
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 213
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    unary_expression               shift and go to state 212
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 99

    (161) postfix_expression -> ( . type_name ) { initializer_list }
    (162) postfix_expression -> ( . type_name ) { initializer_list , }
    (166) primary_expression -> ( . expression )
    (140) cast_expression -> ( . type_name ) cast_expression
    (169) type_name -> . specifier_qualifier_list
    (170) type_name -> . specifier_qualifier_list abstract_declarator
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (63) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (64) specifier_qualifier_list -> . type_specifier
    (65) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (66) specifier_qualifier_list -> . type_qualifier
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    ENUM            shift and go to state 34
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    type_name                      shift and go to state 214
    expression                     shift and go to state 215
    cast_expression                shift and go to state 97
    specifier_qualifier_list       shift and go to state 216
    assignment_expression          shift and go to state 144
    type_specifier                 shift and go to state 78
    type_qualifier                 shift and go to state 79
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    struct_or_union                shift and go to state 33
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 100

    (111) logical_or_expression -> logical_and_expression .
    (114) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    ?               reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    OR_OP           reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    ]               reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    MACRO           reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    TYPEDEF         reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    EXTERN          reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    STATIC          reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    AUTO            reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    REGISTER        reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    VOID            reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    CHAR            reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    SHORT           reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    INT             reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    LONG            reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    FLOAT           reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    DOUBLE          reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    SIGNED          reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    UNSIGNED        reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    BOOL            reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    CONST           reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    RESTRICT        reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    VOLATILE        reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    INLINE          reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    ENUM            reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    STRUCT          reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    UNION           reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    $end            reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    }               reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    :               reduce using rule 111 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 217


state 101

    (153) postfix_expression -> primary_expression .

    [               reduce using rule 153 (postfix_expression -> primary_expression .)
    (               reduce using rule 153 (postfix_expression -> primary_expression .)
    .               reduce using rule 153 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 153 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 153 (postfix_expression -> primary_expression .)
    DEC_OP          reduce using rule 153 (postfix_expression -> primary_expression .)
    =               reduce using rule 153 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 153 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 153 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 153 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 153 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 153 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 153 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 153 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 153 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 153 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 153 (postfix_expression -> primary_expression .)
    *               reduce using rule 153 (postfix_expression -> primary_expression .)
    /               reduce using rule 153 (postfix_expression -> primary_expression .)
    %               reduce using rule 153 (postfix_expression -> primary_expression .)
    +               reduce using rule 153 (postfix_expression -> primary_expression .)
    -               reduce using rule 153 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 153 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 153 (postfix_expression -> primary_expression .)
    <               reduce using rule 153 (postfix_expression -> primary_expression .)
    >               reduce using rule 153 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 153 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 153 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 153 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 153 (postfix_expression -> primary_expression .)
    &               reduce using rule 153 (postfix_expression -> primary_expression .)
    ^               reduce using rule 153 (postfix_expression -> primary_expression .)
    |               reduce using rule 153 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 153 (postfix_expression -> primary_expression .)
    ?               reduce using rule 153 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 153 (postfix_expression -> primary_expression .)
    ;               reduce using rule 153 (postfix_expression -> primary_expression .)
    ,               reduce using rule 153 (postfix_expression -> primary_expression .)
    ]               reduce using rule 153 (postfix_expression -> primary_expression .)
    MACRO           reduce using rule 153 (postfix_expression -> primary_expression .)
    TYPEDEF         reduce using rule 153 (postfix_expression -> primary_expression .)
    EXTERN          reduce using rule 153 (postfix_expression -> primary_expression .)
    STATIC          reduce using rule 153 (postfix_expression -> primary_expression .)
    AUTO            reduce using rule 153 (postfix_expression -> primary_expression .)
    REGISTER        reduce using rule 153 (postfix_expression -> primary_expression .)
    VOID            reduce using rule 153 (postfix_expression -> primary_expression .)
    CHAR            reduce using rule 153 (postfix_expression -> primary_expression .)
    SHORT           reduce using rule 153 (postfix_expression -> primary_expression .)
    INT             reduce using rule 153 (postfix_expression -> primary_expression .)
    LONG            reduce using rule 153 (postfix_expression -> primary_expression .)
    FLOAT           reduce using rule 153 (postfix_expression -> primary_expression .)
    DOUBLE          reduce using rule 153 (postfix_expression -> primary_expression .)
    SIGNED          reduce using rule 153 (postfix_expression -> primary_expression .)
    UNSIGNED        reduce using rule 153 (postfix_expression -> primary_expression .)
    BOOL            reduce using rule 153 (postfix_expression -> primary_expression .)
    CONST           reduce using rule 153 (postfix_expression -> primary_expression .)
    RESTRICT        reduce using rule 153 (postfix_expression -> primary_expression .)
    VOLATILE        reduce using rule 153 (postfix_expression -> primary_expression .)
    INLINE          reduce using rule 153 (postfix_expression -> primary_expression .)
    ENUM            reduce using rule 153 (postfix_expression -> primary_expression .)
    STRUCT          reduce using rule 153 (postfix_expression -> primary_expression .)
    UNION           reduce using rule 153 (postfix_expression -> primary_expression .)
    $end            reduce using rule 153 (postfix_expression -> primary_expression .)
    }               reduce using rule 153 (postfix_expression -> primary_expression .)
    )               reduce using rule 153 (postfix_expression -> primary_expression .)
    :               reduce using rule 153 (postfix_expression -> primary_expression .)


state 102

    (163) primary_expression -> IDENTIFIER .

    [               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    (               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    .               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 163 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 163 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 163 (primary_expression -> IDENTIFIER .)
    =               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 163 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 163 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 163 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 163 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 163 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 163 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 163 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 163 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 163 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 163 (primary_expression -> IDENTIFIER .)
    *               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    /               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    %               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    +               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    -               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 163 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 163 (primary_expression -> IDENTIFIER .)
    <               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    >               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    &               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    ^               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    |               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 163 (primary_expression -> IDENTIFIER .)
    ?               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    ;               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    ,               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    ]               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    MACRO           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    TYPEDEF         reduce using rule 163 (primary_expression -> IDENTIFIER .)
    EXTERN          reduce using rule 163 (primary_expression -> IDENTIFIER .)
    STATIC          reduce using rule 163 (primary_expression -> IDENTIFIER .)
    AUTO            reduce using rule 163 (primary_expression -> IDENTIFIER .)
    REGISTER        reduce using rule 163 (primary_expression -> IDENTIFIER .)
    VOID            reduce using rule 163 (primary_expression -> IDENTIFIER .)
    CHAR            reduce using rule 163 (primary_expression -> IDENTIFIER .)
    SHORT           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    INT             reduce using rule 163 (primary_expression -> IDENTIFIER .)
    LONG            reduce using rule 163 (primary_expression -> IDENTIFIER .)
    FLOAT           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    DOUBLE          reduce using rule 163 (primary_expression -> IDENTIFIER .)
    SIGNED          reduce using rule 163 (primary_expression -> IDENTIFIER .)
    UNSIGNED        reduce using rule 163 (primary_expression -> IDENTIFIER .)
    BOOL            reduce using rule 163 (primary_expression -> IDENTIFIER .)
    CONST           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    RESTRICT        reduce using rule 163 (primary_expression -> IDENTIFIER .)
    VOLATILE        reduce using rule 163 (primary_expression -> IDENTIFIER .)
    INLINE          reduce using rule 163 (primary_expression -> IDENTIFIER .)
    ENUM            reduce using rule 163 (primary_expression -> IDENTIFIER .)
    STRUCT          reduce using rule 163 (primary_expression -> IDENTIFIER .)
    UNION           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    $end            reduce using rule 163 (primary_expression -> IDENTIFIER .)
    }               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    )               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    :               reduce using rule 163 (primary_expression -> IDENTIFIER .)


state 103

    (147) unary_operator -> & .

    (               reduce using rule 147 (unary_operator -> & .)
    INC_OP          reduce using rule 147 (unary_operator -> & .)
    DEC_OP          reduce using rule 147 (unary_operator -> & .)
    SIZEOF          reduce using rule 147 (unary_operator -> & .)
    &               reduce using rule 147 (unary_operator -> & .)
    *               reduce using rule 147 (unary_operator -> & .)
    +               reduce using rule 147 (unary_operator -> & .)
    -               reduce using rule 147 (unary_operator -> & .)
    ~               reduce using rule 147 (unary_operator -> & .)
    !               reduce using rule 147 (unary_operator -> & .)
    IDENTIFIER      reduce using rule 147 (unary_operator -> & .)
    CONSTANT        reduce using rule 147 (unary_operator -> & .)
    STRING_LITERAL  reduce using rule 147 (unary_operator -> & .)


state 104

    (148) unary_operator -> * .

    (               reduce using rule 148 (unary_operator -> * .)
    INC_OP          reduce using rule 148 (unary_operator -> * .)
    DEC_OP          reduce using rule 148 (unary_operator -> * .)
    SIZEOF          reduce using rule 148 (unary_operator -> * .)
    &               reduce using rule 148 (unary_operator -> * .)
    *               reduce using rule 148 (unary_operator -> * .)
    +               reduce using rule 148 (unary_operator -> * .)
    -               reduce using rule 148 (unary_operator -> * .)
    ~               reduce using rule 148 (unary_operator -> * .)
    !               reduce using rule 148 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 148 (unary_operator -> * .)
    CONSTANT        reduce using rule 148 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 148 (unary_operator -> * .)


state 105

    (149) unary_operator -> + .

    (               reduce using rule 149 (unary_operator -> + .)
    INC_OP          reduce using rule 149 (unary_operator -> + .)
    DEC_OP          reduce using rule 149 (unary_operator -> + .)
    SIZEOF          reduce using rule 149 (unary_operator -> + .)
    &               reduce using rule 149 (unary_operator -> + .)
    *               reduce using rule 149 (unary_operator -> + .)
    +               reduce using rule 149 (unary_operator -> + .)
    -               reduce using rule 149 (unary_operator -> + .)
    ~               reduce using rule 149 (unary_operator -> + .)
    !               reduce using rule 149 (unary_operator -> + .)
    IDENTIFIER      reduce using rule 149 (unary_operator -> + .)
    CONSTANT        reduce using rule 149 (unary_operator -> + .)
    STRING_LITERAL  reduce using rule 149 (unary_operator -> + .)


state 106

    (150) unary_operator -> - .

    (               reduce using rule 150 (unary_operator -> - .)
    INC_OP          reduce using rule 150 (unary_operator -> - .)
    DEC_OP          reduce using rule 150 (unary_operator -> - .)
    SIZEOF          reduce using rule 150 (unary_operator -> - .)
    &               reduce using rule 150 (unary_operator -> - .)
    *               reduce using rule 150 (unary_operator -> - .)
    +               reduce using rule 150 (unary_operator -> - .)
    -               reduce using rule 150 (unary_operator -> - .)
    ~               reduce using rule 150 (unary_operator -> - .)
    !               reduce using rule 150 (unary_operator -> - .)
    IDENTIFIER      reduce using rule 150 (unary_operator -> - .)
    CONSTANT        reduce using rule 150 (unary_operator -> - .)
    STRING_LITERAL  reduce using rule 150 (unary_operator -> - .)


state 107

    (151) unary_operator -> ~ .

    (               reduce using rule 151 (unary_operator -> ~ .)
    INC_OP          reduce using rule 151 (unary_operator -> ~ .)
    DEC_OP          reduce using rule 151 (unary_operator -> ~ .)
    SIZEOF          reduce using rule 151 (unary_operator -> ~ .)
    &               reduce using rule 151 (unary_operator -> ~ .)
    *               reduce using rule 151 (unary_operator -> ~ .)
    +               reduce using rule 151 (unary_operator -> ~ .)
    -               reduce using rule 151 (unary_operator -> ~ .)
    ~               reduce using rule 151 (unary_operator -> ~ .)
    !               reduce using rule 151 (unary_operator -> ~ .)
    IDENTIFIER      reduce using rule 151 (unary_operator -> ~ .)
    CONSTANT        reduce using rule 151 (unary_operator -> ~ .)
    STRING_LITERAL  reduce using rule 151 (unary_operator -> ~ .)


state 108

    (152) unary_operator -> ! .

    (               reduce using rule 152 (unary_operator -> ! .)
    INC_OP          reduce using rule 152 (unary_operator -> ! .)
    DEC_OP          reduce using rule 152 (unary_operator -> ! .)
    SIZEOF          reduce using rule 152 (unary_operator -> ! .)
    &               reduce using rule 152 (unary_operator -> ! .)
    *               reduce using rule 152 (unary_operator -> ! .)
    +               reduce using rule 152 (unary_operator -> ! .)
    -               reduce using rule 152 (unary_operator -> ! .)
    ~               reduce using rule 152 (unary_operator -> ! .)
    !               reduce using rule 152 (unary_operator -> ! .)
    IDENTIFIER      reduce using rule 152 (unary_operator -> ! .)
    CONSTANT        reduce using rule 152 (unary_operator -> ! .)
    STRING_LITERAL  reduce using rule 152 (unary_operator -> ! .)


state 109

    (113) logical_and_expression -> inclusive_or_expression .
    (116) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    ?               reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    ;               reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    ,               reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    ]               reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    MACRO           reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    TYPEDEF         reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    EXTERN          reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    STATIC          reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    AUTO            reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    REGISTER        reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    VOID            reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    CHAR            reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    SHORT           reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    INT             reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    LONG            reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    FLOAT           reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    DOUBLE          reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    SIGNED          reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    UNSIGNED        reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    BOOL            reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    CONST           reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    RESTRICT        reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    VOLATILE        reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    INLINE          reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    ENUM            reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    STRUCT          reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    UNION           reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    $end            reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    }               reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    )               reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    :               reduce using rule 113 (logical_and_expression -> inclusive_or_expression .)
    |               shift and go to state 218


state 110

    (164) primary_expression -> CONSTANT .

    [               reduce using rule 164 (primary_expression -> CONSTANT .)
    (               reduce using rule 164 (primary_expression -> CONSTANT .)
    .               reduce using rule 164 (primary_expression -> CONSTANT .)
    PTR_OP          reduce using rule 164 (primary_expression -> CONSTANT .)
    INC_OP          reduce using rule 164 (primary_expression -> CONSTANT .)
    DEC_OP          reduce using rule 164 (primary_expression -> CONSTANT .)
    =               reduce using rule 164 (primary_expression -> CONSTANT .)
    MUL_ASSIGN      reduce using rule 164 (primary_expression -> CONSTANT .)
    DIV_ASSIGN      reduce using rule 164 (primary_expression -> CONSTANT .)
    MOD_ASSIGN      reduce using rule 164 (primary_expression -> CONSTANT .)
    ADD_ASSIGN      reduce using rule 164 (primary_expression -> CONSTANT .)
    SUB_ASSIGN      reduce using rule 164 (primary_expression -> CONSTANT .)
    LEFT_ASSIGN     reduce using rule 164 (primary_expression -> CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 164 (primary_expression -> CONSTANT .)
    AND_ASSIGN      reduce using rule 164 (primary_expression -> CONSTANT .)
    XOR_ASSIGN      reduce using rule 164 (primary_expression -> CONSTANT .)
    OR_ASSIGN       reduce using rule 164 (primary_expression -> CONSTANT .)
    *               reduce using rule 164 (primary_expression -> CONSTANT .)
    /               reduce using rule 164 (primary_expression -> CONSTANT .)
    %               reduce using rule 164 (primary_expression -> CONSTANT .)
    +               reduce using rule 164 (primary_expression -> CONSTANT .)
    -               reduce using rule 164 (primary_expression -> CONSTANT .)
    LEFT_OP         reduce using rule 164 (primary_expression -> CONSTANT .)
    RIGHT_OP        reduce using rule 164 (primary_expression -> CONSTANT .)
    <               reduce using rule 164 (primary_expression -> CONSTANT .)
    >               reduce using rule 164 (primary_expression -> CONSTANT .)
    LE_OP           reduce using rule 164 (primary_expression -> CONSTANT .)
    GE_OP           reduce using rule 164 (primary_expression -> CONSTANT .)
    EQ_OP           reduce using rule 164 (primary_expression -> CONSTANT .)
    NE_OP           reduce using rule 164 (primary_expression -> CONSTANT .)
    &               reduce using rule 164 (primary_expression -> CONSTANT .)
    ^               reduce using rule 164 (primary_expression -> CONSTANT .)
    |               reduce using rule 164 (primary_expression -> CONSTANT .)
    AND_OP          reduce using rule 164 (primary_expression -> CONSTANT .)
    ?               reduce using rule 164 (primary_expression -> CONSTANT .)
    OR_OP           reduce using rule 164 (primary_expression -> CONSTANT .)
    ;               reduce using rule 164 (primary_expression -> CONSTANT .)
    ,               reduce using rule 164 (primary_expression -> CONSTANT .)
    ]               reduce using rule 164 (primary_expression -> CONSTANT .)
    MACRO           reduce using rule 164 (primary_expression -> CONSTANT .)
    TYPEDEF         reduce using rule 164 (primary_expression -> CONSTANT .)
    EXTERN          reduce using rule 164 (primary_expression -> CONSTANT .)
    STATIC          reduce using rule 164 (primary_expression -> CONSTANT .)
    AUTO            reduce using rule 164 (primary_expression -> CONSTANT .)
    REGISTER        reduce using rule 164 (primary_expression -> CONSTANT .)
    VOID            reduce using rule 164 (primary_expression -> CONSTANT .)
    CHAR            reduce using rule 164 (primary_expression -> CONSTANT .)
    SHORT           reduce using rule 164 (primary_expression -> CONSTANT .)
    INT             reduce using rule 164 (primary_expression -> CONSTANT .)
    LONG            reduce using rule 164 (primary_expression -> CONSTANT .)
    FLOAT           reduce using rule 164 (primary_expression -> CONSTANT .)
    DOUBLE          reduce using rule 164 (primary_expression -> CONSTANT .)
    SIGNED          reduce using rule 164 (primary_expression -> CONSTANT .)
    UNSIGNED        reduce using rule 164 (primary_expression -> CONSTANT .)
    BOOL            reduce using rule 164 (primary_expression -> CONSTANT .)
    CONST           reduce using rule 164 (primary_expression -> CONSTANT .)
    RESTRICT        reduce using rule 164 (primary_expression -> CONSTANT .)
    VOLATILE        reduce using rule 164 (primary_expression -> CONSTANT .)
    INLINE          reduce using rule 164 (primary_expression -> CONSTANT .)
    ENUM            reduce using rule 164 (primary_expression -> CONSTANT .)
    STRUCT          reduce using rule 164 (primary_expression -> CONSTANT .)
    UNION           reduce using rule 164 (primary_expression -> CONSTANT .)
    $end            reduce using rule 164 (primary_expression -> CONSTANT .)
    }               reduce using rule 164 (primary_expression -> CONSTANT .)
    )               reduce using rule 164 (primary_expression -> CONSTANT .)
    :               reduce using rule 164 (primary_expression -> CONSTANT .)


state 111

    (165) primary_expression -> STRING_LITERAL .

    [               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    (               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    .               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    PTR_OP          reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    INC_OP          reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    DEC_OP          reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    =               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    MUL_ASSIGN      reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    DIV_ASSIGN      reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    MOD_ASSIGN      reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    ADD_ASSIGN      reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    SUB_ASSIGN      reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    LEFT_ASSIGN     reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    RIGHT_ASSIGN    reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    AND_ASSIGN      reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    XOR_ASSIGN      reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    OR_ASSIGN       reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    *               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    /               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    %               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    +               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    -               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    LEFT_OP         reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    RIGHT_OP        reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    <               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    >               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    LE_OP           reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    GE_OP           reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    EQ_OP           reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    NE_OP           reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    &               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    ^               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    |               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    AND_OP          reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    ?               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    OR_OP           reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    ;               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    ,               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    ]               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    MACRO           reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    TYPEDEF         reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    EXTERN          reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    STATIC          reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    AUTO            reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    REGISTER        reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    VOID            reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    CHAR            reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    SHORT           reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    INT             reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    LONG            reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    FLOAT           reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    DOUBLE          reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    SIGNED          reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    UNSIGNED        reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    BOOL            reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    CONST           reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    RESTRICT        reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    VOLATILE        reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    INLINE          reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    ENUM            reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    STRUCT          reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    UNION           reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    $end            reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    }               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    )               reduce using rule 165 (primary_expression -> STRING_LITERAL .)
    :               reduce using rule 165 (primary_expression -> STRING_LITERAL .)


state 112

    (115) inclusive_or_expression -> exclusive_or_expression .
    (118) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    ?               reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    ;               reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    ,               reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    ]               reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    MACRO           reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    TYPEDEF         reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    EXTERN          reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    STATIC          reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    AUTO            reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    REGISTER        reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    VOID            reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    CHAR            reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    SHORT           reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    INT             reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    LONG            reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    FLOAT           reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    DOUBLE          reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    SIGNED          reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    UNSIGNED        reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    BOOL            reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    CONST           reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    RESTRICT        reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    VOLATILE        reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    INLINE          reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    ENUM            reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    STRUCT          reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    UNION           reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    $end            reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    }               reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    )               reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    :               reduce using rule 115 (inclusive_or_expression -> exclusive_or_expression .)
    ^               shift and go to state 219


state 113

    (117) exclusive_or_expression -> and_expression .
    (120) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 117 (exclusive_or_expression -> and_expression .)
    |               reduce using rule 117 (exclusive_or_expression -> and_expression .)
    AND_OP          reduce using rule 117 (exclusive_or_expression -> and_expression .)
    ?               reduce using rule 117 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 117 (exclusive_or_expression -> and_expression .)
    ;               reduce using rule 117 (exclusive_or_expression -> and_expression .)
    ,               reduce using rule 117 (exclusive_or_expression -> and_expression .)
    ]               reduce using rule 117 (exclusive_or_expression -> and_expression .)
    MACRO           reduce using rule 117 (exclusive_or_expression -> and_expression .)
    TYPEDEF         reduce using rule 117 (exclusive_or_expression -> and_expression .)
    EXTERN          reduce using rule 117 (exclusive_or_expression -> and_expression .)
    STATIC          reduce using rule 117 (exclusive_or_expression -> and_expression .)
    AUTO            reduce using rule 117 (exclusive_or_expression -> and_expression .)
    REGISTER        reduce using rule 117 (exclusive_or_expression -> and_expression .)
    VOID            reduce using rule 117 (exclusive_or_expression -> and_expression .)
    CHAR            reduce using rule 117 (exclusive_or_expression -> and_expression .)
    SHORT           reduce using rule 117 (exclusive_or_expression -> and_expression .)
    INT             reduce using rule 117 (exclusive_or_expression -> and_expression .)
    LONG            reduce using rule 117 (exclusive_or_expression -> and_expression .)
    FLOAT           reduce using rule 117 (exclusive_or_expression -> and_expression .)
    DOUBLE          reduce using rule 117 (exclusive_or_expression -> and_expression .)
    SIGNED          reduce using rule 117 (exclusive_or_expression -> and_expression .)
    UNSIGNED        reduce using rule 117 (exclusive_or_expression -> and_expression .)
    BOOL            reduce using rule 117 (exclusive_or_expression -> and_expression .)
    CONST           reduce using rule 117 (exclusive_or_expression -> and_expression .)
    RESTRICT        reduce using rule 117 (exclusive_or_expression -> and_expression .)
    VOLATILE        reduce using rule 117 (exclusive_or_expression -> and_expression .)
    INLINE          reduce using rule 117 (exclusive_or_expression -> and_expression .)
    ENUM            reduce using rule 117 (exclusive_or_expression -> and_expression .)
    STRUCT          reduce using rule 117 (exclusive_or_expression -> and_expression .)
    UNION           reduce using rule 117 (exclusive_or_expression -> and_expression .)
    $end            reduce using rule 117 (exclusive_or_expression -> and_expression .)
    }               reduce using rule 117 (exclusive_or_expression -> and_expression .)
    )               reduce using rule 117 (exclusive_or_expression -> and_expression .)
    :               reduce using rule 117 (exclusive_or_expression -> and_expression .)
    &               shift and go to state 220


state 114

    (119) and_expression -> equality_expression .
    (122) equality_expression -> equality_expression . EQ_OP relational_expression
    (123) equality_expression -> equality_expression . NE_OP relational_expression

    &               reduce using rule 119 (and_expression -> equality_expression .)
    ^               reduce using rule 119 (and_expression -> equality_expression .)
    |               reduce using rule 119 (and_expression -> equality_expression .)
    AND_OP          reduce using rule 119 (and_expression -> equality_expression .)
    ?               reduce using rule 119 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 119 (and_expression -> equality_expression .)
    ;               reduce using rule 119 (and_expression -> equality_expression .)
    ,               reduce using rule 119 (and_expression -> equality_expression .)
    ]               reduce using rule 119 (and_expression -> equality_expression .)
    MACRO           reduce using rule 119 (and_expression -> equality_expression .)
    TYPEDEF         reduce using rule 119 (and_expression -> equality_expression .)
    EXTERN          reduce using rule 119 (and_expression -> equality_expression .)
    STATIC          reduce using rule 119 (and_expression -> equality_expression .)
    AUTO            reduce using rule 119 (and_expression -> equality_expression .)
    REGISTER        reduce using rule 119 (and_expression -> equality_expression .)
    VOID            reduce using rule 119 (and_expression -> equality_expression .)
    CHAR            reduce using rule 119 (and_expression -> equality_expression .)
    SHORT           reduce using rule 119 (and_expression -> equality_expression .)
    INT             reduce using rule 119 (and_expression -> equality_expression .)
    LONG            reduce using rule 119 (and_expression -> equality_expression .)
    FLOAT           reduce using rule 119 (and_expression -> equality_expression .)
    DOUBLE          reduce using rule 119 (and_expression -> equality_expression .)
    SIGNED          reduce using rule 119 (and_expression -> equality_expression .)
    UNSIGNED        reduce using rule 119 (and_expression -> equality_expression .)
    BOOL            reduce using rule 119 (and_expression -> equality_expression .)
    CONST           reduce using rule 119 (and_expression -> equality_expression .)
    RESTRICT        reduce using rule 119 (and_expression -> equality_expression .)
    VOLATILE        reduce using rule 119 (and_expression -> equality_expression .)
    INLINE          reduce using rule 119 (and_expression -> equality_expression .)
    ENUM            reduce using rule 119 (and_expression -> equality_expression .)
    STRUCT          reduce using rule 119 (and_expression -> equality_expression .)
    UNION           reduce using rule 119 (and_expression -> equality_expression .)
    $end            reduce using rule 119 (and_expression -> equality_expression .)
    }               reduce using rule 119 (and_expression -> equality_expression .)
    )               reduce using rule 119 (and_expression -> equality_expression .)
    :               reduce using rule 119 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 221
    NE_OP           shift and go to state 222


state 115

    (121) equality_expression -> relational_expression .
    (125) relational_expression -> relational_expression . < shift_expression
    (126) relational_expression -> relational_expression . > shift_expression
    (127) relational_expression -> relational_expression . LE_OP shift_expression
    (128) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 121 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 121 (equality_expression -> relational_expression .)
    &               reduce using rule 121 (equality_expression -> relational_expression .)
    ^               reduce using rule 121 (equality_expression -> relational_expression .)
    |               reduce using rule 121 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 121 (equality_expression -> relational_expression .)
    ?               reduce using rule 121 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 121 (equality_expression -> relational_expression .)
    ;               reduce using rule 121 (equality_expression -> relational_expression .)
    ,               reduce using rule 121 (equality_expression -> relational_expression .)
    ]               reduce using rule 121 (equality_expression -> relational_expression .)
    MACRO           reduce using rule 121 (equality_expression -> relational_expression .)
    TYPEDEF         reduce using rule 121 (equality_expression -> relational_expression .)
    EXTERN          reduce using rule 121 (equality_expression -> relational_expression .)
    STATIC          reduce using rule 121 (equality_expression -> relational_expression .)
    AUTO            reduce using rule 121 (equality_expression -> relational_expression .)
    REGISTER        reduce using rule 121 (equality_expression -> relational_expression .)
    VOID            reduce using rule 121 (equality_expression -> relational_expression .)
    CHAR            reduce using rule 121 (equality_expression -> relational_expression .)
    SHORT           reduce using rule 121 (equality_expression -> relational_expression .)
    INT             reduce using rule 121 (equality_expression -> relational_expression .)
    LONG            reduce using rule 121 (equality_expression -> relational_expression .)
    FLOAT           reduce using rule 121 (equality_expression -> relational_expression .)
    DOUBLE          reduce using rule 121 (equality_expression -> relational_expression .)
    SIGNED          reduce using rule 121 (equality_expression -> relational_expression .)
    UNSIGNED        reduce using rule 121 (equality_expression -> relational_expression .)
    BOOL            reduce using rule 121 (equality_expression -> relational_expression .)
    CONST           reduce using rule 121 (equality_expression -> relational_expression .)
    RESTRICT        reduce using rule 121 (equality_expression -> relational_expression .)
    VOLATILE        reduce using rule 121 (equality_expression -> relational_expression .)
    INLINE          reduce using rule 121 (equality_expression -> relational_expression .)
    ENUM            reduce using rule 121 (equality_expression -> relational_expression .)
    STRUCT          reduce using rule 121 (equality_expression -> relational_expression .)
    UNION           reduce using rule 121 (equality_expression -> relational_expression .)
    $end            reduce using rule 121 (equality_expression -> relational_expression .)
    }               reduce using rule 121 (equality_expression -> relational_expression .)
    )               reduce using rule 121 (equality_expression -> relational_expression .)
    :               reduce using rule 121 (equality_expression -> relational_expression .)
    <               shift and go to state 223
    >               shift and go to state 224
    LE_OP           shift and go to state 225
    GE_OP           shift and go to state 226


state 116

    (124) relational_expression -> shift_expression .
    (130) shift_expression -> shift_expression . LEFT_OP additive_expression
    (131) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 124 (relational_expression -> shift_expression .)
    >               reduce using rule 124 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 124 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 124 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 124 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 124 (relational_expression -> shift_expression .)
    &               reduce using rule 124 (relational_expression -> shift_expression .)
    ^               reduce using rule 124 (relational_expression -> shift_expression .)
    |               reduce using rule 124 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 124 (relational_expression -> shift_expression .)
    ?               reduce using rule 124 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 124 (relational_expression -> shift_expression .)
    ;               reduce using rule 124 (relational_expression -> shift_expression .)
    ,               reduce using rule 124 (relational_expression -> shift_expression .)
    ]               reduce using rule 124 (relational_expression -> shift_expression .)
    MACRO           reduce using rule 124 (relational_expression -> shift_expression .)
    TYPEDEF         reduce using rule 124 (relational_expression -> shift_expression .)
    EXTERN          reduce using rule 124 (relational_expression -> shift_expression .)
    STATIC          reduce using rule 124 (relational_expression -> shift_expression .)
    AUTO            reduce using rule 124 (relational_expression -> shift_expression .)
    REGISTER        reduce using rule 124 (relational_expression -> shift_expression .)
    VOID            reduce using rule 124 (relational_expression -> shift_expression .)
    CHAR            reduce using rule 124 (relational_expression -> shift_expression .)
    SHORT           reduce using rule 124 (relational_expression -> shift_expression .)
    INT             reduce using rule 124 (relational_expression -> shift_expression .)
    LONG            reduce using rule 124 (relational_expression -> shift_expression .)
    FLOAT           reduce using rule 124 (relational_expression -> shift_expression .)
    DOUBLE          reduce using rule 124 (relational_expression -> shift_expression .)
    SIGNED          reduce using rule 124 (relational_expression -> shift_expression .)
    UNSIGNED        reduce using rule 124 (relational_expression -> shift_expression .)
    BOOL            reduce using rule 124 (relational_expression -> shift_expression .)
    CONST           reduce using rule 124 (relational_expression -> shift_expression .)
    RESTRICT        reduce using rule 124 (relational_expression -> shift_expression .)
    VOLATILE        reduce using rule 124 (relational_expression -> shift_expression .)
    INLINE          reduce using rule 124 (relational_expression -> shift_expression .)
    ENUM            reduce using rule 124 (relational_expression -> shift_expression .)
    STRUCT          reduce using rule 124 (relational_expression -> shift_expression .)
    UNION           reduce using rule 124 (relational_expression -> shift_expression .)
    $end            reduce using rule 124 (relational_expression -> shift_expression .)
    }               reduce using rule 124 (relational_expression -> shift_expression .)
    )               reduce using rule 124 (relational_expression -> shift_expression .)
    :               reduce using rule 124 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 227
    RIGHT_OP        shift and go to state 228


state 117

    (129) shift_expression -> additive_expression .
    (133) additive_expression -> additive_expression . + multiplicative_expression
    (134) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 129 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 129 (shift_expression -> additive_expression .)
    <               reduce using rule 129 (shift_expression -> additive_expression .)
    >               reduce using rule 129 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 129 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 129 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 129 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 129 (shift_expression -> additive_expression .)
    &               reduce using rule 129 (shift_expression -> additive_expression .)
    ^               reduce using rule 129 (shift_expression -> additive_expression .)
    |               reduce using rule 129 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 129 (shift_expression -> additive_expression .)
    ?               reduce using rule 129 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 129 (shift_expression -> additive_expression .)
    ;               reduce using rule 129 (shift_expression -> additive_expression .)
    ,               reduce using rule 129 (shift_expression -> additive_expression .)
    ]               reduce using rule 129 (shift_expression -> additive_expression .)
    MACRO           reduce using rule 129 (shift_expression -> additive_expression .)
    TYPEDEF         reduce using rule 129 (shift_expression -> additive_expression .)
    EXTERN          reduce using rule 129 (shift_expression -> additive_expression .)
    STATIC          reduce using rule 129 (shift_expression -> additive_expression .)
    AUTO            reduce using rule 129 (shift_expression -> additive_expression .)
    REGISTER        reduce using rule 129 (shift_expression -> additive_expression .)
    VOID            reduce using rule 129 (shift_expression -> additive_expression .)
    CHAR            reduce using rule 129 (shift_expression -> additive_expression .)
    SHORT           reduce using rule 129 (shift_expression -> additive_expression .)
    INT             reduce using rule 129 (shift_expression -> additive_expression .)
    LONG            reduce using rule 129 (shift_expression -> additive_expression .)
    FLOAT           reduce using rule 129 (shift_expression -> additive_expression .)
    DOUBLE          reduce using rule 129 (shift_expression -> additive_expression .)
    SIGNED          reduce using rule 129 (shift_expression -> additive_expression .)
    UNSIGNED        reduce using rule 129 (shift_expression -> additive_expression .)
    BOOL            reduce using rule 129 (shift_expression -> additive_expression .)
    CONST           reduce using rule 129 (shift_expression -> additive_expression .)
    RESTRICT        reduce using rule 129 (shift_expression -> additive_expression .)
    VOLATILE        reduce using rule 129 (shift_expression -> additive_expression .)
    INLINE          reduce using rule 129 (shift_expression -> additive_expression .)
    ENUM            reduce using rule 129 (shift_expression -> additive_expression .)
    STRUCT          reduce using rule 129 (shift_expression -> additive_expression .)
    UNION           reduce using rule 129 (shift_expression -> additive_expression .)
    $end            reduce using rule 129 (shift_expression -> additive_expression .)
    }               reduce using rule 129 (shift_expression -> additive_expression .)
    )               reduce using rule 129 (shift_expression -> additive_expression .)
    :               reduce using rule 129 (shift_expression -> additive_expression .)
    +               shift and go to state 229
    -               shift and go to state 230


state 118

    (132) additive_expression -> multiplicative_expression .
    (136) multiplicative_expression -> multiplicative_expression . * cast_expression
    (137) multiplicative_expression -> multiplicative_expression . / cast_expression
    (138) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 132 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 132 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 132 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 132 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 132 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 132 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 132 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 132 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 132 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 132 (additive_expression -> multiplicative_expression .)
    &               reduce using rule 132 (additive_expression -> multiplicative_expression .)
    ^               reduce using rule 132 (additive_expression -> multiplicative_expression .)
    |               reduce using rule 132 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 132 (additive_expression -> multiplicative_expression .)
    ?               reduce using rule 132 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 132 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 132 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 132 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 132 (additive_expression -> multiplicative_expression .)
    MACRO           reduce using rule 132 (additive_expression -> multiplicative_expression .)
    TYPEDEF         reduce using rule 132 (additive_expression -> multiplicative_expression .)
    EXTERN          reduce using rule 132 (additive_expression -> multiplicative_expression .)
    STATIC          reduce using rule 132 (additive_expression -> multiplicative_expression .)
    AUTO            reduce using rule 132 (additive_expression -> multiplicative_expression .)
    REGISTER        reduce using rule 132 (additive_expression -> multiplicative_expression .)
    VOID            reduce using rule 132 (additive_expression -> multiplicative_expression .)
    CHAR            reduce using rule 132 (additive_expression -> multiplicative_expression .)
    SHORT           reduce using rule 132 (additive_expression -> multiplicative_expression .)
    INT             reduce using rule 132 (additive_expression -> multiplicative_expression .)
    LONG            reduce using rule 132 (additive_expression -> multiplicative_expression .)
    FLOAT           reduce using rule 132 (additive_expression -> multiplicative_expression .)
    DOUBLE          reduce using rule 132 (additive_expression -> multiplicative_expression .)
    SIGNED          reduce using rule 132 (additive_expression -> multiplicative_expression .)
    UNSIGNED        reduce using rule 132 (additive_expression -> multiplicative_expression .)
    BOOL            reduce using rule 132 (additive_expression -> multiplicative_expression .)
    CONST           reduce using rule 132 (additive_expression -> multiplicative_expression .)
    RESTRICT        reduce using rule 132 (additive_expression -> multiplicative_expression .)
    VOLATILE        reduce using rule 132 (additive_expression -> multiplicative_expression .)
    INLINE          reduce using rule 132 (additive_expression -> multiplicative_expression .)
    ENUM            reduce using rule 132 (additive_expression -> multiplicative_expression .)
    STRUCT          reduce using rule 132 (additive_expression -> multiplicative_expression .)
    UNION           reduce using rule 132 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 132 (additive_expression -> multiplicative_expression .)
    }               reduce using rule 132 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 132 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 132 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 231
    /               shift and go to state 232
    %               shift and go to state 233


state 119

    (210) compound_statement -> { } .

    MACRO           reduce using rule 210 (compound_statement -> { } .)
    TYPEDEF         reduce using rule 210 (compound_statement -> { } .)
    EXTERN          reduce using rule 210 (compound_statement -> { } .)
    STATIC          reduce using rule 210 (compound_statement -> { } .)
    AUTO            reduce using rule 210 (compound_statement -> { } .)
    REGISTER        reduce using rule 210 (compound_statement -> { } .)
    VOID            reduce using rule 210 (compound_statement -> { } .)
    CHAR            reduce using rule 210 (compound_statement -> { } .)
    SHORT           reduce using rule 210 (compound_statement -> { } .)
    INT             reduce using rule 210 (compound_statement -> { } .)
    LONG            reduce using rule 210 (compound_statement -> { } .)
    FLOAT           reduce using rule 210 (compound_statement -> { } .)
    DOUBLE          reduce using rule 210 (compound_statement -> { } .)
    SIGNED          reduce using rule 210 (compound_statement -> { } .)
    UNSIGNED        reduce using rule 210 (compound_statement -> { } .)
    BOOL            reduce using rule 210 (compound_statement -> { } .)
    CONST           reduce using rule 210 (compound_statement -> { } .)
    RESTRICT        reduce using rule 210 (compound_statement -> { } .)
    VOLATILE        reduce using rule 210 (compound_statement -> { } .)
    INLINE          reduce using rule 210 (compound_statement -> { } .)
    ENUM            reduce using rule 210 (compound_statement -> { } .)
    STRUCT          reduce using rule 210 (compound_statement -> { } .)
    UNION           reduce using rule 210 (compound_statement -> { } .)
    $end            reduce using rule 210 (compound_statement -> { } .)
    }               reduce using rule 210 (compound_statement -> { } .)
    IDENTIFIER      reduce using rule 210 (compound_statement -> { } .)
    CASE            reduce using rule 210 (compound_statement -> { } .)
    DEFAULT         reduce using rule 210 (compound_statement -> { } .)
    {               reduce using rule 210 (compound_statement -> { } .)
    ;               reduce using rule 210 (compound_statement -> { } .)
    IF              reduce using rule 210 (compound_statement -> { } .)
    SWITCH          reduce using rule 210 (compound_statement -> { } .)
    WHILE           reduce using rule 210 (compound_statement -> { } .)
    DO              reduce using rule 210 (compound_statement -> { } .)
    FOR             reduce using rule 210 (compound_statement -> { } .)
    GOTO            reduce using rule 210 (compound_statement -> { } .)
    CONTINUE        reduce using rule 210 (compound_statement -> { } .)
    BREAK           reduce using rule 210 (compound_statement -> { } .)
    RETURN          reduce using rule 210 (compound_statement -> { } .)
    INC_OP          reduce using rule 210 (compound_statement -> { } .)
    DEC_OP          reduce using rule 210 (compound_statement -> { } .)
    SIZEOF          reduce using rule 210 (compound_statement -> { } .)
    (               reduce using rule 210 (compound_statement -> { } .)
    &               reduce using rule 210 (compound_statement -> { } .)
    *               reduce using rule 210 (compound_statement -> { } .)
    +               reduce using rule 210 (compound_statement -> { } .)
    -               reduce using rule 210 (compound_statement -> { } .)
    ~               reduce using rule 210 (compound_statement -> { } .)
    !               reduce using rule 210 (compound_statement -> { } .)
    CONSTANT        reduce using rule 210 (compound_statement -> { } .)
    STRING_LITERAL  reduce using rule 210 (compound_statement -> { } .)
    ELSE            reduce using rule 210 (compound_statement -> { } .)


state 120

    (211) compound_statement -> { block_item_list . }
    (213) block_item_list -> block_item_list . block_item
    (214) block_item -> . declaration
    (215) block_item -> . statement
    (11) declaration -> . declaration_specifiers ;
    (12) declaration -> . declaration_specifiers init_declarator_list ;
    (216) statement -> . labeled_statement
    (217) statement -> . compound_statement
    (218) statement -> . expression_statement
    (219) statement -> . selection_statement
    (220) statement -> . iteration_statement
    (221) statement -> . jump_statement
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (222) labeled_statement -> . IDENTIFIER : statement
    (223) labeled_statement -> . CASE constant_expression : statement
    (224) labeled_statement -> . DEFAULT : statement
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (227) selection_statement -> . IF ( expression ) statement
    (228) selection_statement -> . IF ( expression ) statement ELSE statement
    (229) selection_statement -> . SWITCH ( expression ) statement
    (230) iteration_statement -> . WHILE ( expression ) statement
    (231) iteration_statement -> . DO statement WHILE ( expression ) ;
    (232) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (233) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (235) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (236) jump_statement -> . GOTO IDENTIFIER ;
    (237) jump_statement -> . CONTINUE ;
    (238) jump_statement -> . BREAK ;
    (239) jump_statement -> . RETURN ;
    (240) jump_statement -> . RETURN expression ;
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 234
    IDENTIFIER      shift and go to state 131
    CASE            shift and go to state 132
    DEFAULT         shift and go to state 133
    {               shift and go to state 61
    ;               shift and go to state 124
    IF              shift and go to state 135
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 137
    DO              shift and go to state 138
    FOR             shift and go to state 139
    GOTO            shift and go to state 140
    CONTINUE        shift and go to state 141
    BREAK           shift and go to state 142
    RETURN          shift and go to state 143
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    block_item                     shift and go to state 235
    declaration                    shift and go to state 122
    statement                      shift and go to state 123
    declaration_specifiers         shift and go to state 56
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    expression                     shift and go to state 134
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    assignment_expression          shift and go to state 144
    struct_or_union                shift and go to state 33
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 121

    (212) block_item_list -> block_item .

    }               reduce using rule 212 (block_item_list -> block_item .)
    IDENTIFIER      reduce using rule 212 (block_item_list -> block_item .)
    CASE            reduce using rule 212 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 212 (block_item_list -> block_item .)
    {               reduce using rule 212 (block_item_list -> block_item .)
    ;               reduce using rule 212 (block_item_list -> block_item .)
    IF              reduce using rule 212 (block_item_list -> block_item .)
    SWITCH          reduce using rule 212 (block_item_list -> block_item .)
    WHILE           reduce using rule 212 (block_item_list -> block_item .)
    DO              reduce using rule 212 (block_item_list -> block_item .)
    FOR             reduce using rule 212 (block_item_list -> block_item .)
    GOTO            reduce using rule 212 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 212 (block_item_list -> block_item .)
    BREAK           reduce using rule 212 (block_item_list -> block_item .)
    RETURN          reduce using rule 212 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 212 (block_item_list -> block_item .)
    EXTERN          reduce using rule 212 (block_item_list -> block_item .)
    STATIC          reduce using rule 212 (block_item_list -> block_item .)
    AUTO            reduce using rule 212 (block_item_list -> block_item .)
    REGISTER        reduce using rule 212 (block_item_list -> block_item .)
    VOID            reduce using rule 212 (block_item_list -> block_item .)
    CHAR            reduce using rule 212 (block_item_list -> block_item .)
    SHORT           reduce using rule 212 (block_item_list -> block_item .)
    INT             reduce using rule 212 (block_item_list -> block_item .)
    LONG            reduce using rule 212 (block_item_list -> block_item .)
    FLOAT           reduce using rule 212 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 212 (block_item_list -> block_item .)
    SIGNED          reduce using rule 212 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 212 (block_item_list -> block_item .)
    BOOL            reduce using rule 212 (block_item_list -> block_item .)
    CONST           reduce using rule 212 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 212 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 212 (block_item_list -> block_item .)
    INLINE          reduce using rule 212 (block_item_list -> block_item .)
    ENUM            reduce using rule 212 (block_item_list -> block_item .)
    STRUCT          reduce using rule 212 (block_item_list -> block_item .)
    UNION           reduce using rule 212 (block_item_list -> block_item .)
    INC_OP          reduce using rule 212 (block_item_list -> block_item .)
    DEC_OP          reduce using rule 212 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 212 (block_item_list -> block_item .)
    (               reduce using rule 212 (block_item_list -> block_item .)
    &               reduce using rule 212 (block_item_list -> block_item .)
    *               reduce using rule 212 (block_item_list -> block_item .)
    +               reduce using rule 212 (block_item_list -> block_item .)
    -               reduce using rule 212 (block_item_list -> block_item .)
    ~               reduce using rule 212 (block_item_list -> block_item .)
    !               reduce using rule 212 (block_item_list -> block_item .)
    CONSTANT        reduce using rule 212 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 212 (block_item_list -> block_item .)


state 122

    (214) block_item -> declaration .

    }               reduce using rule 214 (block_item -> declaration .)
    IDENTIFIER      reduce using rule 214 (block_item -> declaration .)
    CASE            reduce using rule 214 (block_item -> declaration .)
    DEFAULT         reduce using rule 214 (block_item -> declaration .)
    {               reduce using rule 214 (block_item -> declaration .)
    ;               reduce using rule 214 (block_item -> declaration .)
    IF              reduce using rule 214 (block_item -> declaration .)
    SWITCH          reduce using rule 214 (block_item -> declaration .)
    WHILE           reduce using rule 214 (block_item -> declaration .)
    DO              reduce using rule 214 (block_item -> declaration .)
    FOR             reduce using rule 214 (block_item -> declaration .)
    GOTO            reduce using rule 214 (block_item -> declaration .)
    CONTINUE        reduce using rule 214 (block_item -> declaration .)
    BREAK           reduce using rule 214 (block_item -> declaration .)
    RETURN          reduce using rule 214 (block_item -> declaration .)
    TYPEDEF         reduce using rule 214 (block_item -> declaration .)
    EXTERN          reduce using rule 214 (block_item -> declaration .)
    STATIC          reduce using rule 214 (block_item -> declaration .)
    AUTO            reduce using rule 214 (block_item -> declaration .)
    REGISTER        reduce using rule 214 (block_item -> declaration .)
    VOID            reduce using rule 214 (block_item -> declaration .)
    CHAR            reduce using rule 214 (block_item -> declaration .)
    SHORT           reduce using rule 214 (block_item -> declaration .)
    INT             reduce using rule 214 (block_item -> declaration .)
    LONG            reduce using rule 214 (block_item -> declaration .)
    FLOAT           reduce using rule 214 (block_item -> declaration .)
    DOUBLE          reduce using rule 214 (block_item -> declaration .)
    SIGNED          reduce using rule 214 (block_item -> declaration .)
    UNSIGNED        reduce using rule 214 (block_item -> declaration .)
    BOOL            reduce using rule 214 (block_item -> declaration .)
    CONST           reduce using rule 214 (block_item -> declaration .)
    RESTRICT        reduce using rule 214 (block_item -> declaration .)
    VOLATILE        reduce using rule 214 (block_item -> declaration .)
    INLINE          reduce using rule 214 (block_item -> declaration .)
    ENUM            reduce using rule 214 (block_item -> declaration .)
    STRUCT          reduce using rule 214 (block_item -> declaration .)
    UNION           reduce using rule 214 (block_item -> declaration .)
    INC_OP          reduce using rule 214 (block_item -> declaration .)
    DEC_OP          reduce using rule 214 (block_item -> declaration .)
    SIZEOF          reduce using rule 214 (block_item -> declaration .)
    (               reduce using rule 214 (block_item -> declaration .)
    &               reduce using rule 214 (block_item -> declaration .)
    *               reduce using rule 214 (block_item -> declaration .)
    +               reduce using rule 214 (block_item -> declaration .)
    -               reduce using rule 214 (block_item -> declaration .)
    ~               reduce using rule 214 (block_item -> declaration .)
    !               reduce using rule 214 (block_item -> declaration .)
    CONSTANT        reduce using rule 214 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 214 (block_item -> declaration .)


state 123

    (215) block_item -> statement .

    }               reduce using rule 215 (block_item -> statement .)
    IDENTIFIER      reduce using rule 215 (block_item -> statement .)
    CASE            reduce using rule 215 (block_item -> statement .)
    DEFAULT         reduce using rule 215 (block_item -> statement .)
    {               reduce using rule 215 (block_item -> statement .)
    ;               reduce using rule 215 (block_item -> statement .)
    IF              reduce using rule 215 (block_item -> statement .)
    SWITCH          reduce using rule 215 (block_item -> statement .)
    WHILE           reduce using rule 215 (block_item -> statement .)
    DO              reduce using rule 215 (block_item -> statement .)
    FOR             reduce using rule 215 (block_item -> statement .)
    GOTO            reduce using rule 215 (block_item -> statement .)
    CONTINUE        reduce using rule 215 (block_item -> statement .)
    BREAK           reduce using rule 215 (block_item -> statement .)
    RETURN          reduce using rule 215 (block_item -> statement .)
    TYPEDEF         reduce using rule 215 (block_item -> statement .)
    EXTERN          reduce using rule 215 (block_item -> statement .)
    STATIC          reduce using rule 215 (block_item -> statement .)
    AUTO            reduce using rule 215 (block_item -> statement .)
    REGISTER        reduce using rule 215 (block_item -> statement .)
    VOID            reduce using rule 215 (block_item -> statement .)
    CHAR            reduce using rule 215 (block_item -> statement .)
    SHORT           reduce using rule 215 (block_item -> statement .)
    INT             reduce using rule 215 (block_item -> statement .)
    LONG            reduce using rule 215 (block_item -> statement .)
    FLOAT           reduce using rule 215 (block_item -> statement .)
    DOUBLE          reduce using rule 215 (block_item -> statement .)
    SIGNED          reduce using rule 215 (block_item -> statement .)
    UNSIGNED        reduce using rule 215 (block_item -> statement .)
    BOOL            reduce using rule 215 (block_item -> statement .)
    CONST           reduce using rule 215 (block_item -> statement .)
    RESTRICT        reduce using rule 215 (block_item -> statement .)
    VOLATILE        reduce using rule 215 (block_item -> statement .)
    INLINE          reduce using rule 215 (block_item -> statement .)
    ENUM            reduce using rule 215 (block_item -> statement .)
    STRUCT          reduce using rule 215 (block_item -> statement .)
    UNION           reduce using rule 215 (block_item -> statement .)
    INC_OP          reduce using rule 215 (block_item -> statement .)
    DEC_OP          reduce using rule 215 (block_item -> statement .)
    SIZEOF          reduce using rule 215 (block_item -> statement .)
    (               reduce using rule 215 (block_item -> statement .)
    &               reduce using rule 215 (block_item -> statement .)
    *               reduce using rule 215 (block_item -> statement .)
    +               reduce using rule 215 (block_item -> statement .)
    -               reduce using rule 215 (block_item -> statement .)
    ~               reduce using rule 215 (block_item -> statement .)
    !               reduce using rule 215 (block_item -> statement .)
    CONSTANT        reduce using rule 215 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 215 (block_item -> statement .)


state 124

    (225) expression_statement -> ; .

    }               reduce using rule 225 (expression_statement -> ; .)
    IDENTIFIER      reduce using rule 225 (expression_statement -> ; .)
    CASE            reduce using rule 225 (expression_statement -> ; .)
    DEFAULT         reduce using rule 225 (expression_statement -> ; .)
    {               reduce using rule 225 (expression_statement -> ; .)
    ;               reduce using rule 225 (expression_statement -> ; .)
    IF              reduce using rule 225 (expression_statement -> ; .)
    SWITCH          reduce using rule 225 (expression_statement -> ; .)
    WHILE           reduce using rule 225 (expression_statement -> ; .)
    DO              reduce using rule 225 (expression_statement -> ; .)
    FOR             reduce using rule 225 (expression_statement -> ; .)
    GOTO            reduce using rule 225 (expression_statement -> ; .)
    CONTINUE        reduce using rule 225 (expression_statement -> ; .)
    BREAK           reduce using rule 225 (expression_statement -> ; .)
    RETURN          reduce using rule 225 (expression_statement -> ; .)
    TYPEDEF         reduce using rule 225 (expression_statement -> ; .)
    EXTERN          reduce using rule 225 (expression_statement -> ; .)
    STATIC          reduce using rule 225 (expression_statement -> ; .)
    AUTO            reduce using rule 225 (expression_statement -> ; .)
    REGISTER        reduce using rule 225 (expression_statement -> ; .)
    VOID            reduce using rule 225 (expression_statement -> ; .)
    CHAR            reduce using rule 225 (expression_statement -> ; .)
    SHORT           reduce using rule 225 (expression_statement -> ; .)
    INT             reduce using rule 225 (expression_statement -> ; .)
    LONG            reduce using rule 225 (expression_statement -> ; .)
    FLOAT           reduce using rule 225 (expression_statement -> ; .)
    DOUBLE          reduce using rule 225 (expression_statement -> ; .)
    SIGNED          reduce using rule 225 (expression_statement -> ; .)
    UNSIGNED        reduce using rule 225 (expression_statement -> ; .)
    BOOL            reduce using rule 225 (expression_statement -> ; .)
    CONST           reduce using rule 225 (expression_statement -> ; .)
    RESTRICT        reduce using rule 225 (expression_statement -> ; .)
    VOLATILE        reduce using rule 225 (expression_statement -> ; .)
    INLINE          reduce using rule 225 (expression_statement -> ; .)
    ENUM            reduce using rule 225 (expression_statement -> ; .)
    STRUCT          reduce using rule 225 (expression_statement -> ; .)
    UNION           reduce using rule 225 (expression_statement -> ; .)
    INC_OP          reduce using rule 225 (expression_statement -> ; .)
    DEC_OP          reduce using rule 225 (expression_statement -> ; .)
    SIZEOF          reduce using rule 225 (expression_statement -> ; .)
    (               reduce using rule 225 (expression_statement -> ; .)
    &               reduce using rule 225 (expression_statement -> ; .)
    *               reduce using rule 225 (expression_statement -> ; .)
    +               reduce using rule 225 (expression_statement -> ; .)
    -               reduce using rule 225 (expression_statement -> ; .)
    ~               reduce using rule 225 (expression_statement -> ; .)
    !               reduce using rule 225 (expression_statement -> ; .)
    CONSTANT        reduce using rule 225 (expression_statement -> ; .)
    STRING_LITERAL  reduce using rule 225 (expression_statement -> ; .)
    ELSE            reduce using rule 225 (expression_statement -> ; .)
    )               reduce using rule 225 (expression_statement -> ; .)


state 125

    (216) statement -> labeled_statement .

    }               reduce using rule 216 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 216 (statement -> labeled_statement .)
    CASE            reduce using rule 216 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 216 (statement -> labeled_statement .)
    {               reduce using rule 216 (statement -> labeled_statement .)
    ;               reduce using rule 216 (statement -> labeled_statement .)
    IF              reduce using rule 216 (statement -> labeled_statement .)
    SWITCH          reduce using rule 216 (statement -> labeled_statement .)
    WHILE           reduce using rule 216 (statement -> labeled_statement .)
    DO              reduce using rule 216 (statement -> labeled_statement .)
    FOR             reduce using rule 216 (statement -> labeled_statement .)
    GOTO            reduce using rule 216 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 216 (statement -> labeled_statement .)
    BREAK           reduce using rule 216 (statement -> labeled_statement .)
    RETURN          reduce using rule 216 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 216 (statement -> labeled_statement .)
    EXTERN          reduce using rule 216 (statement -> labeled_statement .)
    STATIC          reduce using rule 216 (statement -> labeled_statement .)
    AUTO            reduce using rule 216 (statement -> labeled_statement .)
    REGISTER        reduce using rule 216 (statement -> labeled_statement .)
    VOID            reduce using rule 216 (statement -> labeled_statement .)
    CHAR            reduce using rule 216 (statement -> labeled_statement .)
    SHORT           reduce using rule 216 (statement -> labeled_statement .)
    INT             reduce using rule 216 (statement -> labeled_statement .)
    LONG            reduce using rule 216 (statement -> labeled_statement .)
    FLOAT           reduce using rule 216 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 216 (statement -> labeled_statement .)
    SIGNED          reduce using rule 216 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 216 (statement -> labeled_statement .)
    BOOL            reduce using rule 216 (statement -> labeled_statement .)
    CONST           reduce using rule 216 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 216 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 216 (statement -> labeled_statement .)
    INLINE          reduce using rule 216 (statement -> labeled_statement .)
    ENUM            reduce using rule 216 (statement -> labeled_statement .)
    STRUCT          reduce using rule 216 (statement -> labeled_statement .)
    UNION           reduce using rule 216 (statement -> labeled_statement .)
    INC_OP          reduce using rule 216 (statement -> labeled_statement .)
    DEC_OP          reduce using rule 216 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 216 (statement -> labeled_statement .)
    (               reduce using rule 216 (statement -> labeled_statement .)
    &               reduce using rule 216 (statement -> labeled_statement .)
    *               reduce using rule 216 (statement -> labeled_statement .)
    +               reduce using rule 216 (statement -> labeled_statement .)
    -               reduce using rule 216 (statement -> labeled_statement .)
    ~               reduce using rule 216 (statement -> labeled_statement .)
    !               reduce using rule 216 (statement -> labeled_statement .)
    CONSTANT        reduce using rule 216 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 216 (statement -> labeled_statement .)
    ELSE            reduce using rule 216 (statement -> labeled_statement .)


state 126

    (217) statement -> compound_statement .

    }               reduce using rule 217 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 217 (statement -> compound_statement .)
    CASE            reduce using rule 217 (statement -> compound_statement .)
    DEFAULT         reduce using rule 217 (statement -> compound_statement .)
    {               reduce using rule 217 (statement -> compound_statement .)
    ;               reduce using rule 217 (statement -> compound_statement .)
    IF              reduce using rule 217 (statement -> compound_statement .)
    SWITCH          reduce using rule 217 (statement -> compound_statement .)
    WHILE           reduce using rule 217 (statement -> compound_statement .)
    DO              reduce using rule 217 (statement -> compound_statement .)
    FOR             reduce using rule 217 (statement -> compound_statement .)
    GOTO            reduce using rule 217 (statement -> compound_statement .)
    CONTINUE        reduce using rule 217 (statement -> compound_statement .)
    BREAK           reduce using rule 217 (statement -> compound_statement .)
    RETURN          reduce using rule 217 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 217 (statement -> compound_statement .)
    EXTERN          reduce using rule 217 (statement -> compound_statement .)
    STATIC          reduce using rule 217 (statement -> compound_statement .)
    AUTO            reduce using rule 217 (statement -> compound_statement .)
    REGISTER        reduce using rule 217 (statement -> compound_statement .)
    VOID            reduce using rule 217 (statement -> compound_statement .)
    CHAR            reduce using rule 217 (statement -> compound_statement .)
    SHORT           reduce using rule 217 (statement -> compound_statement .)
    INT             reduce using rule 217 (statement -> compound_statement .)
    LONG            reduce using rule 217 (statement -> compound_statement .)
    FLOAT           reduce using rule 217 (statement -> compound_statement .)
    DOUBLE          reduce using rule 217 (statement -> compound_statement .)
    SIGNED          reduce using rule 217 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 217 (statement -> compound_statement .)
    BOOL            reduce using rule 217 (statement -> compound_statement .)
    CONST           reduce using rule 217 (statement -> compound_statement .)
    RESTRICT        reduce using rule 217 (statement -> compound_statement .)
    VOLATILE        reduce using rule 217 (statement -> compound_statement .)
    INLINE          reduce using rule 217 (statement -> compound_statement .)
    ENUM            reduce using rule 217 (statement -> compound_statement .)
    STRUCT          reduce using rule 217 (statement -> compound_statement .)
    UNION           reduce using rule 217 (statement -> compound_statement .)
    INC_OP          reduce using rule 217 (statement -> compound_statement .)
    DEC_OP          reduce using rule 217 (statement -> compound_statement .)
    SIZEOF          reduce using rule 217 (statement -> compound_statement .)
    (               reduce using rule 217 (statement -> compound_statement .)
    &               reduce using rule 217 (statement -> compound_statement .)
    *               reduce using rule 217 (statement -> compound_statement .)
    +               reduce using rule 217 (statement -> compound_statement .)
    -               reduce using rule 217 (statement -> compound_statement .)
    ~               reduce using rule 217 (statement -> compound_statement .)
    !               reduce using rule 217 (statement -> compound_statement .)
    CONSTANT        reduce using rule 217 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 217 (statement -> compound_statement .)
    ELSE            reduce using rule 217 (statement -> compound_statement .)


state 127

    (218) statement -> expression_statement .

    }               reduce using rule 218 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 218 (statement -> expression_statement .)
    CASE            reduce using rule 218 (statement -> expression_statement .)
    DEFAULT         reduce using rule 218 (statement -> expression_statement .)
    {               reduce using rule 218 (statement -> expression_statement .)
    ;               reduce using rule 218 (statement -> expression_statement .)
    IF              reduce using rule 218 (statement -> expression_statement .)
    SWITCH          reduce using rule 218 (statement -> expression_statement .)
    WHILE           reduce using rule 218 (statement -> expression_statement .)
    DO              reduce using rule 218 (statement -> expression_statement .)
    FOR             reduce using rule 218 (statement -> expression_statement .)
    GOTO            reduce using rule 218 (statement -> expression_statement .)
    CONTINUE        reduce using rule 218 (statement -> expression_statement .)
    BREAK           reduce using rule 218 (statement -> expression_statement .)
    RETURN          reduce using rule 218 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 218 (statement -> expression_statement .)
    EXTERN          reduce using rule 218 (statement -> expression_statement .)
    STATIC          reduce using rule 218 (statement -> expression_statement .)
    AUTO            reduce using rule 218 (statement -> expression_statement .)
    REGISTER        reduce using rule 218 (statement -> expression_statement .)
    VOID            reduce using rule 218 (statement -> expression_statement .)
    CHAR            reduce using rule 218 (statement -> expression_statement .)
    SHORT           reduce using rule 218 (statement -> expression_statement .)
    INT             reduce using rule 218 (statement -> expression_statement .)
    LONG            reduce using rule 218 (statement -> expression_statement .)
    FLOAT           reduce using rule 218 (statement -> expression_statement .)
    DOUBLE          reduce using rule 218 (statement -> expression_statement .)
    SIGNED          reduce using rule 218 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 218 (statement -> expression_statement .)
    BOOL            reduce using rule 218 (statement -> expression_statement .)
    CONST           reduce using rule 218 (statement -> expression_statement .)
    RESTRICT        reduce using rule 218 (statement -> expression_statement .)
    VOLATILE        reduce using rule 218 (statement -> expression_statement .)
    INLINE          reduce using rule 218 (statement -> expression_statement .)
    ENUM            reduce using rule 218 (statement -> expression_statement .)
    STRUCT          reduce using rule 218 (statement -> expression_statement .)
    UNION           reduce using rule 218 (statement -> expression_statement .)
    INC_OP          reduce using rule 218 (statement -> expression_statement .)
    DEC_OP          reduce using rule 218 (statement -> expression_statement .)
    SIZEOF          reduce using rule 218 (statement -> expression_statement .)
    (               reduce using rule 218 (statement -> expression_statement .)
    &               reduce using rule 218 (statement -> expression_statement .)
    *               reduce using rule 218 (statement -> expression_statement .)
    +               reduce using rule 218 (statement -> expression_statement .)
    -               reduce using rule 218 (statement -> expression_statement .)
    ~               reduce using rule 218 (statement -> expression_statement .)
    !               reduce using rule 218 (statement -> expression_statement .)
    CONSTANT        reduce using rule 218 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 218 (statement -> expression_statement .)
    ELSE            reduce using rule 218 (statement -> expression_statement .)


state 128

    (219) statement -> selection_statement .

    }               reduce using rule 219 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 219 (statement -> selection_statement .)
    CASE            reduce using rule 219 (statement -> selection_statement .)
    DEFAULT         reduce using rule 219 (statement -> selection_statement .)
    {               reduce using rule 219 (statement -> selection_statement .)
    ;               reduce using rule 219 (statement -> selection_statement .)
    IF              reduce using rule 219 (statement -> selection_statement .)
    SWITCH          reduce using rule 219 (statement -> selection_statement .)
    WHILE           reduce using rule 219 (statement -> selection_statement .)
    DO              reduce using rule 219 (statement -> selection_statement .)
    FOR             reduce using rule 219 (statement -> selection_statement .)
    GOTO            reduce using rule 219 (statement -> selection_statement .)
    CONTINUE        reduce using rule 219 (statement -> selection_statement .)
    BREAK           reduce using rule 219 (statement -> selection_statement .)
    RETURN          reduce using rule 219 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 219 (statement -> selection_statement .)
    EXTERN          reduce using rule 219 (statement -> selection_statement .)
    STATIC          reduce using rule 219 (statement -> selection_statement .)
    AUTO            reduce using rule 219 (statement -> selection_statement .)
    REGISTER        reduce using rule 219 (statement -> selection_statement .)
    VOID            reduce using rule 219 (statement -> selection_statement .)
    CHAR            reduce using rule 219 (statement -> selection_statement .)
    SHORT           reduce using rule 219 (statement -> selection_statement .)
    INT             reduce using rule 219 (statement -> selection_statement .)
    LONG            reduce using rule 219 (statement -> selection_statement .)
    FLOAT           reduce using rule 219 (statement -> selection_statement .)
    DOUBLE          reduce using rule 219 (statement -> selection_statement .)
    SIGNED          reduce using rule 219 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 219 (statement -> selection_statement .)
    BOOL            reduce using rule 219 (statement -> selection_statement .)
    CONST           reduce using rule 219 (statement -> selection_statement .)
    RESTRICT        reduce using rule 219 (statement -> selection_statement .)
    VOLATILE        reduce using rule 219 (statement -> selection_statement .)
    INLINE          reduce using rule 219 (statement -> selection_statement .)
    ENUM            reduce using rule 219 (statement -> selection_statement .)
    STRUCT          reduce using rule 219 (statement -> selection_statement .)
    UNION           reduce using rule 219 (statement -> selection_statement .)
    INC_OP          reduce using rule 219 (statement -> selection_statement .)
    DEC_OP          reduce using rule 219 (statement -> selection_statement .)
    SIZEOF          reduce using rule 219 (statement -> selection_statement .)
    (               reduce using rule 219 (statement -> selection_statement .)
    &               reduce using rule 219 (statement -> selection_statement .)
    *               reduce using rule 219 (statement -> selection_statement .)
    +               reduce using rule 219 (statement -> selection_statement .)
    -               reduce using rule 219 (statement -> selection_statement .)
    ~               reduce using rule 219 (statement -> selection_statement .)
    !               reduce using rule 219 (statement -> selection_statement .)
    CONSTANT        reduce using rule 219 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 219 (statement -> selection_statement .)
    ELSE            reduce using rule 219 (statement -> selection_statement .)


state 129

    (220) statement -> iteration_statement .

    }               reduce using rule 220 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 220 (statement -> iteration_statement .)
    CASE            reduce using rule 220 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 220 (statement -> iteration_statement .)
    {               reduce using rule 220 (statement -> iteration_statement .)
    ;               reduce using rule 220 (statement -> iteration_statement .)
    IF              reduce using rule 220 (statement -> iteration_statement .)
    SWITCH          reduce using rule 220 (statement -> iteration_statement .)
    WHILE           reduce using rule 220 (statement -> iteration_statement .)
    DO              reduce using rule 220 (statement -> iteration_statement .)
    FOR             reduce using rule 220 (statement -> iteration_statement .)
    GOTO            reduce using rule 220 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 220 (statement -> iteration_statement .)
    BREAK           reduce using rule 220 (statement -> iteration_statement .)
    RETURN          reduce using rule 220 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 220 (statement -> iteration_statement .)
    EXTERN          reduce using rule 220 (statement -> iteration_statement .)
    STATIC          reduce using rule 220 (statement -> iteration_statement .)
    AUTO            reduce using rule 220 (statement -> iteration_statement .)
    REGISTER        reduce using rule 220 (statement -> iteration_statement .)
    VOID            reduce using rule 220 (statement -> iteration_statement .)
    CHAR            reduce using rule 220 (statement -> iteration_statement .)
    SHORT           reduce using rule 220 (statement -> iteration_statement .)
    INT             reduce using rule 220 (statement -> iteration_statement .)
    LONG            reduce using rule 220 (statement -> iteration_statement .)
    FLOAT           reduce using rule 220 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 220 (statement -> iteration_statement .)
    SIGNED          reduce using rule 220 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 220 (statement -> iteration_statement .)
    BOOL            reduce using rule 220 (statement -> iteration_statement .)
    CONST           reduce using rule 220 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 220 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 220 (statement -> iteration_statement .)
    INLINE          reduce using rule 220 (statement -> iteration_statement .)
    ENUM            reduce using rule 220 (statement -> iteration_statement .)
    STRUCT          reduce using rule 220 (statement -> iteration_statement .)
    UNION           reduce using rule 220 (statement -> iteration_statement .)
    INC_OP          reduce using rule 220 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 220 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 220 (statement -> iteration_statement .)
    (               reduce using rule 220 (statement -> iteration_statement .)
    &               reduce using rule 220 (statement -> iteration_statement .)
    *               reduce using rule 220 (statement -> iteration_statement .)
    +               reduce using rule 220 (statement -> iteration_statement .)
    -               reduce using rule 220 (statement -> iteration_statement .)
    ~               reduce using rule 220 (statement -> iteration_statement .)
    !               reduce using rule 220 (statement -> iteration_statement .)
    CONSTANT        reduce using rule 220 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 220 (statement -> iteration_statement .)
    ELSE            reduce using rule 220 (statement -> iteration_statement .)


state 130

    (221) statement -> jump_statement .

    }               reduce using rule 221 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 221 (statement -> jump_statement .)
    CASE            reduce using rule 221 (statement -> jump_statement .)
    DEFAULT         reduce using rule 221 (statement -> jump_statement .)
    {               reduce using rule 221 (statement -> jump_statement .)
    ;               reduce using rule 221 (statement -> jump_statement .)
    IF              reduce using rule 221 (statement -> jump_statement .)
    SWITCH          reduce using rule 221 (statement -> jump_statement .)
    WHILE           reduce using rule 221 (statement -> jump_statement .)
    DO              reduce using rule 221 (statement -> jump_statement .)
    FOR             reduce using rule 221 (statement -> jump_statement .)
    GOTO            reduce using rule 221 (statement -> jump_statement .)
    CONTINUE        reduce using rule 221 (statement -> jump_statement .)
    BREAK           reduce using rule 221 (statement -> jump_statement .)
    RETURN          reduce using rule 221 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 221 (statement -> jump_statement .)
    EXTERN          reduce using rule 221 (statement -> jump_statement .)
    STATIC          reduce using rule 221 (statement -> jump_statement .)
    AUTO            reduce using rule 221 (statement -> jump_statement .)
    REGISTER        reduce using rule 221 (statement -> jump_statement .)
    VOID            reduce using rule 221 (statement -> jump_statement .)
    CHAR            reduce using rule 221 (statement -> jump_statement .)
    SHORT           reduce using rule 221 (statement -> jump_statement .)
    INT             reduce using rule 221 (statement -> jump_statement .)
    LONG            reduce using rule 221 (statement -> jump_statement .)
    FLOAT           reduce using rule 221 (statement -> jump_statement .)
    DOUBLE          reduce using rule 221 (statement -> jump_statement .)
    SIGNED          reduce using rule 221 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 221 (statement -> jump_statement .)
    BOOL            reduce using rule 221 (statement -> jump_statement .)
    CONST           reduce using rule 221 (statement -> jump_statement .)
    RESTRICT        reduce using rule 221 (statement -> jump_statement .)
    VOLATILE        reduce using rule 221 (statement -> jump_statement .)
    INLINE          reduce using rule 221 (statement -> jump_statement .)
    ENUM            reduce using rule 221 (statement -> jump_statement .)
    STRUCT          reduce using rule 221 (statement -> jump_statement .)
    UNION           reduce using rule 221 (statement -> jump_statement .)
    INC_OP          reduce using rule 221 (statement -> jump_statement .)
    DEC_OP          reduce using rule 221 (statement -> jump_statement .)
    SIZEOF          reduce using rule 221 (statement -> jump_statement .)
    (               reduce using rule 221 (statement -> jump_statement .)
    &               reduce using rule 221 (statement -> jump_statement .)
    *               reduce using rule 221 (statement -> jump_statement .)
    +               reduce using rule 221 (statement -> jump_statement .)
    -               reduce using rule 221 (statement -> jump_statement .)
    ~               reduce using rule 221 (statement -> jump_statement .)
    !               reduce using rule 221 (statement -> jump_statement .)
    CONSTANT        reduce using rule 221 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 221 (statement -> jump_statement .)
    ELSE            reduce using rule 221 (statement -> jump_statement .)


state 131

    (222) labeled_statement -> IDENTIFIER . : statement
    (163) primary_expression -> IDENTIFIER .

    :               shift and go to state 236
    [               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    (               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    .               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 163 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 163 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 163 (primary_expression -> IDENTIFIER .)
    =               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 163 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 163 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 163 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 163 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 163 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 163 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 163 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 163 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 163 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 163 (primary_expression -> IDENTIFIER .)
    *               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    /               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    %               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    +               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    -               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 163 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 163 (primary_expression -> IDENTIFIER .)
    <               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    >               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    &               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    ^               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    |               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 163 (primary_expression -> IDENTIFIER .)
    ?               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 163 (primary_expression -> IDENTIFIER .)
    ;               reduce using rule 163 (primary_expression -> IDENTIFIER .)
    ,               reduce using rule 163 (primary_expression -> IDENTIFIER .)


state 132

    (223) labeled_statement -> CASE . constant_expression : statement
    (108) constant_expression -> . conditional_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    constant_expression            shift and go to state 237
    conditional_expression         shift and go to state 162
    logical_or_expression          shift and go to state 92
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 133

    (224) labeled_statement -> DEFAULT . : statement

    :               shift and go to state 238


state 134

    (226) expression_statement -> expression . ;
    (168) expression -> expression . , assignment_expression

    ;               shift and go to state 239
    ,               shift and go to state 240


state 135

    (227) selection_statement -> IF . ( expression ) statement
    (228) selection_statement -> IF . ( expression ) statement ELSE statement

    (               shift and go to state 241


state 136

    (229) selection_statement -> SWITCH . ( expression ) statement

    (               shift and go to state 242


state 137

    (230) iteration_statement -> WHILE . ( expression ) statement

    (               shift and go to state 243


state 138

    (231) iteration_statement -> DO . statement WHILE ( expression ) ;
    (216) statement -> . labeled_statement
    (217) statement -> . compound_statement
    (218) statement -> . expression_statement
    (219) statement -> . selection_statement
    (220) statement -> . iteration_statement
    (221) statement -> . jump_statement
    (222) labeled_statement -> . IDENTIFIER : statement
    (223) labeled_statement -> . CASE constant_expression : statement
    (224) labeled_statement -> . DEFAULT : statement
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (227) selection_statement -> . IF ( expression ) statement
    (228) selection_statement -> . IF ( expression ) statement ELSE statement
    (229) selection_statement -> . SWITCH ( expression ) statement
    (230) iteration_statement -> . WHILE ( expression ) statement
    (231) iteration_statement -> . DO statement WHILE ( expression ) ;
    (232) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (233) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (235) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (236) jump_statement -> . GOTO IDENTIFIER ;
    (237) jump_statement -> . CONTINUE ;
    (238) jump_statement -> . BREAK ;
    (239) jump_statement -> . RETURN ;
    (240) jump_statement -> . RETURN expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 131
    CASE            shift and go to state 132
    DEFAULT         shift and go to state 133
    {               shift and go to state 61
    ;               shift and go to state 124
    IF              shift and go to state 135
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 137
    DO              shift and go to state 138
    FOR             shift and go to state 139
    GOTO            shift and go to state 140
    CONTINUE        shift and go to state 141
    BREAK           shift and go to state 142
    RETURN          shift and go to state 143
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    statement                      shift and go to state 244
    expression                     shift and go to state 134
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 139

    (232) iteration_statement -> FOR . ( expression_statement expression_statement ) statement
    (233) iteration_statement -> FOR . ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> FOR . ( declaration expression_statement ) statement
    (235) iteration_statement -> FOR . ( declaration expression_statement expression ) statement

    (               shift and go to state 245


state 140

    (236) jump_statement -> GOTO . IDENTIFIER ;

    IDENTIFIER      shift and go to state 246


state 141

    (237) jump_statement -> CONTINUE . ;

    ;               shift and go to state 247


state 142

    (238) jump_statement -> BREAK . ;

    ;               shift and go to state 248


state 143

    (239) jump_statement -> RETURN . ;
    (240) jump_statement -> RETURN . expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 249
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression                     shift and go to state 250
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 144

    (167) expression -> assignment_expression .

    ;               reduce using rule 167 (expression -> assignment_expression .)
    ,               reduce using rule 167 (expression -> assignment_expression .)
    )               reduce using rule 167 (expression -> assignment_expression .)
    :               reduce using rule 167 (expression -> assignment_expression .)
    ]               reduce using rule 167 (expression -> assignment_expression .)


state 145

    (14) init_declarator_list -> init_declarator_list , init_declarator .

    ;               reduce using rule 14 (init_declarator_list -> init_declarator_list , init_declarator .)
    ,               reduce using rule 14 (init_declarator_list -> init_declarator_list , init_declarator .)


state 146

    (82) direct_declarator -> direct_declarator [ type_qualifier_list . assignment_expression ]
    (83) direct_declarator -> direct_declarator [ type_qualifier_list . ]
    (86) direct_declarator -> direct_declarator [ type_qualifier_list . STATIC assignment_expression ]
    (87) direct_declarator -> direct_declarator [ type_qualifier_list . * ]
    (79) type_qualifier_list -> type_qualifier_list . type_qualifier
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    ]               shift and go to state 252
    STATIC          shift and go to state 253
    *               shift and go to state 254
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    assignment_expression          shift and go to state 251
    type_qualifier                 shift and go to state 159
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 147

    (84) direct_declarator -> direct_declarator [ assignment_expression . ]

    ]               shift and go to state 255


state 148

    (89) direct_declarator -> direct_declarator [ ] .

    [               reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    (               reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    =               reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    {               reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    TYPEDEF         reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    EXTERN          reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    STATIC          reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    AUTO            reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    REGISTER        reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    VOID            reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    CHAR            reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    SHORT           reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    INT             reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    LONG            reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    FLOAT           reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    DOUBLE          reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    SIGNED          reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    UNSIGNED        reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    BOOL            reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    CONST           reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    RESTRICT        reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    VOLATILE        reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    INLINE          reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    ENUM            reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    STRUCT          reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    UNION           reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    ;               reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    ,               reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    )               reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)
    :               reduce using rule 89 (direct_declarator -> direct_declarator [ ] .)


state 149

    (85) direct_declarator -> direct_declarator [ STATIC . type_qualifier_list assignment_expression ]
    (78) type_qualifier_list -> . type_qualifier
    (79) type_qualifier_list -> . type_qualifier_list type_qualifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE

    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31

    type_qualifier_list            shift and go to state 256
    type_qualifier                 shift and go to state 69

state 150

    (88) direct_declarator -> direct_declarator [ * . ]
    (148) unary_operator -> * .

    ]               shift and go to state 257
    (               reduce using rule 148 (unary_operator -> * .)
    INC_OP          reduce using rule 148 (unary_operator -> * .)
    DEC_OP          reduce using rule 148 (unary_operator -> * .)
    SIZEOF          reduce using rule 148 (unary_operator -> * .)
    &               reduce using rule 148 (unary_operator -> * .)
    *               reduce using rule 148 (unary_operator -> * .)
    +               reduce using rule 148 (unary_operator -> * .)
    -               reduce using rule 148 (unary_operator -> * .)
    ~               reduce using rule 148 (unary_operator -> * .)
    !               reduce using rule 148 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 148 (unary_operator -> * .)
    CONSTANT        reduce using rule 148 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 148 (unary_operator -> * .)


state 151

    (90) direct_declarator -> direct_declarator ( parameter_type_list . )

    )               shift and go to state 258


state 152

    (92) direct_declarator -> direct_declarator ( ) .

    [               reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    (               reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    =               reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    {               reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    TYPEDEF         reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    EXTERN          reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    STATIC          reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    AUTO            reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    REGISTER        reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    VOID            reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    CHAR            reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    SHORT           reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    INT             reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    LONG            reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    FLOAT           reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    DOUBLE          reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    SIGNED          reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    UNSIGNED        reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    BOOL            reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    CONST           reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    RESTRICT        reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    VOLATILE        reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    INLINE          reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    ENUM            reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    STRUCT          reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    UNION           reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    ;               reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    ,               reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    )               reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)
    :               reduce using rule 92 (direct_declarator -> direct_declarator ( ) .)


state 153

    (91) direct_declarator -> direct_declarator ( identifier_list . )
    (94) identifier_list -> identifier_list . , IDENTIFIER

    )               shift and go to state 259
    ,               shift and go to state 260


state 154

    (185) parameter_type_list -> parameter_list .
    (186) parameter_type_list -> parameter_list . , ELLIPSIS
    (188) parameter_list -> parameter_list . , parameter_declaration

    )               reduce using rule 185 (parameter_type_list -> parameter_list .)
    ,               shift and go to state 261


state 155

    (93) identifier_list -> IDENTIFIER .

    )               reduce using rule 93 (identifier_list -> IDENTIFIER .)
    ,               reduce using rule 93 (identifier_list -> IDENTIFIER .)


state 156

    (187) parameter_list -> parameter_declaration .

    ,               reduce using rule 187 (parameter_list -> parameter_declaration .)
    )               reduce using rule 187 (parameter_list -> parameter_declaration .)


state 157

    (189) parameter_declaration -> declaration_specifiers . declarator
    (190) parameter_declaration -> declaration_specifiers . abstract_declarator
    (191) parameter_declaration -> declaration_specifiers .
    (72) declarator -> . pointer direct_declarator
    (73) declarator -> . direct_declarator
    (171) abstract_declarator -> . pointer
    (172) abstract_declarator -> . direct_abstract_declarator
    (173) abstract_declarator -> . pointer direct_abstract_declarator
    (74) pointer -> . *
    (75) pointer -> . * type_qualifier_list
    (76) pointer -> . * pointer
    (77) pointer -> . * type_qualifier_list pointer
    (80) direct_declarator -> . IDENTIFIER
    (81) direct_declarator -> . ( declarator )
    (82) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (83) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (84) direct_declarator -> . direct_declarator [ assignment_expression ]
    (85) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (86) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (87) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (88) direct_declarator -> . direct_declarator [ * ]
    (89) direct_declarator -> . direct_declarator [ ]
    (90) direct_declarator -> . direct_declarator ( parameter_type_list )
    (91) direct_declarator -> . direct_declarator ( identifier_list )
    (92) direct_declarator -> . direct_declarator ( )
    (174) direct_abstract_declarator -> . ( abstract_declarator )
    (175) direct_abstract_declarator -> . [ ]
    (176) direct_abstract_declarator -> . [ assignment_expression ]
    (177) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (178) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (179) direct_abstract_declarator -> . [ * ]
    (180) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (181) direct_abstract_declarator -> . ( )
    (182) direct_abstract_declarator -> . ( parameter_type_list )
    (183) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (184) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    ,               reduce using rule 191 (parameter_declaration -> declaration_specifiers .)
    )               reduce using rule 191 (parameter_declaration -> declaration_specifiers .)
    *               shift and go to state 44
    IDENTIFIER      shift and go to state 45
    (               shift and go to state 266
    [               shift and go to state 267

    declarator                     shift and go to state 262
    abstract_declarator            shift and go to state 263
    pointer                        shift and go to state 264
    direct_declarator              shift and go to state 42
    direct_abstract_declarator     shift and go to state 265

state 158

    (77) pointer -> * type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 77 (pointer -> * type_qualifier_list pointer .)
    (               reduce using rule 77 (pointer -> * type_qualifier_list pointer .)
    [               reduce using rule 77 (pointer -> * type_qualifier_list pointer .)
    ,               reduce using rule 77 (pointer -> * type_qualifier_list pointer .)
    )               reduce using rule 77 (pointer -> * type_qualifier_list pointer .)


state 159

    (79) type_qualifier_list -> type_qualifier_list type_qualifier .

    *               reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    (               reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    [               reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ,               reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    )               reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ]               reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STATIC          reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INC_OP          reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    DEC_OP          reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIZEOF          reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    &               reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    +               reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    -               reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ~               reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    !               reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONSTANT        reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRING_LITERAL  reduce using rule 79 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 160

    (81) direct_declarator -> ( declarator ) .

    [               reduce using rule 81 (direct_declarator -> ( declarator ) .)
    (               reduce using rule 81 (direct_declarator -> ( declarator ) .)
    =               reduce using rule 81 (direct_declarator -> ( declarator ) .)
    {               reduce using rule 81 (direct_declarator -> ( declarator ) .)
    TYPEDEF         reduce using rule 81 (direct_declarator -> ( declarator ) .)
    EXTERN          reduce using rule 81 (direct_declarator -> ( declarator ) .)
    STATIC          reduce using rule 81 (direct_declarator -> ( declarator ) .)
    AUTO            reduce using rule 81 (direct_declarator -> ( declarator ) .)
    REGISTER        reduce using rule 81 (direct_declarator -> ( declarator ) .)
    VOID            reduce using rule 81 (direct_declarator -> ( declarator ) .)
    CHAR            reduce using rule 81 (direct_declarator -> ( declarator ) .)
    SHORT           reduce using rule 81 (direct_declarator -> ( declarator ) .)
    INT             reduce using rule 81 (direct_declarator -> ( declarator ) .)
    LONG            reduce using rule 81 (direct_declarator -> ( declarator ) .)
    FLOAT           reduce using rule 81 (direct_declarator -> ( declarator ) .)
    DOUBLE          reduce using rule 81 (direct_declarator -> ( declarator ) .)
    SIGNED          reduce using rule 81 (direct_declarator -> ( declarator ) .)
    UNSIGNED        reduce using rule 81 (direct_declarator -> ( declarator ) .)
    BOOL            reduce using rule 81 (direct_declarator -> ( declarator ) .)
    CONST           reduce using rule 81 (direct_declarator -> ( declarator ) .)
    RESTRICT        reduce using rule 81 (direct_declarator -> ( declarator ) .)
    VOLATILE        reduce using rule 81 (direct_declarator -> ( declarator ) .)
    INLINE          reduce using rule 81 (direct_declarator -> ( declarator ) .)
    ENUM            reduce using rule 81 (direct_declarator -> ( declarator ) .)
    STRUCT          reduce using rule 81 (direct_declarator -> ( declarator ) .)
    UNION           reduce using rule 81 (direct_declarator -> ( declarator ) .)
    ;               reduce using rule 81 (direct_declarator -> ( declarator ) .)
    ,               reduce using rule 81 (direct_declarator -> ( declarator ) .)
    )               reduce using rule 81 (direct_declarator -> ( declarator ) .)
    :               reduce using rule 81 (direct_declarator -> ( declarator ) .)


state 161

    (6) macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .

    MACRO           reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    TYPEDEF         reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    EXTERN          reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    STATIC          reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    AUTO            reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    REGISTER        reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    VOID            reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    CHAR            reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    SHORT           reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    INT             reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    LONG            reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    FLOAT           reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    DOUBLE          reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    SIGNED          reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    UNSIGNED        reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    BOOL            reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    CONST           reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    RESTRICT        reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    VOLATILE        reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    INLINE          reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    ENUM            reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    STRUCT          reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    UNION           reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)
    $end            reduce using rule 6 (macro -> MACRO IDENTIFIER IDENTIFIER constant_expression .)


state 162

    (108) constant_expression -> conditional_expression .

    MACRO           reduce using rule 108 (constant_expression -> conditional_expression .)
    TYPEDEF         reduce using rule 108 (constant_expression -> conditional_expression .)
    EXTERN          reduce using rule 108 (constant_expression -> conditional_expression .)
    STATIC          reduce using rule 108 (constant_expression -> conditional_expression .)
    AUTO            reduce using rule 108 (constant_expression -> conditional_expression .)
    REGISTER        reduce using rule 108 (constant_expression -> conditional_expression .)
    VOID            reduce using rule 108 (constant_expression -> conditional_expression .)
    CHAR            reduce using rule 108 (constant_expression -> conditional_expression .)
    SHORT           reduce using rule 108 (constant_expression -> conditional_expression .)
    INT             reduce using rule 108 (constant_expression -> conditional_expression .)
    LONG            reduce using rule 108 (constant_expression -> conditional_expression .)
    FLOAT           reduce using rule 108 (constant_expression -> conditional_expression .)
    DOUBLE          reduce using rule 108 (constant_expression -> conditional_expression .)
    SIGNED          reduce using rule 108 (constant_expression -> conditional_expression .)
    UNSIGNED        reduce using rule 108 (constant_expression -> conditional_expression .)
    BOOL            reduce using rule 108 (constant_expression -> conditional_expression .)
    CONST           reduce using rule 108 (constant_expression -> conditional_expression .)
    RESTRICT        reduce using rule 108 (constant_expression -> conditional_expression .)
    VOLATILE        reduce using rule 108 (constant_expression -> conditional_expression .)
    INLINE          reduce using rule 108 (constant_expression -> conditional_expression .)
    ENUM            reduce using rule 108 (constant_expression -> conditional_expression .)
    STRUCT          reduce using rule 108 (constant_expression -> conditional_expression .)
    UNION           reduce using rule 108 (constant_expression -> conditional_expression .)
    $end            reduce using rule 108 (constant_expression -> conditional_expression .)
    :               reduce using rule 108 (constant_expression -> conditional_expression .)
    ;               reduce using rule 108 (constant_expression -> conditional_expression .)
    ,               reduce using rule 108 (constant_expression -> conditional_expression .)
    }               reduce using rule 108 (constant_expression -> conditional_expression .)
    ]               reduce using rule 108 (constant_expression -> conditional_expression .)


state 163

    (139) cast_expression -> unary_expression .

    *               reduce using rule 139 (cast_expression -> unary_expression .)
    /               reduce using rule 139 (cast_expression -> unary_expression .)
    %               reduce using rule 139 (cast_expression -> unary_expression .)
    +               reduce using rule 139 (cast_expression -> unary_expression .)
    -               reduce using rule 139 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 139 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 139 (cast_expression -> unary_expression .)
    <               reduce using rule 139 (cast_expression -> unary_expression .)
    >               reduce using rule 139 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 139 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 139 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 139 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 139 (cast_expression -> unary_expression .)
    &               reduce using rule 139 (cast_expression -> unary_expression .)
    ^               reduce using rule 139 (cast_expression -> unary_expression .)
    |               reduce using rule 139 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 139 (cast_expression -> unary_expression .)
    ?               reduce using rule 139 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 139 (cast_expression -> unary_expression .)
    MACRO           reduce using rule 139 (cast_expression -> unary_expression .)
    TYPEDEF         reduce using rule 139 (cast_expression -> unary_expression .)
    EXTERN          reduce using rule 139 (cast_expression -> unary_expression .)
    STATIC          reduce using rule 139 (cast_expression -> unary_expression .)
    AUTO            reduce using rule 139 (cast_expression -> unary_expression .)
    REGISTER        reduce using rule 139 (cast_expression -> unary_expression .)
    VOID            reduce using rule 139 (cast_expression -> unary_expression .)
    CHAR            reduce using rule 139 (cast_expression -> unary_expression .)
    SHORT           reduce using rule 139 (cast_expression -> unary_expression .)
    INT             reduce using rule 139 (cast_expression -> unary_expression .)
    LONG            reduce using rule 139 (cast_expression -> unary_expression .)
    FLOAT           reduce using rule 139 (cast_expression -> unary_expression .)
    DOUBLE          reduce using rule 139 (cast_expression -> unary_expression .)
    SIGNED          reduce using rule 139 (cast_expression -> unary_expression .)
    UNSIGNED        reduce using rule 139 (cast_expression -> unary_expression .)
    BOOL            reduce using rule 139 (cast_expression -> unary_expression .)
    CONST           reduce using rule 139 (cast_expression -> unary_expression .)
    RESTRICT        reduce using rule 139 (cast_expression -> unary_expression .)
    VOLATILE        reduce using rule 139 (cast_expression -> unary_expression .)
    INLINE          reduce using rule 139 (cast_expression -> unary_expression .)
    ENUM            reduce using rule 139 (cast_expression -> unary_expression .)
    STRUCT          reduce using rule 139 (cast_expression -> unary_expression .)
    UNION           reduce using rule 139 (cast_expression -> unary_expression .)
    $end            reduce using rule 139 (cast_expression -> unary_expression .)
    =               reduce using rule 139 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 139 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 139 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 139 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 139 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 139 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 139 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 139 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 139 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 139 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 139 (cast_expression -> unary_expression .)
    ;               reduce using rule 139 (cast_expression -> unary_expression .)
    ,               reduce using rule 139 (cast_expression -> unary_expression .)
    ]               reduce using rule 139 (cast_expression -> unary_expression .)
    }               reduce using rule 139 (cast_expression -> unary_expression .)
    )               reduce using rule 139 (cast_expression -> unary_expression .)
    :               reduce using rule 139 (cast_expression -> unary_expression .)


state 164

    (140) cast_expression -> ( . type_name ) cast_expression
    (161) postfix_expression -> ( . type_name ) { initializer_list }
    (162) postfix_expression -> ( . type_name ) { initializer_list , }
    (166) primary_expression -> ( . expression )
    (169) type_name -> . specifier_qualifier_list
    (170) type_name -> . specifier_qualifier_list abstract_declarator
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (63) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (64) specifier_qualifier_list -> . type_specifier
    (65) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (66) specifier_qualifier_list -> . type_qualifier
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    ENUM            shift and go to state 34
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    type_name                      shift and go to state 268
    cast_expression                shift and go to state 97
    expression                     shift and go to state 215
    specifier_qualifier_list       shift and go to state 216
    assignment_expression          shift and go to state 144
    type_specifier                 shift and go to state 78
    type_qualifier                 shift and go to state 79
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    struct_or_union                shift and go to state 33
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 165

    (9) headfile -> IDENTIFIER . . IDENTIFIER
    (10) headfile -> IDENTIFIER .

    .               shift and go to state 269
    >               reduce using rule 10 (headfile -> IDENTIFIER .)
    "               reduce using rule 10 (headfile -> IDENTIFIER .)


state 166

    (7) macro -> MACRO IDENTIFIER < headfile . >

    >               shift and go to state 270


state 167

    (8) macro -> MACRO IDENTIFIER " headfile . "

    "               shift and go to state 271


state 168

    (55) struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list . }
    (61) struct_declaration_list -> struct_declaration_list . struct_declaration
    (62) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (63) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (64) specifier_qualifier_list -> . type_specifier
    (65) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (66) specifier_qualifier_list -> . type_qualifier
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    }               shift and go to state 272
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    struct_or_union                shift and go to state 33
    struct_declaration             shift and go to state 170
    specifier_qualifier_list       shift and go to state 77
    type_specifier                 shift and go to state 78
    type_qualifier                 shift and go to state 79
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28

state 169

    (56) struct_or_union_specifier -> struct_or_union { struct_declaration_list } .

    TYPEDEF         reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    EXTERN          reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    STATIC          reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    AUTO            reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    REGISTER        reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    VOID            reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    CHAR            reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    SHORT           reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    INT             reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    LONG            reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    FLOAT           reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    DOUBLE          reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    SIGNED          reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    UNSIGNED        reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    BOOL            reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    CONST           reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    RESTRICT        reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    VOLATILE        reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    INLINE          reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ENUM            reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    STRUCT          reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    UNION           reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ;               reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    *               reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    IDENTIFIER      reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    (               reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    [               reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ,               reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    )               reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    :               reduce using rule 56 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)


state 170

    (61) struct_declaration_list -> struct_declaration_list struct_declaration .

    }               reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    RESTRICT        reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 61 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 171

    (62) struct_declaration -> specifier_qualifier_list struct_declarator_list . ;
    (68) struct_declarator_list -> struct_declarator_list . , struct_declarator

    ;               shift and go to state 273
    ,               shift and go to state 274


state 172

    (67) struct_declarator_list -> struct_declarator .

    ;               reduce using rule 67 (struct_declarator_list -> struct_declarator .)
    ,               reduce using rule 67 (struct_declarator_list -> struct_declarator .)


state 173

    (69) struct_declarator -> declarator .
    (71) struct_declarator -> declarator . : constant_expression

    ;               reduce using rule 69 (struct_declarator -> declarator .)
    ,               reduce using rule 69 (struct_declarator -> declarator .)
    :               shift and go to state 275


state 174

    (70) struct_declarator -> : . constant_expression
    (108) constant_expression -> . conditional_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    constant_expression            shift and go to state 276
    conditional_expression         shift and go to state 162
    logical_or_expression          shift and go to state 92
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 175

    (63) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    :               reduce using rule 63 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    *               reduce using rule 63 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 63 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    (               reduce using rule 63 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    [               reduce using rule 63 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    )               reduce using rule 63 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 176

    (65) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    :               reduce using rule 65 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    *               reduce using rule 65 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 65 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    (               reduce using rule 65 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    [               reduce using rule 65 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    )               reduce using rule 65 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 177

    (46) enum_specifier -> ENUM { enumerator_list } .

    TYPEDEF         reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    EXTERN          reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    STATIC          reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    AUTO            reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    REGISTER        reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    VOID            reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    CHAR            reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    SHORT           reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    INT             reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    LONG            reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    FLOAT           reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    DOUBLE          reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    SIGNED          reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    UNSIGNED        reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    BOOL            reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    CONST           reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    RESTRICT        reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    VOLATILE        reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    INLINE          reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    ENUM            reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    STRUCT          reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    UNION           reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    ;               reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    *               reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    IDENTIFIER      reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    (               reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    [               reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    ,               reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    )               reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)
    :               reduce using rule 46 (enum_specifier -> ENUM { enumerator_list } .)


state 178

    (48) enum_specifier -> ENUM { enumerator_list , . }
    (52) enumerator_list -> enumerator_list , . enumerator
    (53) enumerator -> . IDENTIFIER
    (54) enumerator -> . IDENTIFIER = constant_expression

    }               shift and go to state 277
    IDENTIFIER      shift and go to state 82

    enumerator                     shift and go to state 278

state 179

    (54) enumerator -> IDENTIFIER = . constant_expression
    (108) constant_expression -> . conditional_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    constant_expression            shift and go to state 279
    conditional_expression         shift and go to state 162
    logical_or_expression          shift and go to state 92
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 180

    (47) enum_specifier -> ENUM IDENTIFIER { enumerator_list . }
    (49) enum_specifier -> ENUM IDENTIFIER { enumerator_list . , }
    (52) enumerator_list -> enumerator_list . , enumerator

    }               shift and go to state 280
    ,               shift and go to state 281


state 181

    (199) initializer -> { initializer_list . }
    (200) initializer -> { initializer_list . , }
    (196) initializer_list -> initializer_list . , initializer
    (197) initializer_list -> initializer_list . , designation initializer

    }               shift and go to state 282
    ,               shift and go to state 283


state 182

    (194) initializer_list -> initializer .

    }               reduce using rule 194 (initializer_list -> initializer .)
    ,               reduce using rule 194 (initializer_list -> initializer .)


state 183

    (195) initializer_list -> designation . initializer
    (198) initializer -> . assignment_expression
    (199) initializer -> . { initializer_list }
    (200) initializer -> . { initializer_list , }
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 89
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    initializer                    shift and go to state 284
    assignment_expression          shift and go to state 88
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 184

    (201) designation -> designator_list . =
    (203) designator_list -> designator_list . designator
    (204) designator -> . [ constant_expression ]
    (205) designator -> . . IDENTIFIER

    =               shift and go to state 285
    [               shift and go to state 186
    .               shift and go to state 187

    designator                     shift and go to state 286

state 185

    (202) designator_list -> designator .

    =               reduce using rule 202 (designator_list -> designator .)
    [               reduce using rule 202 (designator_list -> designator .)
    .               reduce using rule 202 (designator_list -> designator .)


state 186

    (204) designator -> [ . constant_expression ]
    (108) constant_expression -> . conditional_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    constant_expression            shift and go to state 287
    conditional_expression         shift and go to state 162
    logical_or_expression          shift and go to state 92
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 187

    (205) designator -> . . IDENTIFIER

    IDENTIFIER      shift and go to state 288


state 188

    (96) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    unary_expression               shift and go to state 91
    assignment_expression          shift and go to state 289
    conditional_expression         shift and go to state 90
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 189

    (97) assignment_operator -> = .

    INC_OP          reduce using rule 97 (assignment_operator -> = .)
    DEC_OP          reduce using rule 97 (assignment_operator -> = .)
    SIZEOF          reduce using rule 97 (assignment_operator -> = .)
    (               reduce using rule 97 (assignment_operator -> = .)
    &               reduce using rule 97 (assignment_operator -> = .)
    *               reduce using rule 97 (assignment_operator -> = .)
    +               reduce using rule 97 (assignment_operator -> = .)
    -               reduce using rule 97 (assignment_operator -> = .)
    ~               reduce using rule 97 (assignment_operator -> = .)
    !               reduce using rule 97 (assignment_operator -> = .)
    IDENTIFIER      reduce using rule 97 (assignment_operator -> = .)
    CONSTANT        reduce using rule 97 (assignment_operator -> = .)
    STRING_LITERAL  reduce using rule 97 (assignment_operator -> = .)


state 190

    (98) assignment_operator -> MUL_ASSIGN .

    INC_OP          reduce using rule 98 (assignment_operator -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 98 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 98 (assignment_operator -> MUL_ASSIGN .)
    (               reduce using rule 98 (assignment_operator -> MUL_ASSIGN .)
    &               reduce using rule 98 (assignment_operator -> MUL_ASSIGN .)
    *               reduce using rule 98 (assignment_operator -> MUL_ASSIGN .)
    +               reduce using rule 98 (assignment_operator -> MUL_ASSIGN .)
    -               reduce using rule 98 (assignment_operator -> MUL_ASSIGN .)
    ~               reduce using rule 98 (assignment_operator -> MUL_ASSIGN .)
    !               reduce using rule 98 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 98 (assignment_operator -> MUL_ASSIGN .)
    CONSTANT        reduce using rule 98 (assignment_operator -> MUL_ASSIGN .)
    STRING_LITERAL  reduce using rule 98 (assignment_operator -> MUL_ASSIGN .)


state 191

    (99) assignment_operator -> DIV_ASSIGN .

    INC_OP          reduce using rule 99 (assignment_operator -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 99 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 99 (assignment_operator -> DIV_ASSIGN .)
    (               reduce using rule 99 (assignment_operator -> DIV_ASSIGN .)
    &               reduce using rule 99 (assignment_operator -> DIV_ASSIGN .)
    *               reduce using rule 99 (assignment_operator -> DIV_ASSIGN .)
    +               reduce using rule 99 (assignment_operator -> DIV_ASSIGN .)
    -               reduce using rule 99 (assignment_operator -> DIV_ASSIGN .)
    ~               reduce using rule 99 (assignment_operator -> DIV_ASSIGN .)
    !               reduce using rule 99 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 99 (assignment_operator -> DIV_ASSIGN .)
    CONSTANT        reduce using rule 99 (assignment_operator -> DIV_ASSIGN .)
    STRING_LITERAL  reduce using rule 99 (assignment_operator -> DIV_ASSIGN .)


state 192

    (100) assignment_operator -> MOD_ASSIGN .

    INC_OP          reduce using rule 100 (assignment_operator -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 100 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 100 (assignment_operator -> MOD_ASSIGN .)
    (               reduce using rule 100 (assignment_operator -> MOD_ASSIGN .)
    &               reduce using rule 100 (assignment_operator -> MOD_ASSIGN .)
    *               reduce using rule 100 (assignment_operator -> MOD_ASSIGN .)
    +               reduce using rule 100 (assignment_operator -> MOD_ASSIGN .)
    -               reduce using rule 100 (assignment_operator -> MOD_ASSIGN .)
    ~               reduce using rule 100 (assignment_operator -> MOD_ASSIGN .)
    !               reduce using rule 100 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 100 (assignment_operator -> MOD_ASSIGN .)
    CONSTANT        reduce using rule 100 (assignment_operator -> MOD_ASSIGN .)
    STRING_LITERAL  reduce using rule 100 (assignment_operator -> MOD_ASSIGN .)


state 193

    (101) assignment_operator -> ADD_ASSIGN .

    INC_OP          reduce using rule 101 (assignment_operator -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 101 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 101 (assignment_operator -> ADD_ASSIGN .)
    (               reduce using rule 101 (assignment_operator -> ADD_ASSIGN .)
    &               reduce using rule 101 (assignment_operator -> ADD_ASSIGN .)
    *               reduce using rule 101 (assignment_operator -> ADD_ASSIGN .)
    +               reduce using rule 101 (assignment_operator -> ADD_ASSIGN .)
    -               reduce using rule 101 (assignment_operator -> ADD_ASSIGN .)
    ~               reduce using rule 101 (assignment_operator -> ADD_ASSIGN .)
    !               reduce using rule 101 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 101 (assignment_operator -> ADD_ASSIGN .)
    CONSTANT        reduce using rule 101 (assignment_operator -> ADD_ASSIGN .)
    STRING_LITERAL  reduce using rule 101 (assignment_operator -> ADD_ASSIGN .)


state 194

    (102) assignment_operator -> SUB_ASSIGN .

    INC_OP          reduce using rule 102 (assignment_operator -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 102 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 102 (assignment_operator -> SUB_ASSIGN .)
    (               reduce using rule 102 (assignment_operator -> SUB_ASSIGN .)
    &               reduce using rule 102 (assignment_operator -> SUB_ASSIGN .)
    *               reduce using rule 102 (assignment_operator -> SUB_ASSIGN .)
    +               reduce using rule 102 (assignment_operator -> SUB_ASSIGN .)
    -               reduce using rule 102 (assignment_operator -> SUB_ASSIGN .)
    ~               reduce using rule 102 (assignment_operator -> SUB_ASSIGN .)
    !               reduce using rule 102 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 102 (assignment_operator -> SUB_ASSIGN .)
    CONSTANT        reduce using rule 102 (assignment_operator -> SUB_ASSIGN .)
    STRING_LITERAL  reduce using rule 102 (assignment_operator -> SUB_ASSIGN .)


state 195

    (103) assignment_operator -> LEFT_ASSIGN .

    INC_OP          reduce using rule 103 (assignment_operator -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 103 (assignment_operator -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 103 (assignment_operator -> LEFT_ASSIGN .)
    (               reduce using rule 103 (assignment_operator -> LEFT_ASSIGN .)
    &               reduce using rule 103 (assignment_operator -> LEFT_ASSIGN .)
    *               reduce using rule 103 (assignment_operator -> LEFT_ASSIGN .)
    +               reduce using rule 103 (assignment_operator -> LEFT_ASSIGN .)
    -               reduce using rule 103 (assignment_operator -> LEFT_ASSIGN .)
    ~               reduce using rule 103 (assignment_operator -> LEFT_ASSIGN .)
    !               reduce using rule 103 (assignment_operator -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 103 (assignment_operator -> LEFT_ASSIGN .)
    CONSTANT        reduce using rule 103 (assignment_operator -> LEFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 103 (assignment_operator -> LEFT_ASSIGN .)


state 196

    (104) assignment_operator -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 104 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 104 (assignment_operator -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 104 (assignment_operator -> RIGHT_ASSIGN .)
    (               reduce using rule 104 (assignment_operator -> RIGHT_ASSIGN .)
    &               reduce using rule 104 (assignment_operator -> RIGHT_ASSIGN .)
    *               reduce using rule 104 (assignment_operator -> RIGHT_ASSIGN .)
    +               reduce using rule 104 (assignment_operator -> RIGHT_ASSIGN .)
    -               reduce using rule 104 (assignment_operator -> RIGHT_ASSIGN .)
    ~               reduce using rule 104 (assignment_operator -> RIGHT_ASSIGN .)
    !               reduce using rule 104 (assignment_operator -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 104 (assignment_operator -> RIGHT_ASSIGN .)
    CONSTANT        reduce using rule 104 (assignment_operator -> RIGHT_ASSIGN .)
    STRING_LITERAL  reduce using rule 104 (assignment_operator -> RIGHT_ASSIGN .)


state 197

    (105) assignment_operator -> AND_ASSIGN .

    INC_OP          reduce using rule 105 (assignment_operator -> AND_ASSIGN .)
    DEC_OP          reduce using rule 105 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 105 (assignment_operator -> AND_ASSIGN .)
    (               reduce using rule 105 (assignment_operator -> AND_ASSIGN .)
    &               reduce using rule 105 (assignment_operator -> AND_ASSIGN .)
    *               reduce using rule 105 (assignment_operator -> AND_ASSIGN .)
    +               reduce using rule 105 (assignment_operator -> AND_ASSIGN .)
    -               reduce using rule 105 (assignment_operator -> AND_ASSIGN .)
    ~               reduce using rule 105 (assignment_operator -> AND_ASSIGN .)
    !               reduce using rule 105 (assignment_operator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 105 (assignment_operator -> AND_ASSIGN .)
    CONSTANT        reduce using rule 105 (assignment_operator -> AND_ASSIGN .)
    STRING_LITERAL  reduce using rule 105 (assignment_operator -> AND_ASSIGN .)


state 198

    (106) assignment_operator -> XOR_ASSIGN .

    INC_OP          reduce using rule 106 (assignment_operator -> XOR_ASSIGN .)
    DEC_OP          reduce using rule 106 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 106 (assignment_operator -> XOR_ASSIGN .)
    (               reduce using rule 106 (assignment_operator -> XOR_ASSIGN .)
    &               reduce using rule 106 (assignment_operator -> XOR_ASSIGN .)
    *               reduce using rule 106 (assignment_operator -> XOR_ASSIGN .)
    +               reduce using rule 106 (assignment_operator -> XOR_ASSIGN .)
    -               reduce using rule 106 (assignment_operator -> XOR_ASSIGN .)
    ~               reduce using rule 106 (assignment_operator -> XOR_ASSIGN .)
    !               reduce using rule 106 (assignment_operator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 106 (assignment_operator -> XOR_ASSIGN .)
    CONSTANT        reduce using rule 106 (assignment_operator -> XOR_ASSIGN .)
    STRING_LITERAL  reduce using rule 106 (assignment_operator -> XOR_ASSIGN .)


state 199

    (107) assignment_operator -> OR_ASSIGN .

    INC_OP          reduce using rule 107 (assignment_operator -> OR_ASSIGN .)
    DEC_OP          reduce using rule 107 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 107 (assignment_operator -> OR_ASSIGN .)
    (               reduce using rule 107 (assignment_operator -> OR_ASSIGN .)
    &               reduce using rule 107 (assignment_operator -> OR_ASSIGN .)
    *               reduce using rule 107 (assignment_operator -> OR_ASSIGN .)
    +               reduce using rule 107 (assignment_operator -> OR_ASSIGN .)
    -               reduce using rule 107 (assignment_operator -> OR_ASSIGN .)
    ~               reduce using rule 107 (assignment_operator -> OR_ASSIGN .)
    !               reduce using rule 107 (assignment_operator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 107 (assignment_operator -> OR_ASSIGN .)
    CONSTANT        reduce using rule 107 (assignment_operator -> OR_ASSIGN .)
    STRING_LITERAL  reduce using rule 107 (assignment_operator -> OR_ASSIGN .)


state 200

    (110) conditional_expression -> logical_or_expression ? . expression : conditional_expression
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    logical_or_expression          shift and go to state 92
    expression                     shift and go to state 290
    conditional_expression         shift and go to state 90
    assignment_expression          shift and go to state 144
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 201

    (112) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    logical_and_expression         shift and go to state 291
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 202

    (154) postfix_expression -> postfix_expression [ . expression ]
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    postfix_expression             shift and go to state 93
    expression                     shift and go to state 292
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 203

    (155) postfix_expression -> postfix_expression ( . )
    (156) postfix_expression -> postfix_expression ( . argument_expression_list )
    (192) argument_expression_list -> . assignment_expression
    (193) argument_expression_list -> . argument_expression_list , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 293
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    postfix_expression             shift and go to state 93
    argument_expression_list       shift and go to state 294
    assignment_expression          shift and go to state 295
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 204

    (157) postfix_expression -> postfix_expression . . IDENTIFIER

    IDENTIFIER      shift and go to state 296


state 205

    (158) postfix_expression -> postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 297


state 206

    (159) postfix_expression -> postfix_expression INC_OP .

    [               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    (               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    .               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    PTR_OP          reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    DEC_OP          reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    =               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    MUL_ASSIGN      reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    DIV_ASSIGN      reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    MOD_ASSIGN      reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    SUB_ASSIGN      reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ASSIGN     reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ASSIGN    reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    AND_ASSIGN      reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    XOR_ASSIGN      reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    OR_ASSIGN       reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    *               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    /               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    %               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    +               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    -               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    <               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    >               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    &               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    ^               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    |               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    AND_OP          reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    ?               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    OR_OP           reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    ;               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    ,               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    ]               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    MACRO           reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    TYPEDEF         reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    EXTERN          reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    STATIC          reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    AUTO            reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    REGISTER        reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    VOID            reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    CHAR            reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    SHORT           reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    INT             reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    LONG            reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    FLOAT           reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    DOUBLE          reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    SIGNED          reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    UNSIGNED        reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    BOOL            reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    CONST           reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    RESTRICT        reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    VOLATILE        reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    INLINE          reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    ENUM            reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    STRUCT          reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    UNION           reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    $end            reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    }               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    )               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)
    :               reduce using rule 159 (postfix_expression -> postfix_expression INC_OP .)


state 207

    (160) postfix_expression -> postfix_expression DEC_OP .

    [               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    (               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    .               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    PTR_OP          reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    INC_OP          reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    DEC_OP          reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    =               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    MUL_ASSIGN      reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    DIV_ASSIGN      reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    MOD_ASSIGN      reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    ADD_ASSIGN      reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    SUB_ASSIGN      reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ASSIGN     reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    AND_ASSIGN      reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    XOR_ASSIGN      reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    OR_ASSIGN       reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    *               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    /               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    %               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    +               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    -               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_OP         reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_OP        reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    <               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    >               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    LE_OP           reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    GE_OP           reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    EQ_OP           reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    NE_OP           reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    &               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    ^               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    |               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    AND_OP          reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    ?               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    OR_OP           reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    ;               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    ,               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    ]               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    MACRO           reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    TYPEDEF         reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    EXTERN          reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    STATIC          reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    AUTO            reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    REGISTER        reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    VOID            reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    CHAR            reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    SHORT           reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    INT             reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    LONG            reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    FLOAT           reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    DOUBLE          reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    SIGNED          reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    UNSIGNED        reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    BOOL            reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    CONST           reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    RESTRICT        reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    VOLATILE        reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    INLINE          reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    ENUM            reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    STRUCT          reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    UNION           reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    $end            reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    }               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    )               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)
    :               reduce using rule 160 (postfix_expression -> postfix_expression DEC_OP .)


state 208

    (142) unary_expression -> INC_OP unary_expression .

    =               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    *               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    /               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    %               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    +               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    -               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    <               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    >               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    &               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    ^               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    |               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    AND_OP          reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    ?               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    OR_OP           reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    ;               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    ,               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    ]               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    MACRO           reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    TYPEDEF         reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    EXTERN          reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    STATIC          reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    AUTO            reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    REGISTER        reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    VOID            reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    CHAR            reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    SHORT           reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    INT             reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    LONG            reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    FLOAT           reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    DOUBLE          reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    SIGNED          reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    UNSIGNED        reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    BOOL            reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    CONST           reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    RESTRICT        reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    VOLATILE        reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    INLINE          reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    ENUM            reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    STRUCT          reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    UNION           reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    $end            reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    }               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    )               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)
    :               reduce using rule 142 (unary_expression -> INC_OP unary_expression .)


state 209

    (161) postfix_expression -> ( . type_name ) { initializer_list }
    (162) postfix_expression -> ( . type_name ) { initializer_list , }
    (166) primary_expression -> ( . expression )
    (169) type_name -> . specifier_qualifier_list
    (170) type_name -> . specifier_qualifier_list abstract_declarator
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (63) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (64) specifier_qualifier_list -> . type_specifier
    (65) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (66) specifier_qualifier_list -> . type_qualifier
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    ENUM            shift and go to state 34
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    type_name                      shift and go to state 298
    expression                     shift and go to state 215
    specifier_qualifier_list       shift and go to state 216
    assignment_expression          shift and go to state 144
    type_specifier                 shift and go to state 78
    type_qualifier                 shift and go to state 79
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    struct_or_union                shift and go to state 33
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 210

    (143) unary_expression -> DEC_OP unary_expression .

    =               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    *               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    /               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    %               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    +               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    -               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    <               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    >               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    &               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    ^               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    |               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    AND_OP          reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    ?               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    OR_OP           reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    ;               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    ,               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    ]               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    MACRO           reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    TYPEDEF         reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    EXTERN          reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    STATIC          reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    AUTO            reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    REGISTER        reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    VOID            reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    CHAR            reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    SHORT           reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    INT             reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    LONG            reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    FLOAT           reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    DOUBLE          reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    SIGNED          reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    UNSIGNED        reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    BOOL            reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    CONST           reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    RESTRICT        reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    VOLATILE        reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    INLINE          reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    ENUM            reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    STRUCT          reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    UNION           reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    $end            reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    }               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    )               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)
    :               reduce using rule 143 (unary_expression -> DEC_OP unary_expression .)


state 211

    (144) unary_expression -> unary_operator cast_expression .

    =               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    *               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    %               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    LE_OP           reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    GE_OP           reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    NE_OP           reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    &               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    ^               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    |               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    ?               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    ]               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    MACRO           reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    TYPEDEF         reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    EXTERN          reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    STATIC          reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    AUTO            reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    REGISTER        reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    VOID            reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    CHAR            reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    SHORT           reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    INT             reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    LONG            reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    FLOAT           reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    DOUBLE          reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    SIGNED          reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    UNSIGNED        reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    BOOL            reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    CONST           reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    RESTRICT        reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    VOLATILE        reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    INLINE          reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    ENUM            reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    STRUCT          reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    UNION           reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    $end            reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    }               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)
    :               reduce using rule 144 (unary_expression -> unary_operator cast_expression .)


state 212

    (145) unary_expression -> SIZEOF unary_expression .

    =               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    *               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    /               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    %               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    +               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    -               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    <               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    >               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    EQ_OP           reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    NE_OP           reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    &               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    ^               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    |               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    ?               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    ;               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    ,               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    ]               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    MACRO           reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    TYPEDEF         reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    EXTERN          reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    STATIC          reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    AUTO            reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    REGISTER        reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    VOID            reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    CHAR            reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    SHORT           reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    INT             reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    LONG            reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    FLOAT           reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    DOUBLE          reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    SIGNED          reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    UNSIGNED        reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    BOOL            reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    CONST           reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    RESTRICT        reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    VOLATILE        reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    INLINE          reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    ENUM            reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    STRUCT          reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    UNION           reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    $end            reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    }               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    )               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)
    :               reduce using rule 145 (unary_expression -> SIZEOF unary_expression .)


state 213

    (146) unary_expression -> SIZEOF ( . type_name )
    (161) postfix_expression -> ( . type_name ) { initializer_list }
    (162) postfix_expression -> ( . type_name ) { initializer_list , }
    (166) primary_expression -> ( . expression )
    (169) type_name -> . specifier_qualifier_list
    (170) type_name -> . specifier_qualifier_list abstract_declarator
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (63) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (64) specifier_qualifier_list -> . type_specifier
    (65) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (66) specifier_qualifier_list -> . type_qualifier
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    ENUM            shift and go to state 34
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    type_name                      shift and go to state 299
    expression                     shift and go to state 215
    specifier_qualifier_list       shift and go to state 216
    assignment_expression          shift and go to state 144
    type_specifier                 shift and go to state 78
    type_qualifier                 shift and go to state 79
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    struct_or_union                shift and go to state 33
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 214

    (161) postfix_expression -> ( type_name . ) { initializer_list }
    (162) postfix_expression -> ( type_name . ) { initializer_list , }
    (140) cast_expression -> ( type_name . ) cast_expression

    )               shift and go to state 300


state 215

    (166) primary_expression -> ( expression . )
    (168) expression -> expression . , assignment_expression

    )               shift and go to state 301
    ,               shift and go to state 240


state 216

    (169) type_name -> specifier_qualifier_list .
    (170) type_name -> specifier_qualifier_list . abstract_declarator
    (171) abstract_declarator -> . pointer
    (172) abstract_declarator -> . direct_abstract_declarator
    (173) abstract_declarator -> . pointer direct_abstract_declarator
    (74) pointer -> . *
    (75) pointer -> . * type_qualifier_list
    (76) pointer -> . * pointer
    (77) pointer -> . * type_qualifier_list pointer
    (174) direct_abstract_declarator -> . ( abstract_declarator )
    (175) direct_abstract_declarator -> . [ ]
    (176) direct_abstract_declarator -> . [ assignment_expression ]
    (177) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (178) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (179) direct_abstract_declarator -> . [ * ]
    (180) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (181) direct_abstract_declarator -> . ( )
    (182) direct_abstract_declarator -> . ( parameter_type_list )
    (183) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (184) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    )               reduce using rule 169 (type_name -> specifier_qualifier_list .)
    *               shift and go to state 44
    (               shift and go to state 304
    [               shift and go to state 267

    abstract_declarator            shift and go to state 302
    pointer                        shift and go to state 303
    direct_abstract_declarator     shift and go to state 265

state 217

    (114) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    inclusive_or_expression        shift and go to state 305
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 218

    (116) inclusive_or_expression -> inclusive_or_expression | . exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    exclusive_or_expression        shift and go to state 306
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 219

    (118) exclusive_or_expression -> exclusive_or_expression ^ . and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    and_expression                 shift and go to state 307
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 220

    (120) and_expression -> and_expression & . equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    equality_expression            shift and go to state 308
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 221

    (122) equality_expression -> equality_expression EQ_OP . relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    relational_expression          shift and go to state 309
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 222

    (123) equality_expression -> equality_expression NE_OP . relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    relational_expression          shift and go to state 310
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 223

    (125) relational_expression -> relational_expression < . shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    shift_expression               shift and go to state 311
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 224

    (126) relational_expression -> relational_expression > . shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    shift_expression               shift and go to state 312
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 225

    (127) relational_expression -> relational_expression LE_OP . shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    shift_expression               shift and go to state 313
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 226

    (128) relational_expression -> relational_expression GE_OP . shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    shift_expression               shift and go to state 314
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 227

    (130) shift_expression -> shift_expression LEFT_OP . additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    additive_expression            shift and go to state 315
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 228

    (131) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    additive_expression            shift and go to state 316
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 229

    (133) additive_expression -> additive_expression + . multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    multiplicative_expression      shift and go to state 317
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 230

    (134) additive_expression -> additive_expression - . multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    multiplicative_expression      shift and go to state 318
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 231

    (136) multiplicative_expression -> multiplicative_expression * . cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    cast_expression                shift and go to state 319
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 232

    (137) multiplicative_expression -> multiplicative_expression / . cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    cast_expression                shift and go to state 320
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 233

    (138) multiplicative_expression -> multiplicative_expression % . cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    cast_expression                shift and go to state 321
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 234

    (211) compound_statement -> { block_item_list } .

    MACRO           reduce using rule 211 (compound_statement -> { block_item_list } .)
    TYPEDEF         reduce using rule 211 (compound_statement -> { block_item_list } .)
    EXTERN          reduce using rule 211 (compound_statement -> { block_item_list } .)
    STATIC          reduce using rule 211 (compound_statement -> { block_item_list } .)
    AUTO            reduce using rule 211 (compound_statement -> { block_item_list } .)
    REGISTER        reduce using rule 211 (compound_statement -> { block_item_list } .)
    VOID            reduce using rule 211 (compound_statement -> { block_item_list } .)
    CHAR            reduce using rule 211 (compound_statement -> { block_item_list } .)
    SHORT           reduce using rule 211 (compound_statement -> { block_item_list } .)
    INT             reduce using rule 211 (compound_statement -> { block_item_list } .)
    LONG            reduce using rule 211 (compound_statement -> { block_item_list } .)
    FLOAT           reduce using rule 211 (compound_statement -> { block_item_list } .)
    DOUBLE          reduce using rule 211 (compound_statement -> { block_item_list } .)
    SIGNED          reduce using rule 211 (compound_statement -> { block_item_list } .)
    UNSIGNED        reduce using rule 211 (compound_statement -> { block_item_list } .)
    BOOL            reduce using rule 211 (compound_statement -> { block_item_list } .)
    CONST           reduce using rule 211 (compound_statement -> { block_item_list } .)
    RESTRICT        reduce using rule 211 (compound_statement -> { block_item_list } .)
    VOLATILE        reduce using rule 211 (compound_statement -> { block_item_list } .)
    INLINE          reduce using rule 211 (compound_statement -> { block_item_list } .)
    ENUM            reduce using rule 211 (compound_statement -> { block_item_list } .)
    STRUCT          reduce using rule 211 (compound_statement -> { block_item_list } .)
    UNION           reduce using rule 211 (compound_statement -> { block_item_list } .)
    $end            reduce using rule 211 (compound_statement -> { block_item_list } .)
    }               reduce using rule 211 (compound_statement -> { block_item_list } .)
    IDENTIFIER      reduce using rule 211 (compound_statement -> { block_item_list } .)
    CASE            reduce using rule 211 (compound_statement -> { block_item_list } .)
    DEFAULT         reduce using rule 211 (compound_statement -> { block_item_list } .)
    {               reduce using rule 211 (compound_statement -> { block_item_list } .)
    ;               reduce using rule 211 (compound_statement -> { block_item_list } .)
    IF              reduce using rule 211 (compound_statement -> { block_item_list } .)
    SWITCH          reduce using rule 211 (compound_statement -> { block_item_list } .)
    WHILE           reduce using rule 211 (compound_statement -> { block_item_list } .)
    DO              reduce using rule 211 (compound_statement -> { block_item_list } .)
    FOR             reduce using rule 211 (compound_statement -> { block_item_list } .)
    GOTO            reduce using rule 211 (compound_statement -> { block_item_list } .)
    CONTINUE        reduce using rule 211 (compound_statement -> { block_item_list } .)
    BREAK           reduce using rule 211 (compound_statement -> { block_item_list } .)
    RETURN          reduce using rule 211 (compound_statement -> { block_item_list } .)
    INC_OP          reduce using rule 211 (compound_statement -> { block_item_list } .)
    DEC_OP          reduce using rule 211 (compound_statement -> { block_item_list } .)
    SIZEOF          reduce using rule 211 (compound_statement -> { block_item_list } .)
    (               reduce using rule 211 (compound_statement -> { block_item_list } .)
    &               reduce using rule 211 (compound_statement -> { block_item_list } .)
    *               reduce using rule 211 (compound_statement -> { block_item_list } .)
    +               reduce using rule 211 (compound_statement -> { block_item_list } .)
    -               reduce using rule 211 (compound_statement -> { block_item_list } .)
    ~               reduce using rule 211 (compound_statement -> { block_item_list } .)
    !               reduce using rule 211 (compound_statement -> { block_item_list } .)
    CONSTANT        reduce using rule 211 (compound_statement -> { block_item_list } .)
    STRING_LITERAL  reduce using rule 211 (compound_statement -> { block_item_list } .)
    ELSE            reduce using rule 211 (compound_statement -> { block_item_list } .)


state 235

    (213) block_item_list -> block_item_list block_item .

    }               reduce using rule 213 (block_item_list -> block_item_list block_item .)
    IDENTIFIER      reduce using rule 213 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 213 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 213 (block_item_list -> block_item_list block_item .)
    {               reduce using rule 213 (block_item_list -> block_item_list block_item .)
    ;               reduce using rule 213 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 213 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 213 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 213 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 213 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 213 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 213 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 213 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 213 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 213 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 213 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 213 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 213 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 213 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 213 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 213 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 213 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 213 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 213 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 213 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 213 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 213 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 213 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 213 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 213 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 213 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 213 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 213 (block_item_list -> block_item_list block_item .)
    INLINE          reduce using rule 213 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 213 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 213 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 213 (block_item_list -> block_item_list block_item .)
    INC_OP          reduce using rule 213 (block_item_list -> block_item_list block_item .)
    DEC_OP          reduce using rule 213 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 213 (block_item_list -> block_item_list block_item .)
    (               reduce using rule 213 (block_item_list -> block_item_list block_item .)
    &               reduce using rule 213 (block_item_list -> block_item_list block_item .)
    *               reduce using rule 213 (block_item_list -> block_item_list block_item .)
    +               reduce using rule 213 (block_item_list -> block_item_list block_item .)
    -               reduce using rule 213 (block_item_list -> block_item_list block_item .)
    ~               reduce using rule 213 (block_item_list -> block_item_list block_item .)
    !               reduce using rule 213 (block_item_list -> block_item_list block_item .)
    CONSTANT        reduce using rule 213 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 213 (block_item_list -> block_item_list block_item .)


state 236

    (222) labeled_statement -> IDENTIFIER : . statement
    (216) statement -> . labeled_statement
    (217) statement -> . compound_statement
    (218) statement -> . expression_statement
    (219) statement -> . selection_statement
    (220) statement -> . iteration_statement
    (221) statement -> . jump_statement
    (222) labeled_statement -> . IDENTIFIER : statement
    (223) labeled_statement -> . CASE constant_expression : statement
    (224) labeled_statement -> . DEFAULT : statement
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (227) selection_statement -> . IF ( expression ) statement
    (228) selection_statement -> . IF ( expression ) statement ELSE statement
    (229) selection_statement -> . SWITCH ( expression ) statement
    (230) iteration_statement -> . WHILE ( expression ) statement
    (231) iteration_statement -> . DO statement WHILE ( expression ) ;
    (232) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (233) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (235) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (236) jump_statement -> . GOTO IDENTIFIER ;
    (237) jump_statement -> . CONTINUE ;
    (238) jump_statement -> . BREAK ;
    (239) jump_statement -> . RETURN ;
    (240) jump_statement -> . RETURN expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 131
    CASE            shift and go to state 132
    DEFAULT         shift and go to state 133
    {               shift and go to state 61
    ;               shift and go to state 124
    IF              shift and go to state 135
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 137
    DO              shift and go to state 138
    FOR             shift and go to state 139
    GOTO            shift and go to state 140
    CONTINUE        shift and go to state 141
    BREAK           shift and go to state 142
    RETURN          shift and go to state 143
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    statement                      shift and go to state 322
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    expression                     shift and go to state 134
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 237

    (223) labeled_statement -> CASE constant_expression . : statement

    :               shift and go to state 323


state 238

    (224) labeled_statement -> DEFAULT : . statement
    (216) statement -> . labeled_statement
    (217) statement -> . compound_statement
    (218) statement -> . expression_statement
    (219) statement -> . selection_statement
    (220) statement -> . iteration_statement
    (221) statement -> . jump_statement
    (222) labeled_statement -> . IDENTIFIER : statement
    (223) labeled_statement -> . CASE constant_expression : statement
    (224) labeled_statement -> . DEFAULT : statement
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (227) selection_statement -> . IF ( expression ) statement
    (228) selection_statement -> . IF ( expression ) statement ELSE statement
    (229) selection_statement -> . SWITCH ( expression ) statement
    (230) iteration_statement -> . WHILE ( expression ) statement
    (231) iteration_statement -> . DO statement WHILE ( expression ) ;
    (232) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (233) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (235) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (236) jump_statement -> . GOTO IDENTIFIER ;
    (237) jump_statement -> . CONTINUE ;
    (238) jump_statement -> . BREAK ;
    (239) jump_statement -> . RETURN ;
    (240) jump_statement -> . RETURN expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 131
    CASE            shift and go to state 132
    DEFAULT         shift and go to state 133
    {               shift and go to state 61
    ;               shift and go to state 124
    IF              shift and go to state 135
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 137
    DO              shift and go to state 138
    FOR             shift and go to state 139
    GOTO            shift and go to state 140
    CONTINUE        shift and go to state 141
    BREAK           shift and go to state 142
    RETURN          shift and go to state 143
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    statement                      shift and go to state 324
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    expression                     shift and go to state 134
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 239

    (226) expression_statement -> expression ; .

    }               reduce using rule 226 (expression_statement -> expression ; .)
    IDENTIFIER      reduce using rule 226 (expression_statement -> expression ; .)
    CASE            reduce using rule 226 (expression_statement -> expression ; .)
    DEFAULT         reduce using rule 226 (expression_statement -> expression ; .)
    {               reduce using rule 226 (expression_statement -> expression ; .)
    ;               reduce using rule 226 (expression_statement -> expression ; .)
    IF              reduce using rule 226 (expression_statement -> expression ; .)
    SWITCH          reduce using rule 226 (expression_statement -> expression ; .)
    WHILE           reduce using rule 226 (expression_statement -> expression ; .)
    DO              reduce using rule 226 (expression_statement -> expression ; .)
    FOR             reduce using rule 226 (expression_statement -> expression ; .)
    GOTO            reduce using rule 226 (expression_statement -> expression ; .)
    CONTINUE        reduce using rule 226 (expression_statement -> expression ; .)
    BREAK           reduce using rule 226 (expression_statement -> expression ; .)
    RETURN          reduce using rule 226 (expression_statement -> expression ; .)
    TYPEDEF         reduce using rule 226 (expression_statement -> expression ; .)
    EXTERN          reduce using rule 226 (expression_statement -> expression ; .)
    STATIC          reduce using rule 226 (expression_statement -> expression ; .)
    AUTO            reduce using rule 226 (expression_statement -> expression ; .)
    REGISTER        reduce using rule 226 (expression_statement -> expression ; .)
    VOID            reduce using rule 226 (expression_statement -> expression ; .)
    CHAR            reduce using rule 226 (expression_statement -> expression ; .)
    SHORT           reduce using rule 226 (expression_statement -> expression ; .)
    INT             reduce using rule 226 (expression_statement -> expression ; .)
    LONG            reduce using rule 226 (expression_statement -> expression ; .)
    FLOAT           reduce using rule 226 (expression_statement -> expression ; .)
    DOUBLE          reduce using rule 226 (expression_statement -> expression ; .)
    SIGNED          reduce using rule 226 (expression_statement -> expression ; .)
    UNSIGNED        reduce using rule 226 (expression_statement -> expression ; .)
    BOOL            reduce using rule 226 (expression_statement -> expression ; .)
    CONST           reduce using rule 226 (expression_statement -> expression ; .)
    RESTRICT        reduce using rule 226 (expression_statement -> expression ; .)
    VOLATILE        reduce using rule 226 (expression_statement -> expression ; .)
    INLINE          reduce using rule 226 (expression_statement -> expression ; .)
    ENUM            reduce using rule 226 (expression_statement -> expression ; .)
    STRUCT          reduce using rule 226 (expression_statement -> expression ; .)
    UNION           reduce using rule 226 (expression_statement -> expression ; .)
    INC_OP          reduce using rule 226 (expression_statement -> expression ; .)
    DEC_OP          reduce using rule 226 (expression_statement -> expression ; .)
    SIZEOF          reduce using rule 226 (expression_statement -> expression ; .)
    (               reduce using rule 226 (expression_statement -> expression ; .)
    &               reduce using rule 226 (expression_statement -> expression ; .)
    *               reduce using rule 226 (expression_statement -> expression ; .)
    +               reduce using rule 226 (expression_statement -> expression ; .)
    -               reduce using rule 226 (expression_statement -> expression ; .)
    ~               reduce using rule 226 (expression_statement -> expression ; .)
    !               reduce using rule 226 (expression_statement -> expression ; .)
    CONSTANT        reduce using rule 226 (expression_statement -> expression ; .)
    STRING_LITERAL  reduce using rule 226 (expression_statement -> expression ; .)
    ELSE            reduce using rule 226 (expression_statement -> expression ; .)
    )               reduce using rule 226 (expression_statement -> expression ; .)


state 240

    (168) expression -> expression , . assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    assignment_expression          shift and go to state 325
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 241

    (227) selection_statement -> IF ( . expression ) statement
    (228) selection_statement -> IF ( . expression ) statement ELSE statement
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression                     shift and go to state 326
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 242

    (229) selection_statement -> SWITCH ( . expression ) statement
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression                     shift and go to state 327
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 243

    (230) iteration_statement -> WHILE ( . expression ) statement
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression                     shift and go to state 328
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 244

    (231) iteration_statement -> DO statement . WHILE ( expression ) ;

    WHILE           shift and go to state 329


state 245

    (232) iteration_statement -> FOR ( . expression_statement expression_statement ) statement
    (233) iteration_statement -> FOR ( . expression_statement expression_statement expression ) statement
    (234) iteration_statement -> FOR ( . declaration expression_statement ) statement
    (235) iteration_statement -> FOR ( . declaration expression_statement expression ) statement
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (11) declaration -> . declaration_specifiers ;
    (12) declaration -> . declaration_specifiers init_declarator_list ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 124
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    ENUM            shift and go to state 34
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression_statement           shift and go to state 330
    expression                     shift and go to state 134
    declaration                    shift and go to state 331
    declaration_specifiers         shift and go to state 56
    assignment_expression          shift and go to state 144
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    struct_or_union                shift and go to state 33
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 246

    (236) jump_statement -> GOTO IDENTIFIER . ;

    ;               shift and go to state 332


state 247

    (237) jump_statement -> CONTINUE ; .

    }               reduce using rule 237 (jump_statement -> CONTINUE ; .)
    IDENTIFIER      reduce using rule 237 (jump_statement -> CONTINUE ; .)
    CASE            reduce using rule 237 (jump_statement -> CONTINUE ; .)
    DEFAULT         reduce using rule 237 (jump_statement -> CONTINUE ; .)
    {               reduce using rule 237 (jump_statement -> CONTINUE ; .)
    ;               reduce using rule 237 (jump_statement -> CONTINUE ; .)
    IF              reduce using rule 237 (jump_statement -> CONTINUE ; .)
    SWITCH          reduce using rule 237 (jump_statement -> CONTINUE ; .)
    WHILE           reduce using rule 237 (jump_statement -> CONTINUE ; .)
    DO              reduce using rule 237 (jump_statement -> CONTINUE ; .)
    FOR             reduce using rule 237 (jump_statement -> CONTINUE ; .)
    GOTO            reduce using rule 237 (jump_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 237 (jump_statement -> CONTINUE ; .)
    BREAK           reduce using rule 237 (jump_statement -> CONTINUE ; .)
    RETURN          reduce using rule 237 (jump_statement -> CONTINUE ; .)
    TYPEDEF         reduce using rule 237 (jump_statement -> CONTINUE ; .)
    EXTERN          reduce using rule 237 (jump_statement -> CONTINUE ; .)
    STATIC          reduce using rule 237 (jump_statement -> CONTINUE ; .)
    AUTO            reduce using rule 237 (jump_statement -> CONTINUE ; .)
    REGISTER        reduce using rule 237 (jump_statement -> CONTINUE ; .)
    VOID            reduce using rule 237 (jump_statement -> CONTINUE ; .)
    CHAR            reduce using rule 237 (jump_statement -> CONTINUE ; .)
    SHORT           reduce using rule 237 (jump_statement -> CONTINUE ; .)
    INT             reduce using rule 237 (jump_statement -> CONTINUE ; .)
    LONG            reduce using rule 237 (jump_statement -> CONTINUE ; .)
    FLOAT           reduce using rule 237 (jump_statement -> CONTINUE ; .)
    DOUBLE          reduce using rule 237 (jump_statement -> CONTINUE ; .)
    SIGNED          reduce using rule 237 (jump_statement -> CONTINUE ; .)
    UNSIGNED        reduce using rule 237 (jump_statement -> CONTINUE ; .)
    BOOL            reduce using rule 237 (jump_statement -> CONTINUE ; .)
    CONST           reduce using rule 237 (jump_statement -> CONTINUE ; .)
    RESTRICT        reduce using rule 237 (jump_statement -> CONTINUE ; .)
    VOLATILE        reduce using rule 237 (jump_statement -> CONTINUE ; .)
    INLINE          reduce using rule 237 (jump_statement -> CONTINUE ; .)
    ENUM            reduce using rule 237 (jump_statement -> CONTINUE ; .)
    STRUCT          reduce using rule 237 (jump_statement -> CONTINUE ; .)
    UNION           reduce using rule 237 (jump_statement -> CONTINUE ; .)
    INC_OP          reduce using rule 237 (jump_statement -> CONTINUE ; .)
    DEC_OP          reduce using rule 237 (jump_statement -> CONTINUE ; .)
    SIZEOF          reduce using rule 237 (jump_statement -> CONTINUE ; .)
    (               reduce using rule 237 (jump_statement -> CONTINUE ; .)
    &               reduce using rule 237 (jump_statement -> CONTINUE ; .)
    *               reduce using rule 237 (jump_statement -> CONTINUE ; .)
    +               reduce using rule 237 (jump_statement -> CONTINUE ; .)
    -               reduce using rule 237 (jump_statement -> CONTINUE ; .)
    ~               reduce using rule 237 (jump_statement -> CONTINUE ; .)
    !               reduce using rule 237 (jump_statement -> CONTINUE ; .)
    CONSTANT        reduce using rule 237 (jump_statement -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 237 (jump_statement -> CONTINUE ; .)
    ELSE            reduce using rule 237 (jump_statement -> CONTINUE ; .)


state 248

    (238) jump_statement -> BREAK ; .

    }               reduce using rule 238 (jump_statement -> BREAK ; .)
    IDENTIFIER      reduce using rule 238 (jump_statement -> BREAK ; .)
    CASE            reduce using rule 238 (jump_statement -> BREAK ; .)
    DEFAULT         reduce using rule 238 (jump_statement -> BREAK ; .)
    {               reduce using rule 238 (jump_statement -> BREAK ; .)
    ;               reduce using rule 238 (jump_statement -> BREAK ; .)
    IF              reduce using rule 238 (jump_statement -> BREAK ; .)
    SWITCH          reduce using rule 238 (jump_statement -> BREAK ; .)
    WHILE           reduce using rule 238 (jump_statement -> BREAK ; .)
    DO              reduce using rule 238 (jump_statement -> BREAK ; .)
    FOR             reduce using rule 238 (jump_statement -> BREAK ; .)
    GOTO            reduce using rule 238 (jump_statement -> BREAK ; .)
    CONTINUE        reduce using rule 238 (jump_statement -> BREAK ; .)
    BREAK           reduce using rule 238 (jump_statement -> BREAK ; .)
    RETURN          reduce using rule 238 (jump_statement -> BREAK ; .)
    TYPEDEF         reduce using rule 238 (jump_statement -> BREAK ; .)
    EXTERN          reduce using rule 238 (jump_statement -> BREAK ; .)
    STATIC          reduce using rule 238 (jump_statement -> BREAK ; .)
    AUTO            reduce using rule 238 (jump_statement -> BREAK ; .)
    REGISTER        reduce using rule 238 (jump_statement -> BREAK ; .)
    VOID            reduce using rule 238 (jump_statement -> BREAK ; .)
    CHAR            reduce using rule 238 (jump_statement -> BREAK ; .)
    SHORT           reduce using rule 238 (jump_statement -> BREAK ; .)
    INT             reduce using rule 238 (jump_statement -> BREAK ; .)
    LONG            reduce using rule 238 (jump_statement -> BREAK ; .)
    FLOAT           reduce using rule 238 (jump_statement -> BREAK ; .)
    DOUBLE          reduce using rule 238 (jump_statement -> BREAK ; .)
    SIGNED          reduce using rule 238 (jump_statement -> BREAK ; .)
    UNSIGNED        reduce using rule 238 (jump_statement -> BREAK ; .)
    BOOL            reduce using rule 238 (jump_statement -> BREAK ; .)
    CONST           reduce using rule 238 (jump_statement -> BREAK ; .)
    RESTRICT        reduce using rule 238 (jump_statement -> BREAK ; .)
    VOLATILE        reduce using rule 238 (jump_statement -> BREAK ; .)
    INLINE          reduce using rule 238 (jump_statement -> BREAK ; .)
    ENUM            reduce using rule 238 (jump_statement -> BREAK ; .)
    STRUCT          reduce using rule 238 (jump_statement -> BREAK ; .)
    UNION           reduce using rule 238 (jump_statement -> BREAK ; .)
    INC_OP          reduce using rule 238 (jump_statement -> BREAK ; .)
    DEC_OP          reduce using rule 238 (jump_statement -> BREAK ; .)
    SIZEOF          reduce using rule 238 (jump_statement -> BREAK ; .)
    (               reduce using rule 238 (jump_statement -> BREAK ; .)
    &               reduce using rule 238 (jump_statement -> BREAK ; .)
    *               reduce using rule 238 (jump_statement -> BREAK ; .)
    +               reduce using rule 238 (jump_statement -> BREAK ; .)
    -               reduce using rule 238 (jump_statement -> BREAK ; .)
    ~               reduce using rule 238 (jump_statement -> BREAK ; .)
    !               reduce using rule 238 (jump_statement -> BREAK ; .)
    CONSTANT        reduce using rule 238 (jump_statement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 238 (jump_statement -> BREAK ; .)
    ELSE            reduce using rule 238 (jump_statement -> BREAK ; .)


state 249

    (239) jump_statement -> RETURN ; .

    }               reduce using rule 239 (jump_statement -> RETURN ; .)
    IDENTIFIER      reduce using rule 239 (jump_statement -> RETURN ; .)
    CASE            reduce using rule 239 (jump_statement -> RETURN ; .)
    DEFAULT         reduce using rule 239 (jump_statement -> RETURN ; .)
    {               reduce using rule 239 (jump_statement -> RETURN ; .)
    ;               reduce using rule 239 (jump_statement -> RETURN ; .)
    IF              reduce using rule 239 (jump_statement -> RETURN ; .)
    SWITCH          reduce using rule 239 (jump_statement -> RETURN ; .)
    WHILE           reduce using rule 239 (jump_statement -> RETURN ; .)
    DO              reduce using rule 239 (jump_statement -> RETURN ; .)
    FOR             reduce using rule 239 (jump_statement -> RETURN ; .)
    GOTO            reduce using rule 239 (jump_statement -> RETURN ; .)
    CONTINUE        reduce using rule 239 (jump_statement -> RETURN ; .)
    BREAK           reduce using rule 239 (jump_statement -> RETURN ; .)
    RETURN          reduce using rule 239 (jump_statement -> RETURN ; .)
    TYPEDEF         reduce using rule 239 (jump_statement -> RETURN ; .)
    EXTERN          reduce using rule 239 (jump_statement -> RETURN ; .)
    STATIC          reduce using rule 239 (jump_statement -> RETURN ; .)
    AUTO            reduce using rule 239 (jump_statement -> RETURN ; .)
    REGISTER        reduce using rule 239 (jump_statement -> RETURN ; .)
    VOID            reduce using rule 239 (jump_statement -> RETURN ; .)
    CHAR            reduce using rule 239 (jump_statement -> RETURN ; .)
    SHORT           reduce using rule 239 (jump_statement -> RETURN ; .)
    INT             reduce using rule 239 (jump_statement -> RETURN ; .)
    LONG            reduce using rule 239 (jump_statement -> RETURN ; .)
    FLOAT           reduce using rule 239 (jump_statement -> RETURN ; .)
    DOUBLE          reduce using rule 239 (jump_statement -> RETURN ; .)
    SIGNED          reduce using rule 239 (jump_statement -> RETURN ; .)
    UNSIGNED        reduce using rule 239 (jump_statement -> RETURN ; .)
    BOOL            reduce using rule 239 (jump_statement -> RETURN ; .)
    CONST           reduce using rule 239 (jump_statement -> RETURN ; .)
    RESTRICT        reduce using rule 239 (jump_statement -> RETURN ; .)
    VOLATILE        reduce using rule 239 (jump_statement -> RETURN ; .)
    INLINE          reduce using rule 239 (jump_statement -> RETURN ; .)
    ENUM            reduce using rule 239 (jump_statement -> RETURN ; .)
    STRUCT          reduce using rule 239 (jump_statement -> RETURN ; .)
    UNION           reduce using rule 239 (jump_statement -> RETURN ; .)
    INC_OP          reduce using rule 239 (jump_statement -> RETURN ; .)
    DEC_OP          reduce using rule 239 (jump_statement -> RETURN ; .)
    SIZEOF          reduce using rule 239 (jump_statement -> RETURN ; .)
    (               reduce using rule 239 (jump_statement -> RETURN ; .)
    &               reduce using rule 239 (jump_statement -> RETURN ; .)
    *               reduce using rule 239 (jump_statement -> RETURN ; .)
    +               reduce using rule 239 (jump_statement -> RETURN ; .)
    -               reduce using rule 239 (jump_statement -> RETURN ; .)
    ~               reduce using rule 239 (jump_statement -> RETURN ; .)
    !               reduce using rule 239 (jump_statement -> RETURN ; .)
    CONSTANT        reduce using rule 239 (jump_statement -> RETURN ; .)
    STRING_LITERAL  reduce using rule 239 (jump_statement -> RETURN ; .)
    ELSE            reduce using rule 239 (jump_statement -> RETURN ; .)


state 250

    (240) jump_statement -> RETURN expression . ;
    (168) expression -> expression . , assignment_expression

    ;               shift and go to state 333
    ,               shift and go to state 240


state 251

    (82) direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression . ]

    ]               shift and go to state 334


state 252

    (83) direct_declarator -> direct_declarator [ type_qualifier_list ] .

    [               reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    (               reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    =               reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    {               reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    TYPEDEF         reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    EXTERN          reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    STATIC          reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    AUTO            reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    REGISTER        reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    VOID            reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    CHAR            reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    SHORT           reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    INT             reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    LONG            reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    FLOAT           reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    DOUBLE          reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    SIGNED          reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    UNSIGNED        reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    BOOL            reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    CONST           reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    RESTRICT        reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    VOLATILE        reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    INLINE          reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    ENUM            reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    STRUCT          reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    UNION           reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    ;               reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    ,               reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    )               reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    :               reduce using rule 83 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)


state 253

    (86) direct_declarator -> direct_declarator [ type_qualifier_list STATIC . assignment_expression ]
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    assignment_expression          shift and go to state 335
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 254

    (87) direct_declarator -> direct_declarator [ type_qualifier_list * . ]
    (148) unary_operator -> * .

    ]               shift and go to state 336
    (               reduce using rule 148 (unary_operator -> * .)
    INC_OP          reduce using rule 148 (unary_operator -> * .)
    DEC_OP          reduce using rule 148 (unary_operator -> * .)
    SIZEOF          reduce using rule 148 (unary_operator -> * .)
    &               reduce using rule 148 (unary_operator -> * .)
    *               reduce using rule 148 (unary_operator -> * .)
    +               reduce using rule 148 (unary_operator -> * .)
    -               reduce using rule 148 (unary_operator -> * .)
    ~               reduce using rule 148 (unary_operator -> * .)
    !               reduce using rule 148 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 148 (unary_operator -> * .)
    CONSTANT        reduce using rule 148 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 148 (unary_operator -> * .)


state 255

    (84) direct_declarator -> direct_declarator [ assignment_expression ] .

    [               reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    (               reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    =               reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    {               reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    TYPEDEF         reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    EXTERN          reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    STATIC          reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    AUTO            reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    REGISTER        reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    VOID            reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    CHAR            reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    SHORT           reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    INT             reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    LONG            reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    FLOAT           reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    DOUBLE          reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    SIGNED          reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    UNSIGNED        reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    BOOL            reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    CONST           reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    RESTRICT        reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    VOLATILE        reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    INLINE          reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    ENUM            reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    STRUCT          reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    UNION           reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    ;               reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    ,               reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    )               reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    :               reduce using rule 84 (direct_declarator -> direct_declarator [ assignment_expression ] .)


state 256

    (85) direct_declarator -> direct_declarator [ STATIC type_qualifier_list . assignment_expression ]
    (79) type_qualifier_list -> type_qualifier_list . type_qualifier
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    assignment_expression          shift and go to state 337
    type_qualifier                 shift and go to state 159
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 257

    (88) direct_declarator -> direct_declarator [ * ] .

    [               reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    (               reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    =               reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    {               reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    TYPEDEF         reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    EXTERN          reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    STATIC          reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    AUTO            reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    REGISTER        reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    VOID            reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    CHAR            reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    SHORT           reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    INT             reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    LONG            reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    FLOAT           reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    DOUBLE          reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    SIGNED          reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    UNSIGNED        reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    BOOL            reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    CONST           reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    RESTRICT        reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    VOLATILE        reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    INLINE          reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    ENUM            reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    STRUCT          reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    UNION           reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    ;               reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    ,               reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    )               reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)
    :               reduce using rule 88 (direct_declarator -> direct_declarator [ * ] .)


state 258

    (90) direct_declarator -> direct_declarator ( parameter_type_list ) .

    [               reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    (               reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    =               reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    {               reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    TYPEDEF         reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    EXTERN          reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    STATIC          reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    AUTO            reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    REGISTER        reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    VOID            reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    CHAR            reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    SHORT           reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    INT             reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    LONG            reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    FLOAT           reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    DOUBLE          reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    SIGNED          reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    UNSIGNED        reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    BOOL            reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    CONST           reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    RESTRICT        reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    VOLATILE        reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    INLINE          reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ENUM            reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    STRUCT          reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    UNION           reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ;               reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ,               reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    )               reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    :               reduce using rule 90 (direct_declarator -> direct_declarator ( parameter_type_list ) .)


state 259

    (91) direct_declarator -> direct_declarator ( identifier_list ) .

    [               reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    (               reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    =               reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    {               reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    TYPEDEF         reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    EXTERN          reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    STATIC          reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    AUTO            reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    REGISTER        reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    VOID            reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    CHAR            reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    SHORT           reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    INT             reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    LONG            reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    FLOAT           reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    DOUBLE          reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    SIGNED          reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    UNSIGNED        reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    BOOL            reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    CONST           reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    RESTRICT        reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    VOLATILE        reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    INLINE          reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ENUM            reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    STRUCT          reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    UNION           reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ;               reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ,               reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    )               reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)
    :               reduce using rule 91 (direct_declarator -> direct_declarator ( identifier_list ) .)


state 260

    (94) identifier_list -> identifier_list , . IDENTIFIER

    IDENTIFIER      shift and go to state 338


state 261

    (186) parameter_type_list -> parameter_list , . ELLIPSIS
    (188) parameter_list -> parameter_list , . parameter_declaration
    (189) parameter_declaration -> . declaration_specifiers declarator
    (190) parameter_declaration -> . declaration_specifiers abstract_declarator
    (191) parameter_declaration -> . declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 339
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    parameter_declaration          shift and go to state 340
    declaration_specifiers         shift and go to state 157
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 262

    (189) parameter_declaration -> declaration_specifiers declarator .

    ,               reduce using rule 189 (parameter_declaration -> declaration_specifiers declarator .)
    )               reduce using rule 189 (parameter_declaration -> declaration_specifiers declarator .)


state 263

    (190) parameter_declaration -> declaration_specifiers abstract_declarator .

    ,               reduce using rule 190 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    )               reduce using rule 190 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 264

    (72) declarator -> pointer . direct_declarator
    (171) abstract_declarator -> pointer .
    (173) abstract_declarator -> pointer . direct_abstract_declarator
    (80) direct_declarator -> . IDENTIFIER
    (81) direct_declarator -> . ( declarator )
    (82) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (83) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (84) direct_declarator -> . direct_declarator [ assignment_expression ]
    (85) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (86) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (87) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (88) direct_declarator -> . direct_declarator [ * ]
    (89) direct_declarator -> . direct_declarator [ ]
    (90) direct_declarator -> . direct_declarator ( parameter_type_list )
    (91) direct_declarator -> . direct_declarator ( identifier_list )
    (92) direct_declarator -> . direct_declarator ( )
    (174) direct_abstract_declarator -> . ( abstract_declarator )
    (175) direct_abstract_declarator -> . [ ]
    (176) direct_abstract_declarator -> . [ assignment_expression ]
    (177) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (178) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (179) direct_abstract_declarator -> . [ * ]
    (180) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (181) direct_abstract_declarator -> . ( )
    (182) direct_abstract_declarator -> . ( parameter_type_list )
    (183) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (184) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    ,               reduce using rule 171 (abstract_declarator -> pointer .)
    )               reduce using rule 171 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 45
    (               shift and go to state 266
    [               shift and go to state 267

    direct_declarator              shift and go to state 64
    direct_abstract_declarator     shift and go to state 341

state 265

    (172) abstract_declarator -> direct_abstract_declarator .
    (177) direct_abstract_declarator -> direct_abstract_declarator . [ ]
    (178) direct_abstract_declarator -> direct_abstract_declarator . [ assignment_expression ]
    (180) direct_abstract_declarator -> direct_abstract_declarator . [ * ]
    (183) direct_abstract_declarator -> direct_abstract_declarator . ( )
    (184) direct_abstract_declarator -> direct_abstract_declarator . ( parameter_type_list )

    ,               reduce using rule 172 (abstract_declarator -> direct_abstract_declarator .)
    )               reduce using rule 172 (abstract_declarator -> direct_abstract_declarator .)
    [               shift and go to state 342
    (               shift and go to state 343


state 266

    (81) direct_declarator -> ( . declarator )
    (174) direct_abstract_declarator -> ( . abstract_declarator )
    (181) direct_abstract_declarator -> ( . )
    (182) direct_abstract_declarator -> ( . parameter_type_list )
    (72) declarator -> . pointer direct_declarator
    (73) declarator -> . direct_declarator
    (171) abstract_declarator -> . pointer
    (172) abstract_declarator -> . direct_abstract_declarator
    (173) abstract_declarator -> . pointer direct_abstract_declarator
    (185) parameter_type_list -> . parameter_list
    (186) parameter_type_list -> . parameter_list , ELLIPSIS
    (74) pointer -> . *
    (75) pointer -> . * type_qualifier_list
    (76) pointer -> . * pointer
    (77) pointer -> . * type_qualifier_list pointer
    (80) direct_declarator -> . IDENTIFIER
    (81) direct_declarator -> . ( declarator )
    (82) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (83) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (84) direct_declarator -> . direct_declarator [ assignment_expression ]
    (85) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (86) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (87) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (88) direct_declarator -> . direct_declarator [ * ]
    (89) direct_declarator -> . direct_declarator [ ]
    (90) direct_declarator -> . direct_declarator ( parameter_type_list )
    (91) direct_declarator -> . direct_declarator ( identifier_list )
    (92) direct_declarator -> . direct_declarator ( )
    (174) direct_abstract_declarator -> . ( abstract_declarator )
    (175) direct_abstract_declarator -> . [ ]
    (176) direct_abstract_declarator -> . [ assignment_expression ]
    (177) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (178) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (179) direct_abstract_declarator -> . [ * ]
    (180) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (181) direct_abstract_declarator -> . ( )
    (182) direct_abstract_declarator -> . ( parameter_type_list )
    (183) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (184) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (187) parameter_list -> . parameter_declaration
    (188) parameter_list -> . parameter_list , parameter_declaration
    (189) parameter_declaration -> . declaration_specifiers declarator
    (190) parameter_declaration -> . declaration_specifiers abstract_declarator
    (191) parameter_declaration -> . declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    )               shift and go to state 344
    *               shift and go to state 44
    IDENTIFIER      shift and go to state 45
    (               shift and go to state 266
    [               shift and go to state 267
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    declarator                     shift and go to state 70
    abstract_declarator            shift and go to state 345
    parameter_type_list            shift and go to state 346
    pointer                        shift and go to state 264
    direct_declarator              shift and go to state 42
    direct_abstract_declarator     shift and go to state 265
    parameter_list                 shift and go to state 154
    parameter_declaration          shift and go to state 156
    declaration_specifiers         shift and go to state 157
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 267

    (175) direct_abstract_declarator -> [ . ]
    (176) direct_abstract_declarator -> [ . assignment_expression ]
    (179) direct_abstract_declarator -> [ . * ]
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    ]               shift and go to state 347
    *               shift and go to state 349
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    assignment_expression          shift and go to state 348
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 268

    (140) cast_expression -> ( type_name . ) cast_expression
    (161) postfix_expression -> ( type_name . ) { initializer_list }
    (162) postfix_expression -> ( type_name . ) { initializer_list , }

    )               shift and go to state 350


state 269

    (9) headfile -> IDENTIFIER . . IDENTIFIER

    IDENTIFIER      shift and go to state 351


state 270

    (7) macro -> MACRO IDENTIFIER < headfile > .

    MACRO           reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    TYPEDEF         reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    EXTERN          reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    STATIC          reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    AUTO            reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    REGISTER        reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    VOID            reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    CHAR            reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    SHORT           reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    INT             reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    LONG            reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    FLOAT           reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    DOUBLE          reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    SIGNED          reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    UNSIGNED        reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    BOOL            reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    CONST           reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    RESTRICT        reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    VOLATILE        reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    INLINE          reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    ENUM            reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    STRUCT          reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    UNION           reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)
    $end            reduce using rule 7 (macro -> MACRO IDENTIFIER < headfile > .)


state 271

    (8) macro -> MACRO IDENTIFIER " headfile " .

    MACRO           reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    TYPEDEF         reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    EXTERN          reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    STATIC          reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    AUTO            reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    REGISTER        reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    VOID            reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    CHAR            reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    SHORT           reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    INT             reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    LONG            reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    FLOAT           reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    DOUBLE          reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    SIGNED          reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    UNSIGNED        reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    BOOL            reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    CONST           reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    RESTRICT        reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    VOLATILE        reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    INLINE          reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    ENUM            reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    STRUCT          reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    UNION           reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)
    $end            reduce using rule 8 (macro -> MACRO IDENTIFIER " headfile " .)


state 272

    (55) struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .

    TYPEDEF         reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    EXTERN          reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    STATIC          reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    AUTO            reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    REGISTER        reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    VOID            reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    CHAR            reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    SHORT           reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    INT             reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    LONG            reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    FLOAT           reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    DOUBLE          reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    SIGNED          reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    UNSIGNED        reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    BOOL            reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    CONST           reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    RESTRICT        reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    VOLATILE        reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    INLINE          reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ENUM            reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    STRUCT          reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    UNION           reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ;               reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    *               reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    IDENTIFIER      reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    (               reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    [               reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ,               reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    )               reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    :               reduce using rule 55 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)


state 273

    (62) struct_declaration -> specifier_qualifier_list struct_declarator_list ; .

    }               reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOID            reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CHAR            reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SHORT           reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    INT             reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    LONG            reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    FLOAT           reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    DOUBLE          reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SIGNED          reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNSIGNED        reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    BOOL            reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CONST           reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    RESTRICT        reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOLATILE        reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    ENUM            reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    STRUCT          reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNION           reduce using rule 62 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)


state 274

    (68) struct_declarator_list -> struct_declarator_list , . struct_declarator
    (69) struct_declarator -> . declarator
    (70) struct_declarator -> . : constant_expression
    (71) struct_declarator -> . declarator : constant_expression
    (72) declarator -> . pointer direct_declarator
    (73) declarator -> . direct_declarator
    (74) pointer -> . *
    (75) pointer -> . * type_qualifier_list
    (76) pointer -> . * pointer
    (77) pointer -> . * type_qualifier_list pointer
    (80) direct_declarator -> . IDENTIFIER
    (81) direct_declarator -> . ( declarator )
    (82) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (83) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (84) direct_declarator -> . direct_declarator [ assignment_expression ]
    (85) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (86) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (87) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (88) direct_declarator -> . direct_declarator [ * ]
    (89) direct_declarator -> . direct_declarator [ ]
    (90) direct_declarator -> . direct_declarator ( parameter_type_list )
    (91) direct_declarator -> . direct_declarator ( identifier_list )
    (92) direct_declarator -> . direct_declarator ( )

    :               shift and go to state 174
    *               shift and go to state 44
    IDENTIFIER      shift and go to state 45
    (               shift and go to state 46

    struct_declarator              shift and go to state 352
    declarator                     shift and go to state 173
    pointer                        shift and go to state 41
    direct_declarator              shift and go to state 42

state 275

    (71) struct_declarator -> declarator : . constant_expression
    (108) constant_expression -> . conditional_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    constant_expression            shift and go to state 353
    conditional_expression         shift and go to state 162
    logical_or_expression          shift and go to state 92
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 276

    (70) struct_declarator -> : constant_expression .

    ;               reduce using rule 70 (struct_declarator -> : constant_expression .)
    ,               reduce using rule 70 (struct_declarator -> : constant_expression .)


state 277

    (48) enum_specifier -> ENUM { enumerator_list , } .

    TYPEDEF         reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    EXTERN          reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    STATIC          reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    AUTO            reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    REGISTER        reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    VOID            reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    CHAR            reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    SHORT           reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    INT             reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    LONG            reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    FLOAT           reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    DOUBLE          reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    SIGNED          reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    UNSIGNED        reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    BOOL            reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    CONST           reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    RESTRICT        reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    VOLATILE        reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    INLINE          reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    ENUM            reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    STRUCT          reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    UNION           reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    ;               reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    *               reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    IDENTIFIER      reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    (               reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    [               reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    ,               reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    )               reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)
    :               reduce using rule 48 (enum_specifier -> ENUM { enumerator_list , } .)


state 278

    (52) enumerator_list -> enumerator_list , enumerator .

    }               reduce using rule 52 (enumerator_list -> enumerator_list , enumerator .)
    ,               reduce using rule 52 (enumerator_list -> enumerator_list , enumerator .)


state 279

    (54) enumerator -> IDENTIFIER = constant_expression .

    }               reduce using rule 54 (enumerator -> IDENTIFIER = constant_expression .)
    ,               reduce using rule 54 (enumerator -> IDENTIFIER = constant_expression .)


state 280

    (47) enum_specifier -> ENUM IDENTIFIER { enumerator_list } .

    TYPEDEF         reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    EXTERN          reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    STATIC          reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    AUTO            reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    REGISTER        reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    VOID            reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    CHAR            reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    SHORT           reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    INT             reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    LONG            reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    FLOAT           reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    DOUBLE          reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    SIGNED          reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    UNSIGNED        reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    BOOL            reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    CONST           reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    RESTRICT        reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    VOLATILE        reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    INLINE          reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ENUM            reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    STRUCT          reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    UNION           reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ;               reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    *               reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    IDENTIFIER      reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    (               reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    [               reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ,               reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    )               reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    :               reduce using rule 47 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)


state 281

    (49) enum_specifier -> ENUM IDENTIFIER { enumerator_list , . }
    (52) enumerator_list -> enumerator_list , . enumerator
    (53) enumerator -> . IDENTIFIER
    (54) enumerator -> . IDENTIFIER = constant_expression

    }               shift and go to state 354
    IDENTIFIER      shift and go to state 82

    enumerator                     shift and go to state 278

state 282

    (199) initializer -> { initializer_list } .

    ;               reduce using rule 199 (initializer -> { initializer_list } .)
    ,               reduce using rule 199 (initializer -> { initializer_list } .)
    }               reduce using rule 199 (initializer -> { initializer_list } .)


state 283

    (200) initializer -> { initializer_list , . }
    (196) initializer_list -> initializer_list , . initializer
    (197) initializer_list -> initializer_list , . designation initializer
    (198) initializer -> . assignment_expression
    (199) initializer -> . { initializer_list }
    (200) initializer -> . { initializer_list , }
    (201) designation -> . designator_list =
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (202) designator_list -> . designator
    (203) designator_list -> . designator_list designator
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (204) designator -> . [ constant_expression ]
    (205) designator -> . . IDENTIFIER
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 355
    {               shift and go to state 89
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    [               shift and go to state 186
    .               shift and go to state 187
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    initializer                    shift and go to state 356
    designation                    shift and go to state 357
    assignment_expression          shift and go to state 88
    designator_list                shift and go to state 184
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    designator                     shift and go to state 185
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 284

    (195) initializer_list -> designation initializer .

    }               reduce using rule 195 (initializer_list -> designation initializer .)
    ,               reduce using rule 195 (initializer_list -> designation initializer .)


state 285

    (201) designation -> designator_list = .

    {               reduce using rule 201 (designation -> designator_list = .)
    INC_OP          reduce using rule 201 (designation -> designator_list = .)
    DEC_OP          reduce using rule 201 (designation -> designator_list = .)
    SIZEOF          reduce using rule 201 (designation -> designator_list = .)
    (               reduce using rule 201 (designation -> designator_list = .)
    &               reduce using rule 201 (designation -> designator_list = .)
    *               reduce using rule 201 (designation -> designator_list = .)
    +               reduce using rule 201 (designation -> designator_list = .)
    -               reduce using rule 201 (designation -> designator_list = .)
    ~               reduce using rule 201 (designation -> designator_list = .)
    !               reduce using rule 201 (designation -> designator_list = .)
    IDENTIFIER      reduce using rule 201 (designation -> designator_list = .)
    CONSTANT        reduce using rule 201 (designation -> designator_list = .)
    STRING_LITERAL  reduce using rule 201 (designation -> designator_list = .)


state 286

    (203) designator_list -> designator_list designator .

    =               reduce using rule 203 (designator_list -> designator_list designator .)
    [               reduce using rule 203 (designator_list -> designator_list designator .)
    .               reduce using rule 203 (designator_list -> designator_list designator .)


state 287

    (204) designator -> [ constant_expression . ]

    ]               shift and go to state 358


state 288

    (205) designator -> . IDENTIFIER .

    =               reduce using rule 205 (designator -> . IDENTIFIER .)
    [               reduce using rule 205 (designator -> . IDENTIFIER .)
    .               reduce using rule 205 (designator -> . IDENTIFIER .)


state 289

    (96) assignment_expression -> unary_expression assignment_operator assignment_expression .

    ;               reduce using rule 96 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ,               reduce using rule 96 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ]               reduce using rule 96 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    }               reduce using rule 96 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    )               reduce using rule 96 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    :               reduce using rule 96 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 290

    (110) conditional_expression -> logical_or_expression ? expression . : conditional_expression
    (168) expression -> expression . , assignment_expression

    :               shift and go to state 359
    ,               shift and go to state 240


state 291

    (112) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (114) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    ?               reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    OR_OP           reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ;               reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ,               reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ]               reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    MACRO           reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    TYPEDEF         reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    EXTERN          reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    STATIC          reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AUTO            reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    REGISTER        reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    VOID            reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    CHAR            reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    SHORT           reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    INT             reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    LONG            reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    FLOAT           reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    DOUBLE          reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    SIGNED          reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    UNSIGNED        reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    BOOL            reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    CONST           reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    RESTRICT        reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    VOLATILE        reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    INLINE          reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ENUM            reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    STRUCT          reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    UNION           reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    $end            reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    }               reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    )               reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    :               reduce using rule 112 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 217


state 292

    (154) postfix_expression -> postfix_expression [ expression . ]
    (168) expression -> expression . , assignment_expression

    ]               shift and go to state 360
    ,               shift and go to state 240


state 293

    (155) postfix_expression -> postfix_expression ( ) .

    [               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    (               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    .               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    PTR_OP          reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    INC_OP          reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    DEC_OP          reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    =               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    MUL_ASSIGN      reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    DIV_ASSIGN      reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    MOD_ASSIGN      reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    ADD_ASSIGN      reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    SUB_ASSIGN      reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    LEFT_ASSIGN     reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    RIGHT_ASSIGN    reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    AND_ASSIGN      reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    XOR_ASSIGN      reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    OR_ASSIGN       reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    *               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    /               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    %               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    +               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    -               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    LEFT_OP         reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    RIGHT_OP        reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    <               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    >               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    LE_OP           reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    GE_OP           reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    EQ_OP           reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    NE_OP           reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    &               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    ^               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    |               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    AND_OP          reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    ?               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    OR_OP           reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    ;               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    ,               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    ]               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    MACRO           reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    TYPEDEF         reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    EXTERN          reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    STATIC          reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    AUTO            reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    REGISTER        reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    VOID            reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    CHAR            reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    SHORT           reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    INT             reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    LONG            reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    FLOAT           reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    DOUBLE          reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    SIGNED          reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    UNSIGNED        reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    BOOL            reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    CONST           reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    RESTRICT        reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    VOLATILE        reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    INLINE          reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    ENUM            reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    STRUCT          reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    UNION           reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    $end            reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    }               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    )               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)
    :               reduce using rule 155 (postfix_expression -> postfix_expression ( ) .)


state 294

    (156) postfix_expression -> postfix_expression ( argument_expression_list . )
    (193) argument_expression_list -> argument_expression_list . , assignment_expression

    )               shift and go to state 361
    ,               shift and go to state 362


state 295

    (192) argument_expression_list -> assignment_expression .

    )               reduce using rule 192 (argument_expression_list -> assignment_expression .)
    ,               reduce using rule 192 (argument_expression_list -> assignment_expression .)


state 296

    (157) postfix_expression -> postfix_expression . IDENTIFIER .

    [               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    (               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    .               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    PTR_OP          reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    INC_OP          reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    DEC_OP          reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    =               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    AND_ASSIGN      reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    OR_ASSIGN       reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    *               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    /               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    %               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    +               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    -               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    LEFT_OP         reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    RIGHT_OP        reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    <               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    >               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    LE_OP           reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    GE_OP           reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    EQ_OP           reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    NE_OP           reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    &               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ^               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    |               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    AND_OP          reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ?               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    OR_OP           reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ;               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ,               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ]               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    MACRO           reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    TYPEDEF         reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    EXTERN          reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    STATIC          reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    AUTO            reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    REGISTER        reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    VOID            reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    CHAR            reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    SHORT           reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    INT             reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    LONG            reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    FLOAT           reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    DOUBLE          reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    SIGNED          reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    UNSIGNED        reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    BOOL            reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    CONST           reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    RESTRICT        reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    VOLATILE        reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    INLINE          reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ENUM            reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    STRUCT          reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    UNION           reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    $end            reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    }               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    )               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)
    :               reduce using rule 157 (postfix_expression -> postfix_expression . IDENTIFIER .)


state 297

    (158) postfix_expression -> postfix_expression PTR_OP IDENTIFIER .

    [               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    (               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    .               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INC_OP          reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DEC_OP          reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    =               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_ASSIGN      reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_ASSIGN       reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    *               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    /               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    %               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    +               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    -               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_OP         reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_OP        reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    <               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    >               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LE_OP           reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GE_OP           reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ_OP           reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    NE_OP           reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    &               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ^               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    |               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_OP          reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ?               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_OP           reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ;               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ,               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ]               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MACRO           reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    TYPEDEF         reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EXTERN          reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    STATIC          reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AUTO            reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    REGISTER        reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    VOID            reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    CHAR            reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SHORT           reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INT             reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LONG            reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    FLOAT           reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DOUBLE          reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SIGNED          reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    UNSIGNED        reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    BOOL            reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    CONST           reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RESTRICT        reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    VOLATILE        reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INLINE          reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ENUM            reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    STRUCT          reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    UNION           reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    $end            reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    }               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    )               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    :               reduce using rule 158 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)


state 298

    (161) postfix_expression -> ( type_name . ) { initializer_list }
    (162) postfix_expression -> ( type_name . ) { initializer_list , }

    )               shift and go to state 363


state 299

    (146) unary_expression -> SIZEOF ( type_name . )
    (161) postfix_expression -> ( type_name . ) { initializer_list }
    (162) postfix_expression -> ( type_name . ) { initializer_list , }

    )               shift and go to state 364


state 300

    (161) postfix_expression -> ( type_name ) . { initializer_list }
    (162) postfix_expression -> ( type_name ) . { initializer_list , }
    (140) cast_expression -> ( type_name ) . cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    {               shift and go to state 365
    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    cast_expression                shift and go to state 366
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 301

    (166) primary_expression -> ( expression ) .

    [               reduce using rule 166 (primary_expression -> ( expression ) .)
    (               reduce using rule 166 (primary_expression -> ( expression ) .)
    .               reduce using rule 166 (primary_expression -> ( expression ) .)
    PTR_OP          reduce using rule 166 (primary_expression -> ( expression ) .)
    INC_OP          reduce using rule 166 (primary_expression -> ( expression ) .)
    DEC_OP          reduce using rule 166 (primary_expression -> ( expression ) .)
    =               reduce using rule 166 (primary_expression -> ( expression ) .)
    MUL_ASSIGN      reduce using rule 166 (primary_expression -> ( expression ) .)
    DIV_ASSIGN      reduce using rule 166 (primary_expression -> ( expression ) .)
    MOD_ASSIGN      reduce using rule 166 (primary_expression -> ( expression ) .)
    ADD_ASSIGN      reduce using rule 166 (primary_expression -> ( expression ) .)
    SUB_ASSIGN      reduce using rule 166 (primary_expression -> ( expression ) .)
    LEFT_ASSIGN     reduce using rule 166 (primary_expression -> ( expression ) .)
    RIGHT_ASSIGN    reduce using rule 166 (primary_expression -> ( expression ) .)
    AND_ASSIGN      reduce using rule 166 (primary_expression -> ( expression ) .)
    XOR_ASSIGN      reduce using rule 166 (primary_expression -> ( expression ) .)
    OR_ASSIGN       reduce using rule 166 (primary_expression -> ( expression ) .)
    *               reduce using rule 166 (primary_expression -> ( expression ) .)
    /               reduce using rule 166 (primary_expression -> ( expression ) .)
    %               reduce using rule 166 (primary_expression -> ( expression ) .)
    +               reduce using rule 166 (primary_expression -> ( expression ) .)
    -               reduce using rule 166 (primary_expression -> ( expression ) .)
    LEFT_OP         reduce using rule 166 (primary_expression -> ( expression ) .)
    RIGHT_OP        reduce using rule 166 (primary_expression -> ( expression ) .)
    <               reduce using rule 166 (primary_expression -> ( expression ) .)
    >               reduce using rule 166 (primary_expression -> ( expression ) .)
    LE_OP           reduce using rule 166 (primary_expression -> ( expression ) .)
    GE_OP           reduce using rule 166 (primary_expression -> ( expression ) .)
    EQ_OP           reduce using rule 166 (primary_expression -> ( expression ) .)
    NE_OP           reduce using rule 166 (primary_expression -> ( expression ) .)
    &               reduce using rule 166 (primary_expression -> ( expression ) .)
    ^               reduce using rule 166 (primary_expression -> ( expression ) .)
    |               reduce using rule 166 (primary_expression -> ( expression ) .)
    AND_OP          reduce using rule 166 (primary_expression -> ( expression ) .)
    ?               reduce using rule 166 (primary_expression -> ( expression ) .)
    OR_OP           reduce using rule 166 (primary_expression -> ( expression ) .)
    ;               reduce using rule 166 (primary_expression -> ( expression ) .)
    ,               reduce using rule 166 (primary_expression -> ( expression ) .)
    ]               reduce using rule 166 (primary_expression -> ( expression ) .)
    MACRO           reduce using rule 166 (primary_expression -> ( expression ) .)
    TYPEDEF         reduce using rule 166 (primary_expression -> ( expression ) .)
    EXTERN          reduce using rule 166 (primary_expression -> ( expression ) .)
    STATIC          reduce using rule 166 (primary_expression -> ( expression ) .)
    AUTO            reduce using rule 166 (primary_expression -> ( expression ) .)
    REGISTER        reduce using rule 166 (primary_expression -> ( expression ) .)
    VOID            reduce using rule 166 (primary_expression -> ( expression ) .)
    CHAR            reduce using rule 166 (primary_expression -> ( expression ) .)
    SHORT           reduce using rule 166 (primary_expression -> ( expression ) .)
    INT             reduce using rule 166 (primary_expression -> ( expression ) .)
    LONG            reduce using rule 166 (primary_expression -> ( expression ) .)
    FLOAT           reduce using rule 166 (primary_expression -> ( expression ) .)
    DOUBLE          reduce using rule 166 (primary_expression -> ( expression ) .)
    SIGNED          reduce using rule 166 (primary_expression -> ( expression ) .)
    UNSIGNED        reduce using rule 166 (primary_expression -> ( expression ) .)
    BOOL            reduce using rule 166 (primary_expression -> ( expression ) .)
    CONST           reduce using rule 166 (primary_expression -> ( expression ) .)
    RESTRICT        reduce using rule 166 (primary_expression -> ( expression ) .)
    VOLATILE        reduce using rule 166 (primary_expression -> ( expression ) .)
    INLINE          reduce using rule 166 (primary_expression -> ( expression ) .)
    ENUM            reduce using rule 166 (primary_expression -> ( expression ) .)
    STRUCT          reduce using rule 166 (primary_expression -> ( expression ) .)
    UNION           reduce using rule 166 (primary_expression -> ( expression ) .)
    $end            reduce using rule 166 (primary_expression -> ( expression ) .)
    }               reduce using rule 166 (primary_expression -> ( expression ) .)
    )               reduce using rule 166 (primary_expression -> ( expression ) .)
    :               reduce using rule 166 (primary_expression -> ( expression ) .)


state 302

    (170) type_name -> specifier_qualifier_list abstract_declarator .

    )               reduce using rule 170 (type_name -> specifier_qualifier_list abstract_declarator .)


state 303

    (171) abstract_declarator -> pointer .
    (173) abstract_declarator -> pointer . direct_abstract_declarator
    (174) direct_abstract_declarator -> . ( abstract_declarator )
    (175) direct_abstract_declarator -> . [ ]
    (176) direct_abstract_declarator -> . [ assignment_expression ]
    (177) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (178) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (179) direct_abstract_declarator -> . [ * ]
    (180) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (181) direct_abstract_declarator -> . ( )
    (182) direct_abstract_declarator -> . ( parameter_type_list )
    (183) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (184) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    )               reduce using rule 171 (abstract_declarator -> pointer .)
    (               shift and go to state 304
    [               shift and go to state 267

    direct_abstract_declarator     shift and go to state 341

state 304

    (174) direct_abstract_declarator -> ( . abstract_declarator )
    (181) direct_abstract_declarator -> ( . )
    (182) direct_abstract_declarator -> ( . parameter_type_list )
    (171) abstract_declarator -> . pointer
    (172) abstract_declarator -> . direct_abstract_declarator
    (173) abstract_declarator -> . pointer direct_abstract_declarator
    (185) parameter_type_list -> . parameter_list
    (186) parameter_type_list -> . parameter_list , ELLIPSIS
    (74) pointer -> . *
    (75) pointer -> . * type_qualifier_list
    (76) pointer -> . * pointer
    (77) pointer -> . * type_qualifier_list pointer
    (174) direct_abstract_declarator -> . ( abstract_declarator )
    (175) direct_abstract_declarator -> . [ ]
    (176) direct_abstract_declarator -> . [ assignment_expression ]
    (177) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (178) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (179) direct_abstract_declarator -> . [ * ]
    (180) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (181) direct_abstract_declarator -> . ( )
    (182) direct_abstract_declarator -> . ( parameter_type_list )
    (183) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (184) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (187) parameter_list -> . parameter_declaration
    (188) parameter_list -> . parameter_list , parameter_declaration
    (189) parameter_declaration -> . declaration_specifiers declarator
    (190) parameter_declaration -> . declaration_specifiers abstract_declarator
    (191) parameter_declaration -> . declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    )               shift and go to state 344
    *               shift and go to state 44
    (               shift and go to state 304
    [               shift and go to state 267
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    abstract_declarator            shift and go to state 345
    parameter_type_list            shift and go to state 346
    pointer                        shift and go to state 303
    direct_abstract_declarator     shift and go to state 265
    parameter_list                 shift and go to state 154
    parameter_declaration          shift and go to state 156
    declaration_specifiers         shift and go to state 157
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 305

    (114) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (116) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ?               reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ;               reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ,               reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ]               reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    MACRO           reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    TYPEDEF         reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    EXTERN          reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    STATIC          reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    AUTO            reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    REGISTER        reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    VOID            reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    CHAR            reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    SHORT           reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    INT             reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    LONG            reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    FLOAT           reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    DOUBLE          reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    SIGNED          reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    UNSIGNED        reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    BOOL            reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    CONST           reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    RESTRICT        reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    VOLATILE        reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    INLINE          reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ENUM            reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    STRUCT          reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    UNION           reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    $end            reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    }               reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    )               reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    :               reduce using rule 114 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    |               shift and go to state 218


state 306

    (116) inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .
    (118) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    AND_OP          reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ?               reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    OR_OP           reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ;               reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ,               reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ]               reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    MACRO           reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    TYPEDEF         reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    EXTERN          reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    STATIC          reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    AUTO            reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    REGISTER        reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    VOID            reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    CHAR            reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    SHORT           reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    INT             reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    LONG            reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    FLOAT           reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    DOUBLE          reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    SIGNED          reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    UNSIGNED        reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    BOOL            reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    CONST           reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    RESTRICT        reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    VOLATILE        reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    INLINE          reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ENUM            reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    STRUCT          reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    UNION           reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    $end            reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    }               reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    )               reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    :               reduce using rule 116 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ^               shift and go to state 219


state 307

    (118) exclusive_or_expression -> exclusive_or_expression ^ and_expression .
    (120) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    |               reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    AND_OP          reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ?               reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    OR_OP           reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ;               reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ,               reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ]               reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    MACRO           reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    TYPEDEF         reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    EXTERN          reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    STATIC          reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    AUTO            reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    REGISTER        reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    VOID            reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    CHAR            reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    SHORT           reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    INT             reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    LONG            reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    FLOAT           reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    DOUBLE          reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    SIGNED          reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    UNSIGNED        reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    BOOL            reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    CONST           reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    RESTRICT        reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    VOLATILE        reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    INLINE          reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ENUM            reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    STRUCT          reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    UNION           reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    $end            reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    }               reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    )               reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    :               reduce using rule 118 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    &               shift and go to state 220


state 308

    (120) and_expression -> and_expression & equality_expression .
    (122) equality_expression -> equality_expression . EQ_OP relational_expression
    (123) equality_expression -> equality_expression . NE_OP relational_expression

    &               reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    ^               reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    |               reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    AND_OP          reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    ?               reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    OR_OP           reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    ;               reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    ,               reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    ]               reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    MACRO           reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    TYPEDEF         reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    EXTERN          reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    STATIC          reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    AUTO            reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    REGISTER        reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    VOID            reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    CHAR            reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    SHORT           reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    INT             reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    LONG            reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    FLOAT           reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    DOUBLE          reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    SIGNED          reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    UNSIGNED        reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    BOOL            reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    CONST           reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    RESTRICT        reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    VOLATILE        reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    INLINE          reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    ENUM            reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    STRUCT          reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    UNION           reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    $end            reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    }               reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    )               reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    :               reduce using rule 120 (and_expression -> and_expression & equality_expression .)
    EQ_OP           shift and go to state 221
    NE_OP           shift and go to state 222


state 309

    (122) equality_expression -> equality_expression EQ_OP relational_expression .
    (125) relational_expression -> relational_expression . < shift_expression
    (126) relational_expression -> relational_expression . > shift_expression
    (127) relational_expression -> relational_expression . LE_OP shift_expression
    (128) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    &               reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ^               reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    |               reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND_OP          reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ?               reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR_OP           reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ;               reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ,               reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ]               reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    MACRO           reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    TYPEDEF         reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    EXTERN          reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    STATIC          reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AUTO            reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    REGISTER        reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    VOID            reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    CHAR            reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    SHORT           reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    INT             reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LONG            reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    FLOAT           reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    DOUBLE          reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    SIGNED          reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    UNSIGNED        reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    BOOL            reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    CONST           reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RESTRICT        reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    VOLATILE        reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    INLINE          reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ENUM            reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    STRUCT          reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    UNION           reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    $end            reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    }               reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    )               reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    :               reduce using rule 122 (equality_expression -> equality_expression EQ_OP relational_expression .)
    <               shift and go to state 223
    >               shift and go to state 224
    LE_OP           shift and go to state 225
    GE_OP           shift and go to state 226


state 310

    (123) equality_expression -> equality_expression NE_OP relational_expression .
    (125) relational_expression -> relational_expression . < shift_expression
    (126) relational_expression -> relational_expression . > shift_expression
    (127) relational_expression -> relational_expression . LE_OP shift_expression
    (128) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    &               reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    ^               reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    |               reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND_OP          reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    ?               reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR_OP           reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    ;               reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    ,               reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    ]               reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    MACRO           reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    TYPEDEF         reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    EXTERN          reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    STATIC          reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    AUTO            reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    REGISTER        reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    VOID            reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    CHAR            reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    SHORT           reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    INT             reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    LONG            reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    FLOAT           reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    DOUBLE          reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    SIGNED          reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    UNSIGNED        reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    BOOL            reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    CONST           reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    RESTRICT        reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    VOLATILE        reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    INLINE          reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    ENUM            reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    STRUCT          reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    UNION           reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    $end            reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    }               reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    )               reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    :               reduce using rule 123 (equality_expression -> equality_expression NE_OP relational_expression .)
    <               shift and go to state 223
    >               shift and go to state 224
    LE_OP           shift and go to state 225
    GE_OP           shift and go to state 226


state 311

    (125) relational_expression -> relational_expression < shift_expression .
    (130) shift_expression -> shift_expression . LEFT_OP additive_expression
    (131) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    >               reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    LE_OP           reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    GE_OP           reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    EQ_OP           reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    NE_OP           reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    &               reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    ^               reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    |               reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    AND_OP          reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    ?               reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    OR_OP           reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    ;               reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    ,               reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    ]               reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    MACRO           reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    TYPEDEF         reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    EXTERN          reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    STATIC          reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    AUTO            reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    REGISTER        reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    VOID            reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    CHAR            reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    SHORT           reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    INT             reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    LONG            reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    FLOAT           reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    DOUBLE          reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    SIGNED          reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    UNSIGNED        reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    BOOL            reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    CONST           reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    RESTRICT        reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    VOLATILE        reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    INLINE          reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    ENUM            reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    STRUCT          reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    UNION           reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    $end            reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    }               reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    )               reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    :               reduce using rule 125 (relational_expression -> relational_expression < shift_expression .)
    LEFT_OP         shift and go to state 227
    RIGHT_OP        shift and go to state 228


state 312

    (126) relational_expression -> relational_expression > shift_expression .
    (130) shift_expression -> shift_expression . LEFT_OP additive_expression
    (131) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    >               reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    LE_OP           reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    GE_OP           reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    EQ_OP           reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    NE_OP           reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    &               reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    ^               reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    |               reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    AND_OP          reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    ?               reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    OR_OP           reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    ;               reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    ,               reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    ]               reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    MACRO           reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    TYPEDEF         reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    EXTERN          reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    STATIC          reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    AUTO            reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    REGISTER        reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    VOID            reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    CHAR            reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    SHORT           reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    INT             reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    LONG            reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    FLOAT           reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    DOUBLE          reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    SIGNED          reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    UNSIGNED        reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    BOOL            reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    CONST           reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    RESTRICT        reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    VOLATILE        reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    INLINE          reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    ENUM            reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    STRUCT          reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    UNION           reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    $end            reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    }               reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    )               reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    :               reduce using rule 126 (relational_expression -> relational_expression > shift_expression .)
    LEFT_OP         shift and go to state 227
    RIGHT_OP        shift and go to state 228


state 313

    (127) relational_expression -> relational_expression LE_OP shift_expression .
    (130) shift_expression -> shift_expression . LEFT_OP additive_expression
    (131) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    >               reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    &               reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    ^               reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    |               reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    ?               reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    ;               reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    ,               reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    ]               reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    MACRO           reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    TYPEDEF         reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    EXTERN          reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    STATIC          reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    AUTO            reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    REGISTER        reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    VOID            reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    CHAR            reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    SHORT           reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    INT             reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    LONG            reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    FLOAT           reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    DOUBLE          reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    SIGNED          reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    UNSIGNED        reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    BOOL            reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    CONST           reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    RESTRICT        reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    VOLATILE        reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    INLINE          reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    ENUM            reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    STRUCT          reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    UNION           reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    $end            reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    }               reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    )               reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    :               reduce using rule 127 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 227
    RIGHT_OP        shift and go to state 228


state 314

    (128) relational_expression -> relational_expression GE_OP shift_expression .
    (130) shift_expression -> shift_expression . LEFT_OP additive_expression
    (131) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    >               reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    &               reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    ^               reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    |               reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    ?               reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    ;               reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    ,               reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    ]               reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    MACRO           reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    TYPEDEF         reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    EXTERN          reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    STATIC          reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    AUTO            reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    REGISTER        reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    VOID            reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    CHAR            reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    SHORT           reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    INT             reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    LONG            reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    FLOAT           reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    DOUBLE          reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    SIGNED          reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    UNSIGNED        reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    BOOL            reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    CONST           reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    RESTRICT        reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    VOLATILE        reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    INLINE          reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    ENUM            reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    STRUCT          reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    UNION           reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    $end            reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    }               reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    )               reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    :               reduce using rule 128 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 227
    RIGHT_OP        shift and go to state 228


state 315

    (130) shift_expression -> shift_expression LEFT_OP additive_expression .
    (133) additive_expression -> additive_expression . + multiplicative_expression
    (134) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    <               reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    >               reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    &               reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ^               reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    |               reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ?               reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ;               reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ,               reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ]               reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    MACRO           reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    TYPEDEF         reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EXTERN          reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    STATIC          reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AUTO            reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    REGISTER        reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    VOID            reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    CHAR            reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    SHORT           reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    INT             reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LONG            reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    FLOAT           reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    DOUBLE          reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    SIGNED          reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    UNSIGNED        reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    BOOL            reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    CONST           reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RESTRICT        reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    VOLATILE        reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    INLINE          reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ENUM            reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    STRUCT          reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    UNION           reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    $end            reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    }               reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    )               reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    :               reduce using rule 130 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    +               shift and go to state 229
    -               shift and go to state 230


state 316

    (131) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (133) additive_expression -> additive_expression . + multiplicative_expression
    (134) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    <               reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    >               reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    &               reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ^               reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    |               reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ?               reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ;               reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ,               reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ]               reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    MACRO           reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    TYPEDEF         reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EXTERN          reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    STATIC          reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AUTO            reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    REGISTER        reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    VOID            reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    CHAR            reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    SHORT           reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    INT             reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LONG            reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    FLOAT           reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    DOUBLE          reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    SIGNED          reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    UNSIGNED        reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    BOOL            reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    CONST           reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RESTRICT        reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    VOLATILE        reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    INLINE          reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ENUM            reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    STRUCT          reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    UNION           reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    $end            reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    }               reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    )               reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    :               reduce using rule 131 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    +               shift and go to state 229
    -               shift and go to state 230


state 317

    (133) additive_expression -> additive_expression + multiplicative_expression .
    (136) multiplicative_expression -> multiplicative_expression . * cast_expression
    (137) multiplicative_expression -> multiplicative_expression . / cast_expression
    (138) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    LEFT_OP         reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    RIGHT_OP        reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    LE_OP           reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    GE_OP           reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    EQ_OP           reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    NE_OP           reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    &               reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    ^               reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    |               reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    AND_OP          reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    ?               reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    OR_OP           reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    MACRO           reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    TYPEDEF         reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    EXTERN          reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    STATIC          reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    AUTO            reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    REGISTER        reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    VOID            reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    CHAR            reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    SHORT           reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    INT             reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    LONG            reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    FLOAT           reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    DOUBLE          reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    SIGNED          reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    UNSIGNED        reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    BOOL            reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    CONST           reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    RESTRICT        reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    VOLATILE        reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    INLINE          reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    ENUM            reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    STRUCT          reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    UNION           reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    $end            reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    }               reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 133 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 231
    /               shift and go to state 232
    %               shift and go to state 233


state 318

    (134) additive_expression -> additive_expression - multiplicative_expression .
    (136) multiplicative_expression -> multiplicative_expression . * cast_expression
    (137) multiplicative_expression -> multiplicative_expression . / cast_expression
    (138) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    LEFT_OP         reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    RIGHT_OP        reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    LE_OP           reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    GE_OP           reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    EQ_OP           reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    NE_OP           reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    &               reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    ^               reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    |               reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    AND_OP          reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    ?               reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    OR_OP           reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    MACRO           reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    TYPEDEF         reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    EXTERN          reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    STATIC          reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    AUTO            reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    REGISTER        reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    VOID            reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    CHAR            reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    SHORT           reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    INT             reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    LONG            reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    FLOAT           reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    DOUBLE          reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    SIGNED          reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    UNSIGNED        reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    BOOL            reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    CONST           reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    RESTRICT        reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    VOLATILE        reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    INLINE          reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    ENUM            reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    STRUCT          reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    UNION           reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    $end            reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    }               reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 134 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 231
    /               shift and go to state 232
    %               shift and go to state 233


state 319

    (136) multiplicative_expression -> multiplicative_expression * cast_expression .

    *               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    %               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LEFT_OP         reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    RIGHT_OP        reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LE_OP           reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    GE_OP           reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQ_OP           reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    NE_OP           reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    &               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ^               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    |               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    AND_OP          reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ?               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OR_OP           reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ;               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ]               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    MACRO           reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    TYPEDEF         reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EXTERN          reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    STATIC          reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    AUTO            reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    REGISTER        reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    VOID            reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    CHAR            reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SHORT           reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    INT             reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LONG            reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    FLOAT           reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    DOUBLE          reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SIGNED          reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    UNSIGNED        reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    BOOL            reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    CONST           reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    RESTRICT        reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    VOLATILE        reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    INLINE          reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ENUM            reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    STRUCT          reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    UNION           reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    $end            reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    }               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    :               reduce using rule 136 (multiplicative_expression -> multiplicative_expression * cast_expression .)


state 320

    (137) multiplicative_expression -> multiplicative_expression / cast_expression .

    *               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    %               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LEFT_OP         reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    RIGHT_OP        reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LE_OP           reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    GE_OP           reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQ_OP           reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    NE_OP           reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    &               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ^               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    |               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    AND_OP          reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ?               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OR_OP           reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ;               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ]               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    MACRO           reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    TYPEDEF         reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EXTERN          reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    STATIC          reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    AUTO            reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    REGISTER        reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    VOID            reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    CHAR            reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SHORT           reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    INT             reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LONG            reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    FLOAT           reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    DOUBLE          reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SIGNED          reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    UNSIGNED        reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    BOOL            reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    CONST           reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    RESTRICT        reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    VOLATILE        reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    INLINE          reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ENUM            reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    STRUCT          reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    UNION           reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    $end            reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    }               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    :               reduce using rule 137 (multiplicative_expression -> multiplicative_expression / cast_expression .)


state 321

    (138) multiplicative_expression -> multiplicative_expression % cast_expression .

    *               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    %               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LEFT_OP         reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    RIGHT_OP        reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LE_OP           reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    GE_OP           reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQ_OP           reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    NE_OP           reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    &               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ^               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    |               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    AND_OP          reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ?               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OR_OP           reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ;               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ]               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    MACRO           reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    TYPEDEF         reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EXTERN          reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    STATIC          reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    AUTO            reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    REGISTER        reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    VOID            reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    CHAR            reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SHORT           reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    INT             reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LONG            reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    FLOAT           reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    DOUBLE          reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SIGNED          reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    UNSIGNED        reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    BOOL            reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    CONST           reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    RESTRICT        reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    VOLATILE        reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    INLINE          reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ENUM            reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    STRUCT          reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    UNION           reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    $end            reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    }               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    :               reduce using rule 138 (multiplicative_expression -> multiplicative_expression % cast_expression .)


state 322

    (222) labeled_statement -> IDENTIFIER : statement .

    }               reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    IDENTIFIER      reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    CASE            reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    DEFAULT         reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    {               reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    ;               reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    IF              reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    SWITCH          reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    WHILE           reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    DO              reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    FOR             reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    GOTO            reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    CONTINUE        reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    BREAK           reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    RETURN          reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    TYPEDEF         reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    EXTERN          reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    STATIC          reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    AUTO            reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    REGISTER        reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    VOID            reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    CHAR            reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    SHORT           reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    INT             reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    LONG            reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    FLOAT           reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    DOUBLE          reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    SIGNED          reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    UNSIGNED        reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    BOOL            reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    CONST           reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    RESTRICT        reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    VOLATILE        reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    INLINE          reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    ENUM            reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    STRUCT          reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    UNION           reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    INC_OP          reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    DEC_OP          reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    SIZEOF          reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    (               reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    &               reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    *               reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    +               reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    -               reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    ~               reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    !               reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    CONSTANT        reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    STRING_LITERAL  reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)
    ELSE            reduce using rule 222 (labeled_statement -> IDENTIFIER : statement .)


state 323

    (223) labeled_statement -> CASE constant_expression : . statement
    (216) statement -> . labeled_statement
    (217) statement -> . compound_statement
    (218) statement -> . expression_statement
    (219) statement -> . selection_statement
    (220) statement -> . iteration_statement
    (221) statement -> . jump_statement
    (222) labeled_statement -> . IDENTIFIER : statement
    (223) labeled_statement -> . CASE constant_expression : statement
    (224) labeled_statement -> . DEFAULT : statement
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (227) selection_statement -> . IF ( expression ) statement
    (228) selection_statement -> . IF ( expression ) statement ELSE statement
    (229) selection_statement -> . SWITCH ( expression ) statement
    (230) iteration_statement -> . WHILE ( expression ) statement
    (231) iteration_statement -> . DO statement WHILE ( expression ) ;
    (232) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (233) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (235) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (236) jump_statement -> . GOTO IDENTIFIER ;
    (237) jump_statement -> . CONTINUE ;
    (238) jump_statement -> . BREAK ;
    (239) jump_statement -> . RETURN ;
    (240) jump_statement -> . RETURN expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 131
    CASE            shift and go to state 132
    DEFAULT         shift and go to state 133
    {               shift and go to state 61
    ;               shift and go to state 124
    IF              shift and go to state 135
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 137
    DO              shift and go to state 138
    FOR             shift and go to state 139
    GOTO            shift and go to state 140
    CONTINUE        shift and go to state 141
    BREAK           shift and go to state 142
    RETURN          shift and go to state 143
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    statement                      shift and go to state 367
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    expression                     shift and go to state 134
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 324

    (224) labeled_statement -> DEFAULT : statement .

    }               reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    IDENTIFIER      reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    CASE            reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    DEFAULT         reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    {               reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    ;               reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    IF              reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    SWITCH          reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    WHILE           reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    DO              reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    FOR             reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    GOTO            reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    CONTINUE        reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    BREAK           reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    RETURN          reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    TYPEDEF         reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    EXTERN          reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    STATIC          reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    AUTO            reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    REGISTER        reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    VOID            reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    CHAR            reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    SHORT           reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    INT             reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    LONG            reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    FLOAT           reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    DOUBLE          reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    SIGNED          reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    UNSIGNED        reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    BOOL            reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    CONST           reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    RESTRICT        reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    VOLATILE        reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    INLINE          reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    ENUM            reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    STRUCT          reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    UNION           reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    INC_OP          reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    DEC_OP          reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    SIZEOF          reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    (               reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    &               reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    *               reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    +               reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    -               reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    ~               reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    !               reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    CONSTANT        reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    STRING_LITERAL  reduce using rule 224 (labeled_statement -> DEFAULT : statement .)
    ELSE            reduce using rule 224 (labeled_statement -> DEFAULT : statement .)


state 325

    (168) expression -> expression , assignment_expression .

    ;               reduce using rule 168 (expression -> expression , assignment_expression .)
    ,               reduce using rule 168 (expression -> expression , assignment_expression .)
    )               reduce using rule 168 (expression -> expression , assignment_expression .)
    :               reduce using rule 168 (expression -> expression , assignment_expression .)
    ]               reduce using rule 168 (expression -> expression , assignment_expression .)


state 326

    (227) selection_statement -> IF ( expression . ) statement
    (228) selection_statement -> IF ( expression . ) statement ELSE statement
    (168) expression -> expression . , assignment_expression

    )               shift and go to state 368
    ,               shift and go to state 240


state 327

    (229) selection_statement -> SWITCH ( expression . ) statement
    (168) expression -> expression . , assignment_expression

    )               shift and go to state 369
    ,               shift and go to state 240


state 328

    (230) iteration_statement -> WHILE ( expression . ) statement
    (168) expression -> expression . , assignment_expression

    )               shift and go to state 370
    ,               shift and go to state 240


state 329

    (231) iteration_statement -> DO statement WHILE . ( expression ) ;

    (               shift and go to state 371


state 330

    (232) iteration_statement -> FOR ( expression_statement . expression_statement ) statement
    (233) iteration_statement -> FOR ( expression_statement . expression_statement expression ) statement
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 124
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression_statement           shift and go to state 372
    expression                     shift and go to state 134
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 331

    (234) iteration_statement -> FOR ( declaration . expression_statement ) statement
    (235) iteration_statement -> FOR ( declaration . expression_statement expression ) statement
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 124
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression_statement           shift and go to state 373
    expression                     shift and go to state 134
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 332

    (236) jump_statement -> GOTO IDENTIFIER ; .

    }               reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    CASE            reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    DEFAULT         reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    {               reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    ;               reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    IF              reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    SWITCH          reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    WHILE           reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    DO              reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    FOR             reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    GOTO            reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    CONTINUE        reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    BREAK           reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    RETURN          reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    TYPEDEF         reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    EXTERN          reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    STATIC          reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    AUTO            reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    REGISTER        reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    VOID            reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    CHAR            reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    SHORT           reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    INT             reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    LONG            reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    FLOAT           reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    DOUBLE          reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    SIGNED          reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    UNSIGNED        reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    BOOL            reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    CONST           reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    RESTRICT        reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    VOLATILE        reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    INLINE          reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    ENUM            reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    STRUCT          reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    UNION           reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    INC_OP          reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    DEC_OP          reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    SIZEOF          reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    (               reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    &               reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    *               reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    +               reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    -               reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    ~               reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    !               reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    CONSTANT        reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)
    ELSE            reduce using rule 236 (jump_statement -> GOTO IDENTIFIER ; .)


state 333

    (240) jump_statement -> RETURN expression ; .

    }               reduce using rule 240 (jump_statement -> RETURN expression ; .)
    IDENTIFIER      reduce using rule 240 (jump_statement -> RETURN expression ; .)
    CASE            reduce using rule 240 (jump_statement -> RETURN expression ; .)
    DEFAULT         reduce using rule 240 (jump_statement -> RETURN expression ; .)
    {               reduce using rule 240 (jump_statement -> RETURN expression ; .)
    ;               reduce using rule 240 (jump_statement -> RETURN expression ; .)
    IF              reduce using rule 240 (jump_statement -> RETURN expression ; .)
    SWITCH          reduce using rule 240 (jump_statement -> RETURN expression ; .)
    WHILE           reduce using rule 240 (jump_statement -> RETURN expression ; .)
    DO              reduce using rule 240 (jump_statement -> RETURN expression ; .)
    FOR             reduce using rule 240 (jump_statement -> RETURN expression ; .)
    GOTO            reduce using rule 240 (jump_statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 240 (jump_statement -> RETURN expression ; .)
    BREAK           reduce using rule 240 (jump_statement -> RETURN expression ; .)
    RETURN          reduce using rule 240 (jump_statement -> RETURN expression ; .)
    TYPEDEF         reduce using rule 240 (jump_statement -> RETURN expression ; .)
    EXTERN          reduce using rule 240 (jump_statement -> RETURN expression ; .)
    STATIC          reduce using rule 240 (jump_statement -> RETURN expression ; .)
    AUTO            reduce using rule 240 (jump_statement -> RETURN expression ; .)
    REGISTER        reduce using rule 240 (jump_statement -> RETURN expression ; .)
    VOID            reduce using rule 240 (jump_statement -> RETURN expression ; .)
    CHAR            reduce using rule 240 (jump_statement -> RETURN expression ; .)
    SHORT           reduce using rule 240 (jump_statement -> RETURN expression ; .)
    INT             reduce using rule 240 (jump_statement -> RETURN expression ; .)
    LONG            reduce using rule 240 (jump_statement -> RETURN expression ; .)
    FLOAT           reduce using rule 240 (jump_statement -> RETURN expression ; .)
    DOUBLE          reduce using rule 240 (jump_statement -> RETURN expression ; .)
    SIGNED          reduce using rule 240 (jump_statement -> RETURN expression ; .)
    UNSIGNED        reduce using rule 240 (jump_statement -> RETURN expression ; .)
    BOOL            reduce using rule 240 (jump_statement -> RETURN expression ; .)
    CONST           reduce using rule 240 (jump_statement -> RETURN expression ; .)
    RESTRICT        reduce using rule 240 (jump_statement -> RETURN expression ; .)
    VOLATILE        reduce using rule 240 (jump_statement -> RETURN expression ; .)
    INLINE          reduce using rule 240 (jump_statement -> RETURN expression ; .)
    ENUM            reduce using rule 240 (jump_statement -> RETURN expression ; .)
    STRUCT          reduce using rule 240 (jump_statement -> RETURN expression ; .)
    UNION           reduce using rule 240 (jump_statement -> RETURN expression ; .)
    INC_OP          reduce using rule 240 (jump_statement -> RETURN expression ; .)
    DEC_OP          reduce using rule 240 (jump_statement -> RETURN expression ; .)
    SIZEOF          reduce using rule 240 (jump_statement -> RETURN expression ; .)
    (               reduce using rule 240 (jump_statement -> RETURN expression ; .)
    &               reduce using rule 240 (jump_statement -> RETURN expression ; .)
    *               reduce using rule 240 (jump_statement -> RETURN expression ; .)
    +               reduce using rule 240 (jump_statement -> RETURN expression ; .)
    -               reduce using rule 240 (jump_statement -> RETURN expression ; .)
    ~               reduce using rule 240 (jump_statement -> RETURN expression ; .)
    !               reduce using rule 240 (jump_statement -> RETURN expression ; .)
    CONSTANT        reduce using rule 240 (jump_statement -> RETURN expression ; .)
    STRING_LITERAL  reduce using rule 240 (jump_statement -> RETURN expression ; .)
    ELSE            reduce using rule 240 (jump_statement -> RETURN expression ; .)


state 334

    (82) direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .

    [               reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    (               reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    =               reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    {               reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    TYPEDEF         reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    EXTERN          reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    STATIC          reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    AUTO            reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    REGISTER        reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    VOID            reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    CHAR            reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    SHORT           reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    INT             reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    LONG            reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    FLOAT           reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    DOUBLE          reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    SIGNED          reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    UNSIGNED        reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    BOOL            reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    CONST           reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    RESTRICT        reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    VOLATILE        reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    INLINE          reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    ENUM            reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    STRUCT          reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    UNION           reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    ;               reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    ,               reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    )               reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    :               reduce using rule 82 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)


state 335

    (86) direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression . ]

    ]               shift and go to state 374


state 336

    (87) direct_declarator -> direct_declarator [ type_qualifier_list * ] .

    [               reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    (               reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    =               reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    {               reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    TYPEDEF         reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    EXTERN          reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    STATIC          reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    AUTO            reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    REGISTER        reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    VOID            reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    CHAR            reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    SHORT           reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    INT             reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    LONG            reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    FLOAT           reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    DOUBLE          reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    SIGNED          reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    UNSIGNED        reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    BOOL            reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    CONST           reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    RESTRICT        reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    VOLATILE        reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    INLINE          reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    ENUM            reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    STRUCT          reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    UNION           reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    ;               reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    ,               reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    )               reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    :               reduce using rule 87 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)


state 337

    (85) direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression . ]

    ]               shift and go to state 375


state 338

    (94) identifier_list -> identifier_list , IDENTIFIER .

    )               reduce using rule 94 (identifier_list -> identifier_list , IDENTIFIER .)
    ,               reduce using rule 94 (identifier_list -> identifier_list , IDENTIFIER .)


state 339

    (186) parameter_type_list -> parameter_list , ELLIPSIS .

    )               reduce using rule 186 (parameter_type_list -> parameter_list , ELLIPSIS .)


state 340

    (188) parameter_list -> parameter_list , parameter_declaration .

    ,               reduce using rule 188 (parameter_list -> parameter_list , parameter_declaration .)
    )               reduce using rule 188 (parameter_list -> parameter_list , parameter_declaration .)


state 341

    (173) abstract_declarator -> pointer direct_abstract_declarator .
    (177) direct_abstract_declarator -> direct_abstract_declarator . [ ]
    (178) direct_abstract_declarator -> direct_abstract_declarator . [ assignment_expression ]
    (180) direct_abstract_declarator -> direct_abstract_declarator . [ * ]
    (183) direct_abstract_declarator -> direct_abstract_declarator . ( )
    (184) direct_abstract_declarator -> direct_abstract_declarator . ( parameter_type_list )

    ,               reduce using rule 173 (abstract_declarator -> pointer direct_abstract_declarator .)
    )               reduce using rule 173 (abstract_declarator -> pointer direct_abstract_declarator .)
    [               shift and go to state 342
    (               shift and go to state 343


state 342

    (177) direct_abstract_declarator -> direct_abstract_declarator [ . ]
    (178) direct_abstract_declarator -> direct_abstract_declarator [ . assignment_expression ]
    (180) direct_abstract_declarator -> direct_abstract_declarator [ . * ]
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    ]               shift and go to state 376
    *               shift and go to state 378
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    assignment_expression          shift and go to state 377
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 343

    (183) direct_abstract_declarator -> direct_abstract_declarator ( . )
    (184) direct_abstract_declarator -> direct_abstract_declarator ( . parameter_type_list )
    (185) parameter_type_list -> . parameter_list
    (186) parameter_type_list -> . parameter_list , ELLIPSIS
    (187) parameter_list -> . parameter_declaration
    (188) parameter_list -> . parameter_list , parameter_declaration
    (189) parameter_declaration -> . declaration_specifiers declarator
    (190) parameter_declaration -> . declaration_specifiers abstract_declarator
    (191) parameter_declaration -> . declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (19) declaration_specifiers -> . type_specifier
    (20) declaration_specifiers -> . type_specifier declaration_specifiers
    (21) declaration_specifiers -> . type_qualifier
    (22) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) declaration_specifiers -> . function_specifier
    (24) declaration_specifiers -> . function_specifier declaration_specifiers
    (25) storage_class_specifier -> . TYPEDEF
    (26) storage_class_specifier -> . EXTERN
    (27) storage_class_specifier -> . STATIC
    (28) storage_class_specifier -> . AUTO
    (29) storage_class_specifier -> . REGISTER
    (31) type_specifier -> . VOID
    (32) type_specifier -> . CHAR
    (33) type_specifier -> . SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . FLOAT
    (37) type_specifier -> . DOUBLE
    (38) type_specifier -> . SIGNED
    (39) type_specifier -> . UNSIGNED
    (40) type_specifier -> . BOOL
    (41) type_specifier -> . struct_or_union_specifier
    (42) type_specifier -> . enum_specifier
    (43) type_qualifier -> . CONST
    (44) type_qualifier -> . RESTRICT
    (45) type_qualifier -> . VOLATILE
    (30) function_specifier -> . INLINE
    (55) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (56) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (57) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (46) enum_specifier -> . ENUM { enumerator_list }
    (47) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (48) enum_specifier -> . ENUM { enumerator_list , }
    (49) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (50) enum_specifier -> . ENUM IDENTIFIER
    (58) struct_or_union -> . STRUCT
    (59) struct_or_union -> . UNION

    )               shift and go to state 379
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    BOOL            shift and go to state 26
    CONST           shift and go to state 29
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    ENUM            shift and go to state 34
    STRUCT          shift and go to state 35
    UNION           shift and go to state 36

    parameter_type_list            shift and go to state 380
    parameter_list                 shift and go to state 154
    parameter_declaration          shift and go to state 156
    declaration_specifiers         shift and go to state 157
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 33

state 344

    (181) direct_abstract_declarator -> ( ) .

    [               reduce using rule 181 (direct_abstract_declarator -> ( ) .)
    (               reduce using rule 181 (direct_abstract_declarator -> ( ) .)
    ,               reduce using rule 181 (direct_abstract_declarator -> ( ) .)
    )               reduce using rule 181 (direct_abstract_declarator -> ( ) .)


state 345

    (174) direct_abstract_declarator -> ( abstract_declarator . )

    )               shift and go to state 381


state 346

    (182) direct_abstract_declarator -> ( parameter_type_list . )

    )               shift and go to state 382


state 347

    (175) direct_abstract_declarator -> [ ] .

    [               reduce using rule 175 (direct_abstract_declarator -> [ ] .)
    (               reduce using rule 175 (direct_abstract_declarator -> [ ] .)
    ,               reduce using rule 175 (direct_abstract_declarator -> [ ] .)
    )               reduce using rule 175 (direct_abstract_declarator -> [ ] .)


state 348

    (176) direct_abstract_declarator -> [ assignment_expression . ]

    ]               shift and go to state 383


state 349

    (179) direct_abstract_declarator -> [ * . ]
    (148) unary_operator -> * .

    ]               shift and go to state 384
    (               reduce using rule 148 (unary_operator -> * .)
    INC_OP          reduce using rule 148 (unary_operator -> * .)
    DEC_OP          reduce using rule 148 (unary_operator -> * .)
    SIZEOF          reduce using rule 148 (unary_operator -> * .)
    &               reduce using rule 148 (unary_operator -> * .)
    *               reduce using rule 148 (unary_operator -> * .)
    +               reduce using rule 148 (unary_operator -> * .)
    -               reduce using rule 148 (unary_operator -> * .)
    ~               reduce using rule 148 (unary_operator -> * .)
    !               reduce using rule 148 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 148 (unary_operator -> * .)
    CONSTANT        reduce using rule 148 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 148 (unary_operator -> * .)


state 350

    (140) cast_expression -> ( type_name ) . cast_expression
    (161) postfix_expression -> ( type_name ) . { initializer_list }
    (162) postfix_expression -> ( type_name ) . { initializer_list , }
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    {               shift and go to state 365
    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    cast_expression                shift and go to state 366
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 351

    (9) headfile -> IDENTIFIER . IDENTIFIER .

    >               reduce using rule 9 (headfile -> IDENTIFIER . IDENTIFIER .)
    "               reduce using rule 9 (headfile -> IDENTIFIER . IDENTIFIER .)


state 352

    (68) struct_declarator_list -> struct_declarator_list , struct_declarator .

    ;               reduce using rule 68 (struct_declarator_list -> struct_declarator_list , struct_declarator .)
    ,               reduce using rule 68 (struct_declarator_list -> struct_declarator_list , struct_declarator .)


state 353

    (71) struct_declarator -> declarator : constant_expression .

    ;               reduce using rule 71 (struct_declarator -> declarator : constant_expression .)
    ,               reduce using rule 71 (struct_declarator -> declarator : constant_expression .)


state 354

    (49) enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .

    TYPEDEF         reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    EXTERN          reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    STATIC          reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    AUTO            reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    REGISTER        reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    VOID            reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    CHAR            reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    SHORT           reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    INT             reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    LONG            reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    FLOAT           reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    DOUBLE          reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    SIGNED          reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    UNSIGNED        reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    BOOL            reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    CONST           reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    RESTRICT        reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    VOLATILE        reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    INLINE          reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    ENUM            reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    STRUCT          reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    UNION           reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    ;               reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    *               reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    IDENTIFIER      reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    (               reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    [               reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    ,               reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    )               reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    :               reduce using rule 49 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)


state 355

    (200) initializer -> { initializer_list , } .

    ;               reduce using rule 200 (initializer -> { initializer_list , } .)
    ,               reduce using rule 200 (initializer -> { initializer_list , } .)
    }               reduce using rule 200 (initializer -> { initializer_list , } .)


state 356

    (196) initializer_list -> initializer_list , initializer .

    }               reduce using rule 196 (initializer_list -> initializer_list , initializer .)
    ,               reduce using rule 196 (initializer_list -> initializer_list , initializer .)


state 357

    (197) initializer_list -> initializer_list , designation . initializer
    (198) initializer -> . assignment_expression
    (199) initializer -> . { initializer_list }
    (200) initializer -> . { initializer_list , }
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 89
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    initializer                    shift and go to state 385
    assignment_expression          shift and go to state 88
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 358

    (204) designator -> [ constant_expression ] .

    =               reduce using rule 204 (designator -> [ constant_expression ] .)
    [               reduce using rule 204 (designator -> [ constant_expression ] .)
    .               reduce using rule 204 (designator -> [ constant_expression ] .)


state 359

    (110) conditional_expression -> logical_or_expression ? expression : . conditional_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )

    (               shift and go to state 164
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    logical_or_expression          shift and go to state 92
    conditional_expression         shift and go to state 386
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118
    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    primary_expression             shift and go to state 101

state 360

    (154) postfix_expression -> postfix_expression [ expression ] .

    [               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    (               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    .               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    PTR_OP          reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    INC_OP          reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    DEC_OP          reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    =               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    MUL_ASSIGN      reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    DIV_ASSIGN      reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    MOD_ASSIGN      reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    ADD_ASSIGN      reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    SUB_ASSIGN      reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    LEFT_ASSIGN     reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    RIGHT_ASSIGN    reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    AND_ASSIGN      reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    XOR_ASSIGN      reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    OR_ASSIGN       reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    *               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    /               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    %               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    +               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    -               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    LEFT_OP         reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    RIGHT_OP        reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    <               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    >               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    LE_OP           reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    GE_OP           reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    EQ_OP           reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    NE_OP           reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    &               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    ^               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    |               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    AND_OP          reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    ?               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    OR_OP           reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    ;               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    ,               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    ]               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    MACRO           reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    TYPEDEF         reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    EXTERN          reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    STATIC          reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    AUTO            reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    REGISTER        reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    VOID            reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    CHAR            reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    SHORT           reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    INT             reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    LONG            reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    FLOAT           reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    DOUBLE          reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    SIGNED          reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    UNSIGNED        reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    BOOL            reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    CONST           reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    RESTRICT        reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    VOLATILE        reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    INLINE          reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    ENUM            reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    STRUCT          reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    UNION           reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    $end            reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    }               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    )               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)
    :               reduce using rule 154 (postfix_expression -> postfix_expression [ expression ] .)


state 361

    (156) postfix_expression -> postfix_expression ( argument_expression_list ) .

    [               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    (               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    .               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    PTR_OP          reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    INC_OP          reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DEC_OP          reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    =               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MUL_ASSIGN      reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DIV_ASSIGN      reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MOD_ASSIGN      reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ADD_ASSIGN      reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    SUB_ASSIGN      reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LEFT_ASSIGN     reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    RIGHT_ASSIGN    reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND_ASSIGN      reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    XOR_ASSIGN      reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR_ASSIGN       reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    *               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    /               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    %               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    +               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    -               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LEFT_OP         reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    RIGHT_OP        reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    <               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    >               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LE_OP           reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    GE_OP           reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    EQ_OP           reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    NE_OP           reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    &               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ^               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    |               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND_OP          reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ?               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR_OP           reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ;               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ,               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ]               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MACRO           reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    TYPEDEF         reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    EXTERN          reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    STATIC          reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AUTO            reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    REGISTER        reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    VOID            reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    CHAR            reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    SHORT           reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    INT             reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LONG            reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    FLOAT           reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DOUBLE          reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    SIGNED          reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    UNSIGNED        reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    BOOL            reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    CONST           reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    RESTRICT        reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    VOLATILE        reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    INLINE          reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ENUM            reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    STRUCT          reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    UNION           reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    $end            reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    }               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    )               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    :               reduce using rule 156 (postfix_expression -> postfix_expression ( argument_expression_list ) .)


state 362

    (193) argument_expression_list -> argument_expression_list , . assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    assignment_expression          shift and go to state 387
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 363

    (161) postfix_expression -> ( type_name ) . { initializer_list }
    (162) postfix_expression -> ( type_name ) . { initializer_list , }

    {               shift and go to state 365


state 364

    (146) unary_expression -> SIZEOF ( type_name ) .
    (161) postfix_expression -> ( type_name ) . { initializer_list }
    (162) postfix_expression -> ( type_name ) . { initializer_list , }

    =               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    MUL_ASSIGN      reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    DIV_ASSIGN      reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    MOD_ASSIGN      reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    ADD_ASSIGN      reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    SUB_ASSIGN      reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    LEFT_ASSIGN     reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    RIGHT_ASSIGN    reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    AND_ASSIGN      reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    XOR_ASSIGN      reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    OR_ASSIGN       reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    *               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    /               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    %               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    +               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    -               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    LEFT_OP         reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    RIGHT_OP        reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    <               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    >               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    LE_OP           reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    GE_OP           reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    EQ_OP           reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    NE_OP           reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    &               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    ^               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    |               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    AND_OP          reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    ?               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    OR_OP           reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    ;               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    ,               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    ]               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    MACRO           reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    TYPEDEF         reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    EXTERN          reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    STATIC          reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    AUTO            reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    REGISTER        reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    VOID            reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    CHAR            reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    SHORT           reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    INT             reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    LONG            reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    FLOAT           reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    DOUBLE          reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    SIGNED          reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    UNSIGNED        reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    BOOL            reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    CONST           reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    RESTRICT        reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    VOLATILE        reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    INLINE          reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    ENUM            reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    STRUCT          reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    UNION           reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    $end            reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    }               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    )               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    :               reduce using rule 146 (unary_expression -> SIZEOF ( type_name ) .)
    {               shift and go to state 365


state 365

    (161) postfix_expression -> ( type_name ) { . initializer_list }
    (162) postfix_expression -> ( type_name ) { . initializer_list , }
    (194) initializer_list -> . initializer
    (195) initializer_list -> . designation initializer
    (196) initializer_list -> . initializer_list , initializer
    (197) initializer_list -> . initializer_list , designation initializer
    (198) initializer -> . assignment_expression
    (199) initializer -> . { initializer_list }
    (200) initializer -> . { initializer_list , }
    (201) designation -> . designator_list =
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (202) designator_list -> . designator
    (203) designator_list -> . designator_list designator
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (204) designator -> . [ constant_expression ]
    (205) designator -> . . IDENTIFIER
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 89
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    [               shift and go to state 186
    .               shift and go to state 187
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    initializer_list               shift and go to state 388
    initializer                    shift and go to state 182
    designation                    shift and go to state 183
    assignment_expression          shift and go to state 88
    designator_list                shift and go to state 184
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    designator                     shift and go to state 185
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 366

    (140) cast_expression -> ( type_name ) cast_expression .

    *               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    /               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    %               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    +               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    -               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    LEFT_OP         reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_OP        reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    <               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    >               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    LE_OP           reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    GE_OP           reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    EQ_OP           reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    NE_OP           reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    &               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    ^               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    |               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    AND_OP          reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    ?               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    OR_OP           reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    ;               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    ,               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    ]               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    MACRO           reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    TYPEDEF         reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    EXTERN          reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    STATIC          reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    AUTO            reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    REGISTER        reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    VOID            reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    CHAR            reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    SHORT           reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    INT             reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    LONG            reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    FLOAT           reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    DOUBLE          reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    SIGNED          reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    UNSIGNED        reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    BOOL            reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    CONST           reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    RESTRICT        reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    VOLATILE        reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    INLINE          reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    ENUM            reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    STRUCT          reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    UNION           reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    $end            reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    }               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    =               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    MUL_ASSIGN      reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    DIV_ASSIGN      reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    MOD_ASSIGN      reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    ADD_ASSIGN      reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    SUB_ASSIGN      reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    LEFT_ASSIGN     reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_ASSIGN    reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    AND_ASSIGN      reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    XOR_ASSIGN      reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    OR_ASSIGN       reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    )               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)
    :               reduce using rule 140 (cast_expression -> ( type_name ) cast_expression .)


state 367

    (223) labeled_statement -> CASE constant_expression : statement .

    }               reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    IDENTIFIER      reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    CASE            reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    DEFAULT         reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    {               reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    ;               reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    IF              reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    SWITCH          reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    WHILE           reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    DO              reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    FOR             reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    GOTO            reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    CONTINUE        reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    BREAK           reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    RETURN          reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    TYPEDEF         reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    EXTERN          reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    STATIC          reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    AUTO            reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    REGISTER        reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    VOID            reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    CHAR            reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    SHORT           reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    INT             reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    LONG            reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    FLOAT           reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    DOUBLE          reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    SIGNED          reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    UNSIGNED        reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    BOOL            reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    CONST           reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    RESTRICT        reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    VOLATILE        reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    INLINE          reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    ENUM            reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    STRUCT          reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    UNION           reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    INC_OP          reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    DEC_OP          reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    SIZEOF          reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    (               reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    &               reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    *               reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    +               reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    -               reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    ~               reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    !               reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    CONSTANT        reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    STRING_LITERAL  reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)
    ELSE            reduce using rule 223 (labeled_statement -> CASE constant_expression : statement .)


state 368

    (227) selection_statement -> IF ( expression ) . statement
    (228) selection_statement -> IF ( expression ) . statement ELSE statement
    (216) statement -> . labeled_statement
    (217) statement -> . compound_statement
    (218) statement -> . expression_statement
    (219) statement -> . selection_statement
    (220) statement -> . iteration_statement
    (221) statement -> . jump_statement
    (222) labeled_statement -> . IDENTIFIER : statement
    (223) labeled_statement -> . CASE constant_expression : statement
    (224) labeled_statement -> . DEFAULT : statement
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (227) selection_statement -> . IF ( expression ) statement
    (228) selection_statement -> . IF ( expression ) statement ELSE statement
    (229) selection_statement -> . SWITCH ( expression ) statement
    (230) iteration_statement -> . WHILE ( expression ) statement
    (231) iteration_statement -> . DO statement WHILE ( expression ) ;
    (232) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (233) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (235) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (236) jump_statement -> . GOTO IDENTIFIER ;
    (237) jump_statement -> . CONTINUE ;
    (238) jump_statement -> . BREAK ;
    (239) jump_statement -> . RETURN ;
    (240) jump_statement -> . RETURN expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 131
    CASE            shift and go to state 132
    DEFAULT         shift and go to state 133
    {               shift and go to state 61
    ;               shift and go to state 124
    IF              shift and go to state 135
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 137
    DO              shift and go to state 138
    FOR             shift and go to state 139
    GOTO            shift and go to state 140
    CONTINUE        shift and go to state 141
    BREAK           shift and go to state 142
    RETURN          shift and go to state 143
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression                     shift and go to state 134
    statement                      shift and go to state 389
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 369

    (229) selection_statement -> SWITCH ( expression ) . statement
    (216) statement -> . labeled_statement
    (217) statement -> . compound_statement
    (218) statement -> . expression_statement
    (219) statement -> . selection_statement
    (220) statement -> . iteration_statement
    (221) statement -> . jump_statement
    (222) labeled_statement -> . IDENTIFIER : statement
    (223) labeled_statement -> . CASE constant_expression : statement
    (224) labeled_statement -> . DEFAULT : statement
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (227) selection_statement -> . IF ( expression ) statement
    (228) selection_statement -> . IF ( expression ) statement ELSE statement
    (229) selection_statement -> . SWITCH ( expression ) statement
    (230) iteration_statement -> . WHILE ( expression ) statement
    (231) iteration_statement -> . DO statement WHILE ( expression ) ;
    (232) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (233) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (235) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (236) jump_statement -> . GOTO IDENTIFIER ;
    (237) jump_statement -> . CONTINUE ;
    (238) jump_statement -> . BREAK ;
    (239) jump_statement -> . RETURN ;
    (240) jump_statement -> . RETURN expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 131
    CASE            shift and go to state 132
    DEFAULT         shift and go to state 133
    {               shift and go to state 61
    ;               shift and go to state 124
    IF              shift and go to state 135
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 137
    DO              shift and go to state 138
    FOR             shift and go to state 139
    GOTO            shift and go to state 140
    CONTINUE        shift and go to state 141
    BREAK           shift and go to state 142
    RETURN          shift and go to state 143
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression                     shift and go to state 134
    statement                      shift and go to state 390
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 370

    (230) iteration_statement -> WHILE ( expression ) . statement
    (216) statement -> . labeled_statement
    (217) statement -> . compound_statement
    (218) statement -> . expression_statement
    (219) statement -> . selection_statement
    (220) statement -> . iteration_statement
    (221) statement -> . jump_statement
    (222) labeled_statement -> . IDENTIFIER : statement
    (223) labeled_statement -> . CASE constant_expression : statement
    (224) labeled_statement -> . DEFAULT : statement
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (227) selection_statement -> . IF ( expression ) statement
    (228) selection_statement -> . IF ( expression ) statement ELSE statement
    (229) selection_statement -> . SWITCH ( expression ) statement
    (230) iteration_statement -> . WHILE ( expression ) statement
    (231) iteration_statement -> . DO statement WHILE ( expression ) ;
    (232) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (233) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (235) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (236) jump_statement -> . GOTO IDENTIFIER ;
    (237) jump_statement -> . CONTINUE ;
    (238) jump_statement -> . BREAK ;
    (239) jump_statement -> . RETURN ;
    (240) jump_statement -> . RETURN expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 131
    CASE            shift and go to state 132
    DEFAULT         shift and go to state 133
    {               shift and go to state 61
    ;               shift and go to state 124
    IF              shift and go to state 135
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 137
    DO              shift and go to state 138
    FOR             shift and go to state 139
    GOTO            shift and go to state 140
    CONTINUE        shift and go to state 141
    BREAK           shift and go to state 142
    RETURN          shift and go to state 143
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression                     shift and go to state 134
    statement                      shift and go to state 391
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 371

    (231) iteration_statement -> DO statement WHILE ( . expression ) ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression                     shift and go to state 392
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 372

    (232) iteration_statement -> FOR ( expression_statement expression_statement . ) statement
    (233) iteration_statement -> FOR ( expression_statement expression_statement . expression ) statement
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 393
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression                     shift and go to state 394
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 373

    (234) iteration_statement -> FOR ( declaration expression_statement . ) statement
    (235) iteration_statement -> FOR ( declaration expression_statement . expression ) statement
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 395
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression                     shift and go to state 396
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 374

    (86) direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .

    [               reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    (               reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    =               reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    {               reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    TYPEDEF         reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    EXTERN          reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    STATIC          reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    AUTO            reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    REGISTER        reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    VOID            reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    CHAR            reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    SHORT           reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    INT             reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    LONG            reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    FLOAT           reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    DOUBLE          reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    SIGNED          reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    UNSIGNED        reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    BOOL            reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    CONST           reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    RESTRICT        reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    VOLATILE        reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    INLINE          reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    ENUM            reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    STRUCT          reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    UNION           reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    ;               reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    ,               reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    )               reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    :               reduce using rule 86 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)


state 375

    (85) direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .

    [               reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    (               reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    =               reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    {               reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    TYPEDEF         reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    EXTERN          reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    STATIC          reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    AUTO            reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    REGISTER        reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    VOID            reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    CHAR            reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    SHORT           reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    INT             reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    LONG            reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    FLOAT           reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    DOUBLE          reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    SIGNED          reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    UNSIGNED        reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    BOOL            reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    CONST           reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    RESTRICT        reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    VOLATILE        reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    INLINE          reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    ENUM            reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    STRUCT          reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    UNION           reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    ;               reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    ,               reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    )               reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    :               reduce using rule 85 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)


state 376

    (177) direct_abstract_declarator -> direct_abstract_declarator [ ] .

    [               reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    (               reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    ,               reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    )               reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)


state 377

    (178) direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression . ]

    ]               shift and go to state 397


state 378

    (180) direct_abstract_declarator -> direct_abstract_declarator [ * . ]
    (148) unary_operator -> * .

    ]               shift and go to state 398
    (               reduce using rule 148 (unary_operator -> * .)
    INC_OP          reduce using rule 148 (unary_operator -> * .)
    DEC_OP          reduce using rule 148 (unary_operator -> * .)
    SIZEOF          reduce using rule 148 (unary_operator -> * .)
    &               reduce using rule 148 (unary_operator -> * .)
    *               reduce using rule 148 (unary_operator -> * .)
    +               reduce using rule 148 (unary_operator -> * .)
    -               reduce using rule 148 (unary_operator -> * .)
    ~               reduce using rule 148 (unary_operator -> * .)
    !               reduce using rule 148 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 148 (unary_operator -> * .)
    CONSTANT        reduce using rule 148 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 148 (unary_operator -> * .)


state 379

    (183) direct_abstract_declarator -> direct_abstract_declarator ( ) .

    [               reduce using rule 183 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    (               reduce using rule 183 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    ,               reduce using rule 183 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    )               reduce using rule 183 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)


state 380

    (184) direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list . )

    )               shift and go to state 399


state 381

    (174) direct_abstract_declarator -> ( abstract_declarator ) .

    [               reduce using rule 174 (direct_abstract_declarator -> ( abstract_declarator ) .)
    (               reduce using rule 174 (direct_abstract_declarator -> ( abstract_declarator ) .)
    ,               reduce using rule 174 (direct_abstract_declarator -> ( abstract_declarator ) .)
    )               reduce using rule 174 (direct_abstract_declarator -> ( abstract_declarator ) .)


state 382

    (182) direct_abstract_declarator -> ( parameter_type_list ) .

    [               reduce using rule 182 (direct_abstract_declarator -> ( parameter_type_list ) .)
    (               reduce using rule 182 (direct_abstract_declarator -> ( parameter_type_list ) .)
    ,               reduce using rule 182 (direct_abstract_declarator -> ( parameter_type_list ) .)
    )               reduce using rule 182 (direct_abstract_declarator -> ( parameter_type_list ) .)


state 383

    (176) direct_abstract_declarator -> [ assignment_expression ] .

    [               reduce using rule 176 (direct_abstract_declarator -> [ assignment_expression ] .)
    (               reduce using rule 176 (direct_abstract_declarator -> [ assignment_expression ] .)
    ,               reduce using rule 176 (direct_abstract_declarator -> [ assignment_expression ] .)
    )               reduce using rule 176 (direct_abstract_declarator -> [ assignment_expression ] .)


state 384

    (179) direct_abstract_declarator -> [ * ] .

    [               reduce using rule 179 (direct_abstract_declarator -> [ * ] .)
    (               reduce using rule 179 (direct_abstract_declarator -> [ * ] .)
    ,               reduce using rule 179 (direct_abstract_declarator -> [ * ] .)
    )               reduce using rule 179 (direct_abstract_declarator -> [ * ] .)


state 385

    (197) initializer_list -> initializer_list , designation initializer .

    }               reduce using rule 197 (initializer_list -> initializer_list , designation initializer .)
    ,               reduce using rule 197 (initializer_list -> initializer_list , designation initializer .)


state 386

    (110) conditional_expression -> logical_or_expression ? expression : conditional_expression .

    ;               reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ,               reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ]               reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    MACRO           reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    TYPEDEF         reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    EXTERN          reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    STATIC          reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    AUTO            reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    REGISTER        reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    VOID            reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    CHAR            reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    SHORT           reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    INT             reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    LONG            reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    FLOAT           reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    DOUBLE          reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    SIGNED          reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    UNSIGNED        reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    BOOL            reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    CONST           reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    RESTRICT        reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    VOLATILE        reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    INLINE          reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ENUM            reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    STRUCT          reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    UNION           reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    $end            reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    }               reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    )               reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    :               reduce using rule 110 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)


state 387

    (193) argument_expression_list -> argument_expression_list , assignment_expression .

    )               reduce using rule 193 (argument_expression_list -> argument_expression_list , assignment_expression .)
    ,               reduce using rule 193 (argument_expression_list -> argument_expression_list , assignment_expression .)


state 388

    (161) postfix_expression -> ( type_name ) { initializer_list . }
    (162) postfix_expression -> ( type_name ) { initializer_list . , }
    (196) initializer_list -> initializer_list . , initializer
    (197) initializer_list -> initializer_list . , designation initializer

    }               shift and go to state 400
    ,               shift and go to state 401


state 389

    (227) selection_statement -> IF ( expression ) statement .
    (228) selection_statement -> IF ( expression ) statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    }               reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    IDENTIFIER      reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    CASE            reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    DEFAULT         reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    {               reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    ;               reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    IF              reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    SWITCH          reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    DO              reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    FOR             reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    GOTO            reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    BREAK           reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    TYPEDEF         reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    EXTERN          reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    STATIC          reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    AUTO            reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    REGISTER        reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    VOID            reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    CHAR            reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    SHORT           reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    INT             reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    LONG            reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    FLOAT           reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    DOUBLE          reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    SIGNED          reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    UNSIGNED        reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    BOOL            reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    CONST           reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    RESTRICT        reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    VOLATILE        reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    INLINE          reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    ENUM            reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    STRUCT          reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    UNION           reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    INC_OP          reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    DEC_OP          reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    SIZEOF          reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    (               reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    &               reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    *               reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    +               reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    -               reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    ~               reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    !               reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    CONSTANT        reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    STRING_LITERAL  reduce using rule 227 (selection_statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 402

  ! ELSE            [ reduce using rule 227 (selection_statement -> IF ( expression ) statement .) ]


state 390

    (229) selection_statement -> SWITCH ( expression ) statement .

    }               reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    IDENTIFIER      reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    CASE            reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    DEFAULT         reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    {               reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    ;               reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    IF              reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    SWITCH          reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    WHILE           reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    DO              reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    FOR             reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    GOTO            reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    CONTINUE        reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    BREAK           reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    RETURN          reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    TYPEDEF         reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    EXTERN          reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    STATIC          reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    AUTO            reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    REGISTER        reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    VOID            reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    CHAR            reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    SHORT           reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    INT             reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    LONG            reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    FLOAT           reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    DOUBLE          reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    SIGNED          reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    UNSIGNED        reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    BOOL            reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    CONST           reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    RESTRICT        reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    VOLATILE        reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    INLINE          reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    ENUM            reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    STRUCT          reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    UNION           reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    INC_OP          reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    DEC_OP          reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    SIZEOF          reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    (               reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    &               reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    *               reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    +               reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    -               reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    ~               reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    !               reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    CONSTANT        reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    STRING_LITERAL  reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)
    ELSE            reduce using rule 229 (selection_statement -> SWITCH ( expression ) statement .)


state 391

    (230) iteration_statement -> WHILE ( expression ) statement .

    }               reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    IDENTIFIER      reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    CASE            reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    DEFAULT         reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    {               reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    ;               reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    IF              reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    SWITCH          reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    DO              reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    FOR             reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    GOTO            reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    CONTINUE        reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    BREAK           reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    RETURN          reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    TYPEDEF         reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    EXTERN          reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    STATIC          reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    AUTO            reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    REGISTER        reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    VOID            reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    CHAR            reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    SHORT           reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    INT             reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    LONG            reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    FLOAT           reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    DOUBLE          reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    SIGNED          reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    UNSIGNED        reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    BOOL            reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    CONST           reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    RESTRICT        reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    VOLATILE        reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    INLINE          reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    ENUM            reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    STRUCT          reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    UNION           reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    INC_OP          reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    DEC_OP          reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    SIZEOF          reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    (               reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    &               reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    *               reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    +               reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    -               reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    ~               reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    !               reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    CONSTANT        reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    STRING_LITERAL  reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)
    ELSE            reduce using rule 230 (iteration_statement -> WHILE ( expression ) statement .)


state 392

    (231) iteration_statement -> DO statement WHILE ( expression . ) ;
    (168) expression -> expression . , assignment_expression

    )               shift and go to state 403
    ,               shift and go to state 240


state 393

    (232) iteration_statement -> FOR ( expression_statement expression_statement ) . statement
    (216) statement -> . labeled_statement
    (217) statement -> . compound_statement
    (218) statement -> . expression_statement
    (219) statement -> . selection_statement
    (220) statement -> . iteration_statement
    (221) statement -> . jump_statement
    (222) labeled_statement -> . IDENTIFIER : statement
    (223) labeled_statement -> . CASE constant_expression : statement
    (224) labeled_statement -> . DEFAULT : statement
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (227) selection_statement -> . IF ( expression ) statement
    (228) selection_statement -> . IF ( expression ) statement ELSE statement
    (229) selection_statement -> . SWITCH ( expression ) statement
    (230) iteration_statement -> . WHILE ( expression ) statement
    (231) iteration_statement -> . DO statement WHILE ( expression ) ;
    (232) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (233) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (235) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (236) jump_statement -> . GOTO IDENTIFIER ;
    (237) jump_statement -> . CONTINUE ;
    (238) jump_statement -> . BREAK ;
    (239) jump_statement -> . RETURN ;
    (240) jump_statement -> . RETURN expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 131
    CASE            shift and go to state 132
    DEFAULT         shift and go to state 133
    {               shift and go to state 61
    ;               shift and go to state 124
    IF              shift and go to state 135
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 137
    DO              shift and go to state 138
    FOR             shift and go to state 139
    GOTO            shift and go to state 140
    CONTINUE        shift and go to state 141
    BREAK           shift and go to state 142
    RETURN          shift and go to state 143
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression_statement           shift and go to state 127
    statement                      shift and go to state 404
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    expression                     shift and go to state 134
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 394

    (233) iteration_statement -> FOR ( expression_statement expression_statement expression . ) statement
    (168) expression -> expression . , assignment_expression

    )               shift and go to state 405
    ,               shift and go to state 240


state 395

    (234) iteration_statement -> FOR ( declaration expression_statement ) . statement
    (216) statement -> . labeled_statement
    (217) statement -> . compound_statement
    (218) statement -> . expression_statement
    (219) statement -> . selection_statement
    (220) statement -> . iteration_statement
    (221) statement -> . jump_statement
    (222) labeled_statement -> . IDENTIFIER : statement
    (223) labeled_statement -> . CASE constant_expression : statement
    (224) labeled_statement -> . DEFAULT : statement
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (227) selection_statement -> . IF ( expression ) statement
    (228) selection_statement -> . IF ( expression ) statement ELSE statement
    (229) selection_statement -> . SWITCH ( expression ) statement
    (230) iteration_statement -> . WHILE ( expression ) statement
    (231) iteration_statement -> . DO statement WHILE ( expression ) ;
    (232) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (233) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (235) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (236) jump_statement -> . GOTO IDENTIFIER ;
    (237) jump_statement -> . CONTINUE ;
    (238) jump_statement -> . BREAK ;
    (239) jump_statement -> . RETURN ;
    (240) jump_statement -> . RETURN expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 131
    CASE            shift and go to state 132
    DEFAULT         shift and go to state 133
    {               shift and go to state 61
    ;               shift and go to state 124
    IF              shift and go to state 135
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 137
    DO              shift and go to state 138
    FOR             shift and go to state 139
    GOTO            shift and go to state 140
    CONTINUE        shift and go to state 141
    BREAK           shift and go to state 142
    RETURN          shift and go to state 143
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression_statement           shift and go to state 127
    statement                      shift and go to state 406
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    expression                     shift and go to state 134
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 396

    (235) iteration_statement -> FOR ( declaration expression_statement expression . ) statement
    (168) expression -> expression . , assignment_expression

    )               shift and go to state 407
    ,               shift and go to state 240


state 397

    (178) direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .

    [               reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)
    (               reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)
    ,               reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)
    )               reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)


state 398

    (180) direct_abstract_declarator -> direct_abstract_declarator [ * ] .

    [               reduce using rule 180 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)
    (               reduce using rule 180 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)
    ,               reduce using rule 180 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)
    )               reduce using rule 180 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)


state 399

    (184) direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .

    [               reduce using rule 184 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    (               reduce using rule 184 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    ,               reduce using rule 184 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    )               reduce using rule 184 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)


state 400

    (161) postfix_expression -> ( type_name ) { initializer_list } .

    [               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    (               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    .               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    PTR_OP          reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    INC_OP          reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    DEC_OP          reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    =               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    MUL_ASSIGN      reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    DIV_ASSIGN      reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    MOD_ASSIGN      reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    ADD_ASSIGN      reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    SUB_ASSIGN      reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    LEFT_ASSIGN     reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    RIGHT_ASSIGN    reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    AND_ASSIGN      reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    XOR_ASSIGN      reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    OR_ASSIGN       reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    *               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    /               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    %               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    +               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    -               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    LEFT_OP         reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    RIGHT_OP        reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    <               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    >               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    LE_OP           reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    GE_OP           reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    EQ_OP           reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    NE_OP           reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    &               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    ^               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    |               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    AND_OP          reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    ?               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    OR_OP           reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    ;               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    ,               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    ]               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    MACRO           reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    TYPEDEF         reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    EXTERN          reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    STATIC          reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    AUTO            reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    REGISTER        reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    VOID            reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    CHAR            reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    SHORT           reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    INT             reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    LONG            reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    FLOAT           reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    DOUBLE          reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    SIGNED          reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    UNSIGNED        reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    BOOL            reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    CONST           reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    RESTRICT        reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    VOLATILE        reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    INLINE          reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    ENUM            reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    STRUCT          reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    UNION           reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    $end            reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    }               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    )               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)
    :               reduce using rule 161 (postfix_expression -> ( type_name ) { initializer_list } .)


state 401

    (162) postfix_expression -> ( type_name ) { initializer_list , . }
    (196) initializer_list -> initializer_list , . initializer
    (197) initializer_list -> initializer_list , . designation initializer
    (198) initializer -> . assignment_expression
    (199) initializer -> . { initializer_list }
    (200) initializer -> . { initializer_list , }
    (201) designation -> . designator_list =
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (202) designator_list -> . designator
    (203) designator_list -> . designator_list designator
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (204) designator -> . [ constant_expression ]
    (205) designator -> . . IDENTIFIER
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 408
    {               shift and go to state 89
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    [               shift and go to state 186
    .               shift and go to state 187
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    IDENTIFIER      shift and go to state 102
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    initializer                    shift and go to state 356
    designation                    shift and go to state 357
    assignment_expression          shift and go to state 88
    designator_list                shift and go to state 184
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    designator                     shift and go to state 185
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 402

    (228) selection_statement -> IF ( expression ) statement ELSE . statement
    (216) statement -> . labeled_statement
    (217) statement -> . compound_statement
    (218) statement -> . expression_statement
    (219) statement -> . selection_statement
    (220) statement -> . iteration_statement
    (221) statement -> . jump_statement
    (222) labeled_statement -> . IDENTIFIER : statement
    (223) labeled_statement -> . CASE constant_expression : statement
    (224) labeled_statement -> . DEFAULT : statement
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (227) selection_statement -> . IF ( expression ) statement
    (228) selection_statement -> . IF ( expression ) statement ELSE statement
    (229) selection_statement -> . SWITCH ( expression ) statement
    (230) iteration_statement -> . WHILE ( expression ) statement
    (231) iteration_statement -> . DO statement WHILE ( expression ) ;
    (232) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (233) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (235) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (236) jump_statement -> . GOTO IDENTIFIER ;
    (237) jump_statement -> . CONTINUE ;
    (238) jump_statement -> . BREAK ;
    (239) jump_statement -> . RETURN ;
    (240) jump_statement -> . RETURN expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 131
    CASE            shift and go to state 132
    DEFAULT         shift and go to state 133
    {               shift and go to state 61
    ;               shift and go to state 124
    IF              shift and go to state 135
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 137
    DO              shift and go to state 138
    FOR             shift and go to state 139
    GOTO            shift and go to state 140
    CONTINUE        shift and go to state 141
    BREAK           shift and go to state 142
    RETURN          shift and go to state 143
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression                     shift and go to state 134
    statement                      shift and go to state 409
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 403

    (231) iteration_statement -> DO statement WHILE ( expression ) . ;

    ;               shift and go to state 410


state 404

    (232) iteration_statement -> FOR ( expression_statement expression_statement ) statement .

    }               reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    IDENTIFIER      reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CASE            reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DEFAULT         reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    {               reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ;               reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    IF              reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SWITCH          reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    WHILE           reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DO              reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    FOR             reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    GOTO            reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONTINUE        reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    BREAK           reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    RETURN          reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    TYPEDEF         reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    EXTERN          reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STATIC          reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    AUTO            reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    REGISTER        reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    VOID            reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CHAR            reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SHORT           reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INT             reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    LONG            reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    FLOAT           reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DOUBLE          reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SIGNED          reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    UNSIGNED        reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    BOOL            reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONST           reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    RESTRICT        reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    VOLATILE        reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INLINE          reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ENUM            reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STRUCT          reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    UNION           reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INC_OP          reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DEC_OP          reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SIZEOF          reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    (               reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    &               reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    *               reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    +               reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    -               reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ~               reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    !               reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONSTANT        reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STRING_LITERAL  reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ELSE            reduce using rule 232 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)


state 405

    (233) iteration_statement -> FOR ( expression_statement expression_statement expression ) . statement
    (216) statement -> . labeled_statement
    (217) statement -> . compound_statement
    (218) statement -> . expression_statement
    (219) statement -> . selection_statement
    (220) statement -> . iteration_statement
    (221) statement -> . jump_statement
    (222) labeled_statement -> . IDENTIFIER : statement
    (223) labeled_statement -> . CASE constant_expression : statement
    (224) labeled_statement -> . DEFAULT : statement
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (227) selection_statement -> . IF ( expression ) statement
    (228) selection_statement -> . IF ( expression ) statement ELSE statement
    (229) selection_statement -> . SWITCH ( expression ) statement
    (230) iteration_statement -> . WHILE ( expression ) statement
    (231) iteration_statement -> . DO statement WHILE ( expression ) ;
    (232) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (233) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (235) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (236) jump_statement -> . GOTO IDENTIFIER ;
    (237) jump_statement -> . CONTINUE ;
    (238) jump_statement -> . BREAK ;
    (239) jump_statement -> . RETURN ;
    (240) jump_statement -> . RETURN expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 131
    CASE            shift and go to state 132
    DEFAULT         shift and go to state 133
    {               shift and go to state 61
    ;               shift and go to state 124
    IF              shift and go to state 135
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 137
    DO              shift and go to state 138
    FOR             shift and go to state 139
    GOTO            shift and go to state 140
    CONTINUE        shift and go to state 141
    BREAK           shift and go to state 142
    RETURN          shift and go to state 143
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression_statement           shift and go to state 127
    expression                     shift and go to state 134
    statement                      shift and go to state 411
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 406

    (234) iteration_statement -> FOR ( declaration expression_statement ) statement .

    }               reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    IDENTIFIER      reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CASE            reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DEFAULT         reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    {               reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ;               reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    IF              reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SWITCH          reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    WHILE           reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DO              reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    FOR             reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    GOTO            reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONTINUE        reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    BREAK           reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    RETURN          reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    TYPEDEF         reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    EXTERN          reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STATIC          reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    AUTO            reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    REGISTER        reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    VOID            reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CHAR            reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SHORT           reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INT             reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    LONG            reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    FLOAT           reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DOUBLE          reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SIGNED          reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    UNSIGNED        reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    BOOL            reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONST           reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    RESTRICT        reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    VOLATILE        reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INLINE          reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ENUM            reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STRUCT          reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    UNION           reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INC_OP          reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DEC_OP          reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SIZEOF          reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    (               reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    &               reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    *               reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    +               reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    -               reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ~               reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    !               reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONSTANT        reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STRING_LITERAL  reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ELSE            reduce using rule 234 (iteration_statement -> FOR ( declaration expression_statement ) statement .)


state 407

    (235) iteration_statement -> FOR ( declaration expression_statement expression ) . statement
    (216) statement -> . labeled_statement
    (217) statement -> . compound_statement
    (218) statement -> . expression_statement
    (219) statement -> . selection_statement
    (220) statement -> . iteration_statement
    (221) statement -> . jump_statement
    (222) labeled_statement -> . IDENTIFIER : statement
    (223) labeled_statement -> . CASE constant_expression : statement
    (224) labeled_statement -> . DEFAULT : statement
    (210) compound_statement -> . { }
    (211) compound_statement -> . { block_item_list }
    (225) expression_statement -> . ;
    (226) expression_statement -> . expression ;
    (227) selection_statement -> . IF ( expression ) statement
    (228) selection_statement -> . IF ( expression ) statement ELSE statement
    (229) selection_statement -> . SWITCH ( expression ) statement
    (230) iteration_statement -> . WHILE ( expression ) statement
    (231) iteration_statement -> . DO statement WHILE ( expression ) ;
    (232) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (233) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (234) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (235) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (236) jump_statement -> . GOTO IDENTIFIER ;
    (237) jump_statement -> . CONTINUE ;
    (238) jump_statement -> . BREAK ;
    (239) jump_statement -> . RETURN ;
    (240) jump_statement -> . RETURN expression ;
    (167) expression -> . assignment_expression
    (168) expression -> . expression , assignment_expression
    (95) assignment_expression -> . conditional_expression
    (96) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) conditional_expression -> . logical_or_expression
    (110) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (141) unary_expression -> . postfix_expression
    (142) unary_expression -> . INC_OP unary_expression
    (143) unary_expression -> . DEC_OP unary_expression
    (144) unary_expression -> . unary_operator cast_expression
    (145) unary_expression -> . SIZEOF unary_expression
    (146) unary_expression -> . SIZEOF ( type_name )
    (111) logical_or_expression -> . logical_and_expression
    (112) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (153) postfix_expression -> . primary_expression
    (154) postfix_expression -> . postfix_expression [ expression ]
    (155) postfix_expression -> . postfix_expression ( )
    (156) postfix_expression -> . postfix_expression ( argument_expression_list )
    (157) postfix_expression -> . postfix_expression . IDENTIFIER
    (158) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (159) postfix_expression -> . postfix_expression INC_OP
    (160) postfix_expression -> . postfix_expression DEC_OP
    (161) postfix_expression -> . ( type_name ) { initializer_list }
    (162) postfix_expression -> . ( type_name ) { initializer_list , }
    (147) unary_operator -> . &
    (148) unary_operator -> . *
    (149) unary_operator -> . +
    (150) unary_operator -> . -
    (151) unary_operator -> . ~
    (152) unary_operator -> . !
    (113) logical_and_expression -> . inclusive_or_expression
    (114) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (163) primary_expression -> . IDENTIFIER
    (164) primary_expression -> . CONSTANT
    (165) primary_expression -> . STRING_LITERAL
    (166) primary_expression -> . ( expression )
    (115) inclusive_or_expression -> . exclusive_or_expression
    (116) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (117) exclusive_or_expression -> . and_expression
    (118) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (119) and_expression -> . equality_expression
    (120) and_expression -> . and_expression & equality_expression
    (121) equality_expression -> . relational_expression
    (122) equality_expression -> . equality_expression EQ_OP relational_expression
    (123) equality_expression -> . equality_expression NE_OP relational_expression
    (124) relational_expression -> . shift_expression
    (125) relational_expression -> . relational_expression < shift_expression
    (126) relational_expression -> . relational_expression > shift_expression
    (127) relational_expression -> . relational_expression LE_OP shift_expression
    (128) relational_expression -> . relational_expression GE_OP shift_expression
    (129) shift_expression -> . additive_expression
    (130) shift_expression -> . shift_expression LEFT_OP additive_expression
    (131) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (132) additive_expression -> . multiplicative_expression
    (133) additive_expression -> . additive_expression + multiplicative_expression
    (134) additive_expression -> . additive_expression - multiplicative_expression
    (135) multiplicative_expression -> . cast_expression
    (136) multiplicative_expression -> . multiplicative_expression * cast_expression
    (137) multiplicative_expression -> . multiplicative_expression / cast_expression
    (138) multiplicative_expression -> . multiplicative_expression % cast_expression
    (139) cast_expression -> . unary_expression
    (140) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 131
    CASE            shift and go to state 132
    DEFAULT         shift and go to state 133
    {               shift and go to state 61
    ;               shift and go to state 124
    IF              shift and go to state 135
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 137
    DO              shift and go to state 138
    FOR             shift and go to state 139
    GOTO            shift and go to state 140
    CONTINUE        shift and go to state 141
    BREAK           shift and go to state 142
    RETURN          shift and go to state 143
    INC_OP          shift and go to state 94
    DEC_OP          shift and go to state 95
    SIZEOF          shift and go to state 98
    (               shift and go to state 99
    &               shift and go to state 103
    *               shift and go to state 104
    +               shift and go to state 105
    -               shift and go to state 106
    ~               shift and go to state 107
    !               shift and go to state 108
    CONSTANT        shift and go to state 110
    STRING_LITERAL  shift and go to state 111

    expression_statement           shift and go to state 127
    expression                     shift and go to state 134
    statement                      shift and go to state 412
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 90
    unary_expression               shift and go to state 91
    logical_or_expression          shift and go to state 92
    postfix_expression             shift and go to state 93
    unary_operator                 shift and go to state 96
    cast_expression                shift and go to state 97
    logical_and_expression         shift and go to state 100
    primary_expression             shift and go to state 101
    inclusive_or_expression        shift and go to state 109
    exclusive_or_expression        shift and go to state 112
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 114
    relational_expression          shift and go to state 115
    shift_expression               shift and go to state 116
    additive_expression            shift and go to state 117
    multiplicative_expression      shift and go to state 118

state 408

    (162) postfix_expression -> ( type_name ) { initializer_list , } .

    [               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    (               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    .               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    PTR_OP          reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    INC_OP          reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    DEC_OP          reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    =               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    MUL_ASSIGN      reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    DIV_ASSIGN      reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    MOD_ASSIGN      reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ADD_ASSIGN      reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    SUB_ASSIGN      reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    LEFT_ASSIGN     reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    RIGHT_ASSIGN    reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    AND_ASSIGN      reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    XOR_ASSIGN      reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    OR_ASSIGN       reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    *               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    /               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    %               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    +               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    -               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    LEFT_OP         reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    RIGHT_OP        reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    <               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    >               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    LE_OP           reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    GE_OP           reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    EQ_OP           reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    NE_OP           reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    &               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ^               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    |               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    AND_OP          reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ?               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    OR_OP           reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ;               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ,               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ]               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    MACRO           reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    TYPEDEF         reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    EXTERN          reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    STATIC          reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    AUTO            reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    REGISTER        reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    VOID            reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    CHAR            reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    SHORT           reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    INT             reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    LONG            reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    FLOAT           reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    DOUBLE          reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    SIGNED          reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    UNSIGNED        reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    BOOL            reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    CONST           reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    RESTRICT        reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    VOLATILE        reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    INLINE          reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ENUM            reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    STRUCT          reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    UNION           reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    $end            reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    }               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    )               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)
    :               reduce using rule 162 (postfix_expression -> ( type_name ) { initializer_list , } .)


state 409

    (228) selection_statement -> IF ( expression ) statement ELSE statement .

    }               reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IDENTIFIER      reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CASE            reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DEFAULT         reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    {               reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ;               reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IF              reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SWITCH          reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DO              reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FOR             reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    GOTO            reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONTINUE        reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BREAK           reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RETURN          reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    TYPEDEF         reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    EXTERN          reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STATIC          reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    AUTO            reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    REGISTER        reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    VOID            reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CHAR            reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SHORT           reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INT             reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    LONG            reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FLOAT           reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DOUBLE          reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SIGNED          reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    UNSIGNED        reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BOOL            reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONST           reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RESTRICT        reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    VOLATILE        reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INLINE          reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ENUM            reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRUCT          reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    UNION           reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INC_OP          reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DEC_OP          reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SIZEOF          reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    &               reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    *               reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    +               reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ~               reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    !               reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONSTANT        reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRING_LITERAL  reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 228 (selection_statement -> IF ( expression ) statement ELSE statement .)


state 410

    (231) iteration_statement -> DO statement WHILE ( expression ) ; .

    }               reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    IDENTIFIER      reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CASE            reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DEFAULT         reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    {               reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ;               reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    IF              reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SWITCH          reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    WHILE           reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DO              reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    FOR             reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    GOTO            reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONTINUE        reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    BREAK           reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    RETURN          reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    TYPEDEF         reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    EXTERN          reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STATIC          reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    AUTO            reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    REGISTER        reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    VOID            reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CHAR            reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SHORT           reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INT             reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    LONG            reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    FLOAT           reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DOUBLE          reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SIGNED          reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    UNSIGNED        reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    BOOL            reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONST           reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    RESTRICT        reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    VOLATILE        reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INLINE          reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ENUM            reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STRUCT          reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    UNION           reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INC_OP          reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DEC_OP          reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SIZEOF          reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    (               reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    &               reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    *               reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    +               reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    -               reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ~               reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    !               reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONSTANT        reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STRING_LITERAL  reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ELSE            reduce using rule 231 (iteration_statement -> DO statement WHILE ( expression ) ; .)


state 411

    (233) iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .

    }               reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IDENTIFIER      reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CASE            reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DEFAULT         reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    {               reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ;               reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IF              reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SWITCH          reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    WHILE           reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DO              reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FOR             reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    GOTO            reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONTINUE        reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    BREAK           reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    RETURN          reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    TYPEDEF         reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    EXTERN          reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STATIC          reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    AUTO            reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    REGISTER        reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    VOID            reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CHAR            reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SHORT           reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INT             reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    LONG            reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FLOAT           reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DOUBLE          reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SIGNED          reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    UNSIGNED        reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    BOOL            reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONST           reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    RESTRICT        reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    VOLATILE        reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INLINE          reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ENUM            reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STRUCT          reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    UNION           reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INC_OP          reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DEC_OP          reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SIZEOF          reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    (               reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    &               reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    *               reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    +               reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    -               reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ~               reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    !               reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONSTANT        reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STRING_LITERAL  reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ELSE            reduce using rule 233 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)


state 412

    (235) iteration_statement -> FOR ( declaration expression_statement expression ) statement .

    }               reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    IDENTIFIER      reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CASE            reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DEFAULT         reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    {               reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ;               reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    IF              reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SWITCH          reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    WHILE           reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DO              reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    FOR             reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    GOTO            reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CONTINUE        reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    BREAK           reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    RETURN          reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    TYPEDEF         reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    EXTERN          reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    STATIC          reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    AUTO            reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    REGISTER        reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    VOID            reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CHAR            reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SHORT           reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INT             reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    LONG            reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    FLOAT           reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DOUBLE          reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SIGNED          reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    UNSIGNED        reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    BOOL            reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CONST           reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    RESTRICT        reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    VOLATILE        reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INLINE          reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ENUM            reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    STRUCT          reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    UNION           reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INC_OP          reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DEC_OP          reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SIZEOF          reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    (               reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    &               reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    *               reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    +               reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    -               reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ~               reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    !               reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CONSTANT        reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    STRING_LITERAL  reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ELSE            reduce using rule 235 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 389 resolved as shift
